
SPI-Slave-for-VIY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003168  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08003274  08003274  00013274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003498  08003498  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08003498  08003498  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003498  08003498  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003498  08003498  00013498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800349c  0800349c  0001349c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080034a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  20000080  08003520  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08003520  00020338  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008132  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce7  00000000  00000000  000281db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  00029ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000828  00000000  00000000  0002a7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017987  00000000  00000000  0002aff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac2a  00000000  00000000  00042977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084066  00000000  00000000  0004d5a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1607  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002734  00000000  00000000  000d1658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	0800325c 	.word	0x0800325c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	0800325c 	.word	0x0800325c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000162:	4b10      	ldr	r3, [pc, #64]	; (80001a4 <MX_DMA_Init+0x48>)
 8000164:	695b      	ldr	r3, [r3, #20]
 8000166:	4a0f      	ldr	r2, [pc, #60]	; (80001a4 <MX_DMA_Init+0x48>)
 8000168:	f043 0301 	orr.w	r3, r3, #1
 800016c:	6153      	str	r3, [r2, #20]
 800016e:	4b0d      	ldr	r3, [pc, #52]	; (80001a4 <MX_DMA_Init+0x48>)
 8000170:	695b      	ldr	r3, [r3, #20]
 8000172:	f003 0301 	and.w	r3, r3, #1
 8000176:	607b      	str	r3, [r7, #4]
 8000178:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800017a:	2200      	movs	r2, #0
 800017c:	2100      	movs	r1, #0
 800017e:	200e      	movs	r0, #14
 8000180:	f000 fe6f 	bl	8000e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000184:	200e      	movs	r0, #14
 8000186:	f000 fe88 	bl	8000e9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800018a:	2200      	movs	r2, #0
 800018c:	2100      	movs	r1, #0
 800018e:	200f      	movs	r0, #15
 8000190:	f000 fe67 	bl	8000e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000194:	200f      	movs	r0, #15
 8000196:	f000 fe80 	bl	8000e9a <HAL_NVIC_EnableIRQ>

}
 800019a:	bf00      	nop
 800019c:	3708      	adds	r7, #8
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	40021000 	.word	0x40021000

080001a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b088      	sub	sp, #32
 80001ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ae:	f107 0310 	add.w	r3, r7, #16
 80001b2:	2200      	movs	r2, #0
 80001b4:	601a      	str	r2, [r3, #0]
 80001b6:	605a      	str	r2, [r3, #4]
 80001b8:	609a      	str	r2, [r3, #8]
 80001ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001bc:	4b1d      	ldr	r3, [pc, #116]	; (8000234 <MX_GPIO_Init+0x8c>)
 80001be:	699b      	ldr	r3, [r3, #24]
 80001c0:	4a1c      	ldr	r2, [pc, #112]	; (8000234 <MX_GPIO_Init+0x8c>)
 80001c2:	f043 0320 	orr.w	r3, r3, #32
 80001c6:	6193      	str	r3, [r2, #24]
 80001c8:	4b1a      	ldr	r3, [pc, #104]	; (8000234 <MX_GPIO_Init+0x8c>)
 80001ca:	699b      	ldr	r3, [r3, #24]
 80001cc:	f003 0320 	and.w	r3, r3, #32
 80001d0:	60fb      	str	r3, [r7, #12]
 80001d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001d4:	4b17      	ldr	r3, [pc, #92]	; (8000234 <MX_GPIO_Init+0x8c>)
 80001d6:	699b      	ldr	r3, [r3, #24]
 80001d8:	4a16      	ldr	r2, [pc, #88]	; (8000234 <MX_GPIO_Init+0x8c>)
 80001da:	f043 0304 	orr.w	r3, r3, #4
 80001de:	6193      	str	r3, [r2, #24]
 80001e0:	4b14      	ldr	r3, [pc, #80]	; (8000234 <MX_GPIO_Init+0x8c>)
 80001e2:	699b      	ldr	r3, [r3, #24]
 80001e4:	f003 0304 	and.w	r3, r3, #4
 80001e8:	60bb      	str	r3, [r7, #8]
 80001ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001ec:	4b11      	ldr	r3, [pc, #68]	; (8000234 <MX_GPIO_Init+0x8c>)
 80001ee:	699b      	ldr	r3, [r3, #24]
 80001f0:	4a10      	ldr	r2, [pc, #64]	; (8000234 <MX_GPIO_Init+0x8c>)
 80001f2:	f043 0308 	orr.w	r3, r3, #8
 80001f6:	6193      	str	r3, [r2, #24]
 80001f8:	4b0e      	ldr	r3, [pc, #56]	; (8000234 <MX_GPIO_Init+0x8c>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	f003 0308 	and.w	r3, r3, #8
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000204:	2200      	movs	r2, #0
 8000206:	2102      	movs	r1, #2
 8000208:	480b      	ldr	r0, [pc, #44]	; (8000238 <MX_GPIO_Init+0x90>)
 800020a:	f001 f9d3 	bl	80015b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800020e:	2302      	movs	r3, #2
 8000210:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000212:	2311      	movs	r3, #17
 8000214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000216:	2300      	movs	r3, #0
 8000218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800021a:	2302      	movs	r3, #2
 800021c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800021e:	f107 0310 	add.w	r3, r7, #16
 8000222:	4619      	mov	r1, r3
 8000224:	4804      	ldr	r0, [pc, #16]	; (8000238 <MX_GPIO_Init+0x90>)
 8000226:	f001 f841 	bl	80012ac <HAL_GPIO_Init>

}
 800022a:	bf00      	nop
 800022c:	3720      	adds	r7, #32
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	40021000 	.word	0x40021000
 8000238:	40010800 	.word	0x40010800

0800023c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000242:	f000 fcb1 	bl	8000ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000246:	f000 f9e1 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024a:	f7ff ffad 	bl	80001a8 <MX_GPIO_Init>
  MX_DMA_Init();
 800024e:	f7ff ff85 	bl	800015c <MX_DMA_Init>
  MX_SPI2_Init();
 8000252:	f000 fa91 	bl	8000778 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000256:	f000 fc0b 	bl	8000a70 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	sprintf(DataChar,"\r\n\r\n\tSPI+DMA SLAVE for VIY.UA\r\n" );
 800025a:	4971      	ldr	r1, [pc, #452]	; (8000420 <main+0x1e4>)
 800025c:	4871      	ldr	r0, [pc, #452]	; (8000424 <main+0x1e8>)
 800025e:	f002 fb83 	bl	8002968 <siprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 8000262:	4870      	ldr	r0, [pc, #448]	; (8000424 <main+0x1e8>)
 8000264:	f7ff ff72 	bl	800014c <strlen>
 8000268:	4603      	mov	r3, r0
 800026a:	b29a      	uxth	r2, r3
 800026c:	2364      	movs	r3, #100	; 0x64
 800026e:	496d      	ldr	r1, [pc, #436]	; (8000424 <main+0x1e8>)
 8000270:	486d      	ldr	r0, [pc, #436]	; (8000428 <main+0x1ec>)
 8000272:	f002 f9a8 	bl	80025c6 <HAL_UART_Transmit>

	#define DATE_as_int_str 	(__DATE__)
	#define TIME_as_int_str 	(__TIME__)
	sprintf(DataChar,"\tBuild: %s. Time: %s." , DATE_as_int_str , TIME_as_int_str ) ;
 8000276:	4b6d      	ldr	r3, [pc, #436]	; (800042c <main+0x1f0>)
 8000278:	4a6d      	ldr	r2, [pc, #436]	; (8000430 <main+0x1f4>)
 800027a:	496e      	ldr	r1, [pc, #440]	; (8000434 <main+0x1f8>)
 800027c:	4869      	ldr	r0, [pc, #420]	; (8000424 <main+0x1e8>)
 800027e:	f002 fb73 	bl	8002968 <siprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 8000282:	4868      	ldr	r0, [pc, #416]	; (8000424 <main+0x1e8>)
 8000284:	f7ff ff62 	bl	800014c <strlen>
 8000288:	4603      	mov	r3, r0
 800028a:	b29a      	uxth	r2, r3
 800028c:	2364      	movs	r3, #100	; 0x64
 800028e:	4965      	ldr	r1, [pc, #404]	; (8000424 <main+0x1e8>)
 8000290:	4865      	ldr	r0, [pc, #404]	; (8000428 <main+0x1ec>)
 8000292:	f002 f998 	bl	80025c6 <HAL_UART_Transmit>

	sprintf(DataChar,"\r\n\tfor debug: UART1 115200/8-N-1\r\n" ) ;
 8000296:	4968      	ldr	r1, [pc, #416]	; (8000438 <main+0x1fc>)
 8000298:	4862      	ldr	r0, [pc, #392]	; (8000424 <main+0x1e8>)
 800029a:	f002 fb65 	bl	8002968 <siprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 800029e:	4861      	ldr	r0, [pc, #388]	; (8000424 <main+0x1e8>)
 80002a0:	f7ff ff54 	bl	800014c <strlen>
 80002a4:	4603      	mov	r3, r0
 80002a6:	b29a      	uxth	r2, r3
 80002a8:	2364      	movs	r3, #100	; 0x64
 80002aa:	495e      	ldr	r1, [pc, #376]	; (8000424 <main+0x1e8>)
 80002ac:	485e      	ldr	r0, [pc, #376]	; (8000428 <main+0x1ec>)
 80002ae:	f002 f98a 	bl	80025c6 <HAL_UART_Transmit>

	snprintf(DataChar, BUFFERSIZE + 7 , "1Tx: %s\r\n", aTxBuffer ) ;
 80002b2:	4b62      	ldr	r3, [pc, #392]	; (800043c <main+0x200>)
 80002b4:	4a62      	ldr	r2, [pc, #392]	; (8000440 <main+0x204>)
 80002b6:	210f      	movs	r1, #15
 80002b8:	485a      	ldr	r0, [pc, #360]	; (8000424 <main+0x1e8>)
 80002ba:	f002 fb21 	bl	8002900 <sniprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 80002be:	4859      	ldr	r0, [pc, #356]	; (8000424 <main+0x1e8>)
 80002c0:	f7ff ff44 	bl	800014c <strlen>
 80002c4:	4603      	mov	r3, r0
 80002c6:	b29a      	uxth	r2, r3
 80002c8:	2364      	movs	r3, #100	; 0x64
 80002ca:	4956      	ldr	r1, [pc, #344]	; (8000424 <main+0x1e8>)
 80002cc:	4856      	ldr	r0, [pc, #344]	; (8000428 <main+0x1ec>)
 80002ce:	f002 f97a 	bl	80025c6 <HAL_UART_Transmit>

	snprintf(DataChar, BUFFERSIZE + 7 , "1Rx: %s\r\n", aRxBuffer ) ;
 80002d2:	4b5c      	ldr	r3, [pc, #368]	; (8000444 <main+0x208>)
 80002d4:	4a5c      	ldr	r2, [pc, #368]	; (8000448 <main+0x20c>)
 80002d6:	210f      	movs	r1, #15
 80002d8:	4852      	ldr	r0, [pc, #328]	; (8000424 <main+0x1e8>)
 80002da:	f002 fb11 	bl	8002900 <sniprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 80002de:	4851      	ldr	r0, [pc, #324]	; (8000424 <main+0x1e8>)
 80002e0:	f7ff ff34 	bl	800014c <strlen>
 80002e4:	4603      	mov	r3, r0
 80002e6:	b29a      	uxth	r2, r3
 80002e8:	2364      	movs	r3, #100	; 0x64
 80002ea:	494e      	ldr	r1, [pc, #312]	; (8000424 <main+0x1e8>)
 80002ec:	484e      	ldr	r0, [pc, #312]	; (8000428 <main+0x1ec>)
 80002ee:	f002 f96a 	bl	80025c6 <HAL_UART_Transmit>

/*##-1- Configure the SPI peripheral #######################################*/
	SpiHandle.Instance               = SPI2;
 80002f2:	4b56      	ldr	r3, [pc, #344]	; (800044c <main+0x210>)
 80002f4:	4a56      	ldr	r2, [pc, #344]	; (8000450 <main+0x214>)
 80002f6:	601a      	str	r2, [r3, #0]
	SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80002f8:	4b54      	ldr	r3, [pc, #336]	; (800044c <main+0x210>)
 80002fa:	2238      	movs	r2, #56	; 0x38
 80002fc:	61da      	str	r2, [r3, #28]
	SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 80002fe:	4b53      	ldr	r3, [pc, #332]	; (800044c <main+0x210>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
	SpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8000304:	4b51      	ldr	r3, [pc, #324]	; (800044c <main+0x210>)
 8000306:	2200      	movs	r2, #0
 8000308:	615a      	str	r2, [r3, #20]
	SpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800030a:	4b50      	ldr	r3, [pc, #320]	; (800044c <main+0x210>)
 800030c:	2200      	movs	r2, #0
 800030e:	611a      	str	r2, [r3, #16]
	SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8000310:	4b4e      	ldr	r3, [pc, #312]	; (800044c <main+0x210>)
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]
	SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8000316:	4b4d      	ldr	r3, [pc, #308]	; (800044c <main+0x210>)
 8000318:	2200      	movs	r2, #0
 800031a:	621a      	str	r2, [r3, #32]
	SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLE;
 800031c:	4b4b      	ldr	r3, [pc, #300]	; (800044c <main+0x210>)
 800031e:	2200      	movs	r2, #0
 8000320:	625a      	str	r2, [r3, #36]	; 0x24
	SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8000322:	4b4a      	ldr	r3, [pc, #296]	; (800044c <main+0x210>)
 8000324:	2200      	movs	r2, #0
 8000326:	629a      	str	r2, [r3, #40]	; 0x28
	SpiHandle.Init.CRCPolynomial     = 10;
 8000328:	4b48      	ldr	r3, [pc, #288]	; (800044c <main+0x210>)
 800032a:	220a      	movs	r2, #10
 800032c:	62da      	str	r2, [r3, #44]	; 0x2c
	SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 800032e:	4b47      	ldr	r3, [pc, #284]	; (800044c <main+0x210>)
 8000330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000334:	619a      	str	r2, [r3, #24]
	SpiHandle.Init.Mode 			 = SPI_MODE_SLAVE;
 8000336:	4b45      	ldr	r3, [pc, #276]	; (800044c <main+0x210>)
 8000338:	2200      	movs	r2, #0
 800033a:	605a      	str	r2, [r3, #4]

	sprintf(DataChar,"SLAVE\r\n" ) ;
 800033c:	4945      	ldr	r1, [pc, #276]	; (8000454 <main+0x218>)
 800033e:	4839      	ldr	r0, [pc, #228]	; (8000424 <main+0x1e8>)
 8000340:	f002 fb12 	bl	8002968 <siprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 8000344:	4837      	ldr	r0, [pc, #220]	; (8000424 <main+0x1e8>)
 8000346:	f7ff ff01 	bl	800014c <strlen>
 800034a:	4603      	mov	r3, r0
 800034c:	b29a      	uxth	r2, r3
 800034e:	2364      	movs	r3, #100	; 0x64
 8000350:	4934      	ldr	r1, [pc, #208]	; (8000424 <main+0x1e8>)
 8000352:	4835      	ldr	r0, [pc, #212]	; (8000428 <main+0x1ec>)
 8000354:	f002 f937 	bl	80025c6 <HAL_UART_Transmit>

	if(HAL_SPI_Init(&SpiHandle) != HAL_OK)  {
 8000358:	483c      	ldr	r0, [pc, #240]	; (800044c <main+0x210>)
 800035a:	f001 fd77 	bl	8001e4c <HAL_SPI_Init>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d00e      	beq.n	8000382 <main+0x146>
		sprintf(DataChar,"SPI_Init - FAIL\r\n" ) ;
 8000364:	493c      	ldr	r1, [pc, #240]	; (8000458 <main+0x21c>)
 8000366:	482f      	ldr	r0, [pc, #188]	; (8000424 <main+0x1e8>)
 8000368:	f002 fafe 	bl	8002968 <siprintf>
		HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 800036c:	482d      	ldr	r0, [pc, #180]	; (8000424 <main+0x1e8>)
 800036e:	f7ff feed 	bl	800014c <strlen>
 8000372:	4603      	mov	r3, r0
 8000374:	b29a      	uxth	r2, r3
 8000376:	2364      	movs	r3, #100	; 0x64
 8000378:	492a      	ldr	r1, [pc, #168]	; (8000424 <main+0x1e8>)
 800037a:	482b      	ldr	r0, [pc, #172]	; (8000428 <main+0x1ec>)
 800037c:	f002 f923 	bl	80025c6 <HAL_UART_Transmit>
 8000380:	e00d      	b.n	800039e <main+0x162>
	} else {
		sprintf(DataChar,"SPI_Init - Ok\r\n" ) ;
 8000382:	4936      	ldr	r1, [pc, #216]	; (800045c <main+0x220>)
 8000384:	4827      	ldr	r0, [pc, #156]	; (8000424 <main+0x1e8>)
 8000386:	f002 faef 	bl	8002968 <siprintf>
		HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 800038a:	4826      	ldr	r0, [pc, #152]	; (8000424 <main+0x1e8>)
 800038c:	f7ff fede 	bl	800014c <strlen>
 8000390:	4603      	mov	r3, r0
 8000392:	b29a      	uxth	r2, r3
 8000394:	2364      	movs	r3, #100	; 0x64
 8000396:	4923      	ldr	r1, [pc, #140]	; (8000424 <main+0x1e8>)
 8000398:	4823      	ldr	r0, [pc, #140]	; (8000428 <main+0x1ec>)
 800039a:	f002 f914 	bl	80025c6 <HAL_UART_Transmit>
	}
	/* SPI block is enabled prior calling SPI transmit/receive functions, in order to get CLK signal properly pulled down.
	 Otherwise, SPI CLK signal is not clean on this board and leads to errors during transfer */
	__HAL_SPI_ENABLE(&SpiHandle);
 800039e:	4b2b      	ldr	r3, [pc, #172]	; (800044c <main+0x210>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	4b29      	ldr	r3, [pc, #164]	; (800044c <main+0x210>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80003ac:	601a      	str	r2, [r3, #0]

	sprintf(DataChar,"SPI_TransmitReceive_DMA Start... " ) ;
 80003ae:	492c      	ldr	r1, [pc, #176]	; (8000460 <main+0x224>)
 80003b0:	481c      	ldr	r0, [pc, #112]	; (8000424 <main+0x1e8>)
 80003b2:	f002 fad9 	bl	8002968 <siprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 80003b6:	481b      	ldr	r0, [pc, #108]	; (8000424 <main+0x1e8>)
 80003b8:	f7ff fec8 	bl	800014c <strlen>
 80003bc:	4603      	mov	r3, r0
 80003be:	b29a      	uxth	r2, r3
 80003c0:	2364      	movs	r3, #100	; 0x64
 80003c2:	4918      	ldr	r1, [pc, #96]	; (8000424 <main+0x1e8>)
 80003c4:	4818      	ldr	r0, [pc, #96]	; (8000428 <main+0x1ec>)
 80003c6:	f002 f8fe 	bl	80025c6 <HAL_UART_Transmit>
	if(HAL_SPI_TransmitReceive_DMA(&SpiHandle, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, BUFFERSIZE) != HAL_OK) {
 80003ca:	2308      	movs	r3, #8
 80003cc:	4a1d      	ldr	r2, [pc, #116]	; (8000444 <main+0x208>)
 80003ce:	491b      	ldr	r1, [pc, #108]	; (800043c <main+0x200>)
 80003d0:	481e      	ldr	r0, [pc, #120]	; (800044c <main+0x210>)
 80003d2:	f001 fdbf 	bl	8001f54 <HAL_SPI_TransmitReceive_DMA>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d00e      	beq.n	80003fa <main+0x1be>
//	if(HAL_SPI_TransmitReceive_DMA(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, BUFFERSIZE) != HAL_OK) {
		sprintf(DataChar," - FAIL\r\n" ) ;
 80003dc:	4921      	ldr	r1, [pc, #132]	; (8000464 <main+0x228>)
 80003de:	4811      	ldr	r0, [pc, #68]	; (8000424 <main+0x1e8>)
 80003e0:	f002 fac2 	bl	8002968 <siprintf>
		HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 80003e4:	480f      	ldr	r0, [pc, #60]	; (8000424 <main+0x1e8>)
 80003e6:	f7ff feb1 	bl	800014c <strlen>
 80003ea:	4603      	mov	r3, r0
 80003ec:	b29a      	uxth	r2, r3
 80003ee:	2364      	movs	r3, #100	; 0x64
 80003f0:	490c      	ldr	r1, [pc, #48]	; (8000424 <main+0x1e8>)
 80003f2:	480d      	ldr	r0, [pc, #52]	; (8000428 <main+0x1ec>)
 80003f4:	f002 f8e7 	bl	80025c6 <HAL_UART_Transmit>
 80003f8:	e00d      	b.n	8000416 <main+0x1da>
	} else {
		sprintf(DataChar," - Ok.\r\n" ) ;
 80003fa:	491b      	ldr	r1, [pc, #108]	; (8000468 <main+0x22c>)
 80003fc:	4809      	ldr	r0, [pc, #36]	; (8000424 <main+0x1e8>)
 80003fe:	f002 fab3 	bl	8002968 <siprintf>
		HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 8000402:	4808      	ldr	r0, [pc, #32]	; (8000424 <main+0x1e8>)
 8000404:	f7ff fea2 	bl	800014c <strlen>
 8000408:	4603      	mov	r3, r0
 800040a:	b29a      	uxth	r2, r3
 800040c:	2364      	movs	r3, #100	; 0x64
 800040e:	4905      	ldr	r1, [pc, #20]	; (8000424 <main+0x1e8>)
 8000410:	4805      	ldr	r0, [pc, #20]	; (8000428 <main+0x1ec>)
 8000412:	f002 f8d8 	bl	80025c6 <HAL_UART_Transmit>
	}

	cnt_i = 0;
 8000416:	4b15      	ldr	r3, [pc, #84]	; (800046c <main+0x230>)
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
	while (wTransferState == TRANSFER_WAIT) {
 800041c:	e043      	b.n	80004a6 <main+0x26a>
 800041e:	bf00      	nop
 8000420:	08003274 	.word	0x08003274
 8000424:	200000f4 	.word	0x200000f4
 8000428:	200002e0 	.word	0x200002e0
 800042c:	08003294 	.word	0x08003294
 8000430:	080032a0 	.word	0x080032a0
 8000434:	080032ac 	.word	0x080032ac
 8000438:	080032c4 	.word	0x080032c4
 800043c:	20000000 	.word	0x20000000
 8000440:	080032e8 	.word	0x080032e8
 8000444:	20000008 	.word	0x20000008
 8000448:	080032f4 	.word	0x080032f4
 800044c:	2000009c 	.word	0x2000009c
 8000450:	40003800 	.word	0x40003800
 8000454:	08003300 	.word	0x08003300
 8000458:	08003308 	.word	0x08003308
 800045c:	0800331c 	.word	0x0800331c
 8000460:	0800332c 	.word	0x0800332c
 8000464:	08003350 	.word	0x08003350
 8000468:	0800335c 	.word	0x0800335c
 800046c:	200001f8 	.word	0x200001f8
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000470:	2102      	movs	r1, #2
 8000472:	4856      	ldr	r0, [pc, #344]	; (80005cc <main+0x390>)
 8000474:	f001 f8b6 	bl	80015e4 <HAL_GPIO_TogglePin>
		sprintf(DataChar,"  TRANSFER_WAIT.. %d\r", cnt_i++ ) ;
 8000478:	4b55      	ldr	r3, [pc, #340]	; (80005d0 <main+0x394>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	1c5a      	adds	r2, r3, #1
 800047e:	4954      	ldr	r1, [pc, #336]	; (80005d0 <main+0x394>)
 8000480:	600a      	str	r2, [r1, #0]
 8000482:	461a      	mov	r2, r3
 8000484:	4953      	ldr	r1, [pc, #332]	; (80005d4 <main+0x398>)
 8000486:	4854      	ldr	r0, [pc, #336]	; (80005d8 <main+0x39c>)
 8000488:	f002 fa6e 	bl	8002968 <siprintf>
		HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 800048c:	4852      	ldr	r0, [pc, #328]	; (80005d8 <main+0x39c>)
 800048e:	f7ff fe5d 	bl	800014c <strlen>
 8000492:	4603      	mov	r3, r0
 8000494:	b29a      	uxth	r2, r3
 8000496:	2364      	movs	r3, #100	; 0x64
 8000498:	494f      	ldr	r1, [pc, #316]	; (80005d8 <main+0x39c>)
 800049a:	4850      	ldr	r0, [pc, #320]	; (80005dc <main+0x3a0>)
 800049c:	f002 f893 	bl	80025c6 <HAL_UART_Transmit>
		HAL_Delay(100);
 80004a0:	2064      	movs	r0, #100	; 0x64
 80004a2:	f000 fbe3 	bl	8000c6c <HAL_Delay>
	while (wTransferState == TRANSFER_WAIT) {
 80004a6:	4b4e      	ldr	r3, [pc, #312]	; (80005e0 <main+0x3a4>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d0e0      	beq.n	8000470 <main+0x234>
	}

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 80004ae:	2201      	movs	r2, #1
 80004b0:	2102      	movs	r1, #2
 80004b2:	4846      	ldr	r0, [pc, #280]	; (80005cc <main+0x390>)
 80004b4:	f001 f87e 	bl	80015b4 <HAL_GPIO_WritePin>
	sprintf(DataChar,"\r\nTRANSFER_COMPLETED\r\n" ) ;
 80004b8:	494a      	ldr	r1, [pc, #296]	; (80005e4 <main+0x3a8>)
 80004ba:	4847      	ldr	r0, [pc, #284]	; (80005d8 <main+0x39c>)
 80004bc:	f002 fa54 	bl	8002968 <siprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 80004c0:	4845      	ldr	r0, [pc, #276]	; (80005d8 <main+0x39c>)
 80004c2:	f7ff fe43 	bl	800014c <strlen>
 80004c6:	4603      	mov	r3, r0
 80004c8:	b29a      	uxth	r2, r3
 80004ca:	2364      	movs	r3, #100	; 0x64
 80004cc:	4942      	ldr	r1, [pc, #264]	; (80005d8 <main+0x39c>)
 80004ce:	4843      	ldr	r0, [pc, #268]	; (80005dc <main+0x3a0>)
 80004d0:	f002 f879 	bl	80025c6 <HAL_UART_Transmit>

	snprintf(DataChar, BUFFERSIZE + 7 , "2Tx: %s\r\n", aTxBuffer ) ;
 80004d4:	4b44      	ldr	r3, [pc, #272]	; (80005e8 <main+0x3ac>)
 80004d6:	4a45      	ldr	r2, [pc, #276]	; (80005ec <main+0x3b0>)
 80004d8:	210f      	movs	r1, #15
 80004da:	483f      	ldr	r0, [pc, #252]	; (80005d8 <main+0x39c>)
 80004dc:	f002 fa10 	bl	8002900 <sniprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 80004e0:	483d      	ldr	r0, [pc, #244]	; (80005d8 <main+0x39c>)
 80004e2:	f7ff fe33 	bl	800014c <strlen>
 80004e6:	4603      	mov	r3, r0
 80004e8:	b29a      	uxth	r2, r3
 80004ea:	2364      	movs	r3, #100	; 0x64
 80004ec:	493a      	ldr	r1, [pc, #232]	; (80005d8 <main+0x39c>)
 80004ee:	483b      	ldr	r0, [pc, #236]	; (80005dc <main+0x3a0>)
 80004f0:	f002 f869 	bl	80025c6 <HAL_UART_Transmit>

	sprintf(DataChar,"2Rx: " ) ;
 80004f4:	493e      	ldr	r1, [pc, #248]	; (80005f0 <main+0x3b4>)
 80004f6:	4838      	ldr	r0, [pc, #224]	; (80005d8 <main+0x39c>)
 80004f8:	f002 fa36 	bl	8002968 <siprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 80004fc:	4836      	ldr	r0, [pc, #216]	; (80005d8 <main+0x39c>)
 80004fe:	f7ff fe25 	bl	800014c <strlen>
 8000502:	4603      	mov	r3, r0
 8000504:	b29a      	uxth	r2, r3
 8000506:	2364      	movs	r3, #100	; 0x64
 8000508:	4933      	ldr	r1, [pc, #204]	; (80005d8 <main+0x39c>)
 800050a:	4834      	ldr	r0, [pc, #208]	; (80005dc <main+0x3a0>)
 800050c:	f002 f85b 	bl	80025c6 <HAL_UART_Transmit>
	snprintf(DataChar, BUFFERSIZE + 1 , "%s", aRxBuffer ) ;
 8000510:	4b38      	ldr	r3, [pc, #224]	; (80005f4 <main+0x3b8>)
 8000512:	4a39      	ldr	r2, [pc, #228]	; (80005f8 <main+0x3bc>)
 8000514:	2109      	movs	r1, #9
 8000516:	4830      	ldr	r0, [pc, #192]	; (80005d8 <main+0x39c>)
 8000518:	f002 f9f2 	bl	8002900 <sniprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 800051c:	482e      	ldr	r0, [pc, #184]	; (80005d8 <main+0x39c>)
 800051e:	f7ff fe15 	bl	800014c <strlen>
 8000522:	4603      	mov	r3, r0
 8000524:	b29a      	uxth	r2, r3
 8000526:	2364      	movs	r3, #100	; 0x64
 8000528:	492b      	ldr	r1, [pc, #172]	; (80005d8 <main+0x39c>)
 800052a:	482c      	ldr	r0, [pc, #176]	; (80005dc <main+0x3a0>)
 800052c:	f002 f84b 	bl	80025c6 <HAL_UART_Transmit>
	sprintf(DataChar,"\r\n" ) ;
 8000530:	4932      	ldr	r1, [pc, #200]	; (80005fc <main+0x3c0>)
 8000532:	4829      	ldr	r0, [pc, #164]	; (80005d8 <main+0x39c>)
 8000534:	f002 fa18 	bl	8002968 <siprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 8000538:	4827      	ldr	r0, [pc, #156]	; (80005d8 <main+0x39c>)
 800053a:	f7ff fe07 	bl	800014c <strlen>
 800053e:	4603      	mov	r3, r0
 8000540:	b29a      	uxth	r2, r3
 8000542:	2364      	movs	r3, #100	; 0x64
 8000544:	4924      	ldr	r1, [pc, #144]	; (80005d8 <main+0x39c>)
 8000546:	4825      	ldr	r0, [pc, #148]	; (80005dc <main+0x3a0>)
 8000548:	f002 f83d 	bl	80025c6 <HAL_UART_Transmit>

	uint16_t buffer_cmp_res = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	80fb      	strh	r3, [r7, #6]

	switch(wTransferState) {
 8000550:	4b23      	ldr	r3, [pc, #140]	; (80005e0 <main+0x3a4>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d137      	bne.n	80005c8 <main+0x38c>
		case TRANSFER_COMPLETE :
			buffer_cmp_res = BufferCmp((uint8_t*)aTxBuffer, (uint8_t*)aRxBuffer, BUFFERSIZE);
 8000558:	2208      	movs	r2, #8
 800055a:	4926      	ldr	r1, [pc, #152]	; (80005f4 <main+0x3b8>)
 800055c:	4822      	ldr	r0, [pc, #136]	; (80005e8 <main+0x3ac>)
 800055e:	f000 f8e5 	bl	800072c <BufferCmp>
 8000562:	4603      	mov	r3, r0
 8000564:	80fb      	strh	r3, [r7, #6]
			sprintf(DataChar,"buffer_cmp_res= %d\r\n", buffer_cmp_res ) ;
 8000566:	88fb      	ldrh	r3, [r7, #6]
 8000568:	461a      	mov	r2, r3
 800056a:	4925      	ldr	r1, [pc, #148]	; (8000600 <main+0x3c4>)
 800056c:	481a      	ldr	r0, [pc, #104]	; (80005d8 <main+0x39c>)
 800056e:	f002 f9fb 	bl	8002968 <siprintf>
			HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 8000572:	4819      	ldr	r0, [pc, #100]	; (80005d8 <main+0x39c>)
 8000574:	f7ff fdea 	bl	800014c <strlen>
 8000578:	4603      	mov	r3, r0
 800057a:	b29a      	uxth	r2, r3
 800057c:	2364      	movs	r3, #100	; 0x64
 800057e:	4916      	ldr	r1, [pc, #88]	; (80005d8 <main+0x39c>)
 8000580:	4816      	ldr	r0, [pc, #88]	; (80005dc <main+0x3a0>)
 8000582:	f002 f820 	bl	80025c6 <HAL_UART_Transmit>

		  if(buffer_cmp_res)  {
 8000586:	88fb      	ldrh	r3, [r7, #6]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d00e      	beq.n	80005aa <main+0x36e>
				sprintf(DataChar,"Buffer cmp - Wrong.\r\n") ;
 800058c:	491d      	ldr	r1, [pc, #116]	; (8000604 <main+0x3c8>)
 800058e:	4812      	ldr	r0, [pc, #72]	; (80005d8 <main+0x39c>)
 8000590:	f002 f9ea 	bl	8002968 <siprintf>
				HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 8000594:	4810      	ldr	r0, [pc, #64]	; (80005d8 <main+0x39c>)
 8000596:	f7ff fdd9 	bl	800014c <strlen>
 800059a:	4603      	mov	r3, r0
 800059c:	b29a      	uxth	r2, r3
 800059e:	2364      	movs	r3, #100	; 0x64
 80005a0:	490d      	ldr	r1, [pc, #52]	; (80005d8 <main+0x39c>)
 80005a2:	480e      	ldr	r0, [pc, #56]	; (80005dc <main+0x3a0>)
 80005a4:	f002 f80f 	bl	80025c6 <HAL_UART_Transmit>
		  } else {
				sprintf(DataChar,"Buffer cmp - Successfully.\r\n") ;
				HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
		  }
		break;
 80005a8:	e00f      	b.n	80005ca <main+0x38e>
				sprintf(DataChar,"Buffer cmp - Successfully.\r\n") ;
 80005aa:	4917      	ldr	r1, [pc, #92]	; (8000608 <main+0x3cc>)
 80005ac:	480a      	ldr	r0, [pc, #40]	; (80005d8 <main+0x39c>)
 80005ae:	f002 f9db 	bl	8002968 <siprintf>
				HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 80005b2:	4809      	ldr	r0, [pc, #36]	; (80005d8 <main+0x39c>)
 80005b4:	f7ff fdca 	bl	800014c <strlen>
 80005b8:	4603      	mov	r3, r0
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	2364      	movs	r3, #100	; 0x64
 80005be:	4906      	ldr	r1, [pc, #24]	; (80005d8 <main+0x39c>)
 80005c0:	4806      	ldr	r0, [pc, #24]	; (80005dc <main+0x3a0>)
 80005c2:	f002 f800 	bl	80025c6 <HAL_UART_Transmit>
		break;
 80005c6:	e000      	b.n	80005ca <main+0x38e>
		default: {} break;
 80005c8:	bf00      	nop

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ca:	e7fe      	b.n	80005ca <main+0x38e>
 80005cc:	40010800 	.word	0x40010800
 80005d0:	200001f8 	.word	0x200001f8
 80005d4:	08003368 	.word	0x08003368
 80005d8:	200000f4 	.word	0x200000f4
 80005dc:	200002e0 	.word	0x200002e0
 80005e0:	200001f4 	.word	0x200001f4
 80005e4:	08003380 	.word	0x08003380
 80005e8:	20000000 	.word	0x20000000
 80005ec:	08003398 	.word	0x08003398
 80005f0:	080033a4 	.word	0x080033a4
 80005f4:	20000008 	.word	0x20000008
 80005f8:	080033ac 	.word	0x080033ac
 80005fc:	080033b0 	.word	0x080033b0
 8000600:	080033b4 	.word	0x080033b4
 8000604:	080033cc 	.word	0x080033cc
 8000608:	080033e4 	.word	0x080033e4

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b090      	sub	sp, #64	; 0x40
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0318 	add.w	r3, r7, #24
 8000616:	2228      	movs	r2, #40	; 0x28
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 f968 	bl	80028f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062e:	2301      	movs	r3, #1
 8000630:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000632:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000636:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000640:	2302      	movs	r3, #2
 8000642:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000648:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800064a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0318 	add.w	r3, r7, #24
 8000654:	4618      	mov	r0, r3
 8000656:	f000 ffdf 	bl	8001618 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000660:	f000 f885 	bl	800076e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	2302      	movs	r3, #2
 800066a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000670:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000674:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2102      	movs	r1, #2
 800067e:	4618      	mov	r0, r3
 8000680:	f001 fa4c 	bl	8001b1c <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800068a:	f000 f870 	bl	800076e <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3740      	adds	r7, #64	; 0x40
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2102      	movs	r1, #2
 80006a4:	480b      	ldr	r0, [pc, #44]	; (80006d4 <HAL_SPI_TxRxCpltCallback+0x3c>)
 80006a6:	f000 ff85 	bl	80015b4 <HAL_GPIO_WritePin>
	sprintf(DataChar,"Cplt-TRANSFER_COMPLETE\r\n" ) ;
 80006aa:	490b      	ldr	r1, [pc, #44]	; (80006d8 <HAL_SPI_TxRxCpltCallback+0x40>)
 80006ac:	480b      	ldr	r0, [pc, #44]	; (80006dc <HAL_SPI_TxRxCpltCallback+0x44>)
 80006ae:	f002 f95b 	bl	8002968 <siprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 80006b2:	480a      	ldr	r0, [pc, #40]	; (80006dc <HAL_SPI_TxRxCpltCallback+0x44>)
 80006b4:	f7ff fd4a 	bl	800014c <strlen>
 80006b8:	4603      	mov	r3, r0
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	2364      	movs	r3, #100	; 0x64
 80006be:	4907      	ldr	r1, [pc, #28]	; (80006dc <HAL_SPI_TxRxCpltCallback+0x44>)
 80006c0:	4807      	ldr	r0, [pc, #28]	; (80006e0 <HAL_SPI_TxRxCpltCallback+0x48>)
 80006c2:	f001 ff80 	bl	80025c6 <HAL_UART_Transmit>
	wTransferState = TRANSFER_COMPLETE;
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <HAL_SPI_TxRxCpltCallback+0x4c>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	601a      	str	r2, [r3, #0]
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40010800 	.word	0x40010800
 80006d8:	08003404 	.word	0x08003404
 80006dc:	200000f4 	.word	0x200000f4
 80006e0:	200002e0 	.word	0x200002e0
 80006e4:	200001f4 	.word	0x200001f4

080006e8 <HAL_SPI_ErrorCallback>:
//-------------------------------------------------------

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	sprintf(DataChar,"!!!-TRANSFER_ERROR-!!!\r\n" ) ;
 80006f0:	490a      	ldr	r1, [pc, #40]	; (800071c <HAL_SPI_ErrorCallback+0x34>)
 80006f2:	480b      	ldr	r0, [pc, #44]	; (8000720 <HAL_SPI_ErrorCallback+0x38>)
 80006f4:	f002 f938 	bl	8002968 <siprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 80006f8:	4809      	ldr	r0, [pc, #36]	; (8000720 <HAL_SPI_ErrorCallback+0x38>)
 80006fa:	f7ff fd27 	bl	800014c <strlen>
 80006fe:	4603      	mov	r3, r0
 8000700:	b29a      	uxth	r2, r3
 8000702:	2364      	movs	r3, #100	; 0x64
 8000704:	4906      	ldr	r1, [pc, #24]	; (8000720 <HAL_SPI_ErrorCallback+0x38>)
 8000706:	4807      	ldr	r0, [pc, #28]	; (8000724 <HAL_SPI_ErrorCallback+0x3c>)
 8000708:	f001 ff5d 	bl	80025c6 <HAL_UART_Transmit>
	wTransferState = TRANSFER_ERROR;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_SPI_ErrorCallback+0x40>)
 800070e:	2202      	movs	r2, #2
 8000710:	601a      	str	r2, [r3, #0]
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	08003420 	.word	0x08003420
 8000720:	200000f4 	.word	0x200000f4
 8000724:	200002e0 	.word	0x200002e0
 8000728:	200001f4 	.word	0x200001f4

0800072c <BufferCmp>:
//-------------------------------------------------------

uint16_t BufferCmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength) {
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	4613      	mov	r3, r2
 8000738:	80fb      	strh	r3, [r7, #6]
	while (BufferLength--) {
 800073a:	e00d      	b.n	8000758 <BufferCmp+0x2c>
		if((*pBuffer1) != *pBuffer2) {
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	781a      	ldrb	r2, [r3, #0]
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	429a      	cmp	r2, r3
 8000746:	d001      	beq.n	800074c <BufferCmp+0x20>
			return BufferLength;
 8000748:	88fb      	ldrh	r3, [r7, #6]
 800074a:	e00b      	b.n	8000764 <BufferCmp+0x38>
		}
			pBuffer1++;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	3301      	adds	r3, #1
 8000750:	60fb      	str	r3, [r7, #12]
			pBuffer2++;
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	3301      	adds	r3, #1
 8000756:	60bb      	str	r3, [r7, #8]
	while (BufferLength--) {
 8000758:	88fb      	ldrh	r3, [r7, #6]
 800075a:	1e5a      	subs	r2, r3, #1
 800075c:	80fa      	strh	r2, [r7, #6]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d1ec      	bne.n	800073c <BufferCmp+0x10>
	}
	return 0;
 8000762:	2300      	movs	r3, #0
}
 8000764:	4618      	mov	r0, r3
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr

0800076e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000772:	b672      	cpsid	i
}
 8000774:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000776:	e7fe      	b.n	8000776 <Error_Handler+0x8>

08000778 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_SPI2_Init+0x5c>)
 800077e:	4a16      	ldr	r2, [pc, #88]	; (80007d8 <MX_SPI2_Init+0x60>)
 8000780:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_SPI2_Init+0x5c>)
 8000784:	2200      	movs	r2, #0
 8000786:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_SPI2_Init+0x5c>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_SPI2_Init+0x5c>)
 8000790:	2200      	movs	r2, #0
 8000792:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_SPI2_Init+0x5c>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_SPI2_Init+0x5c>)
 800079c:	2200      	movs	r2, #0
 800079e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_SPI2_Init+0x5c>)
 80007a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a6:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <MX_SPI2_Init+0x5c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_SPI2_Init+0x5c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <MX_SPI2_Init+0x5c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_SPI2_Init+0x5c>)
 80007bc:	220a      	movs	r2, #10
 80007be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_SPI2_Init+0x5c>)
 80007c2:	f001 fb43 	bl	8001e4c <HAL_SPI_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 80007cc:	f7ff ffcf 	bl	800076e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200001fc 	.word	0x200001fc
 80007d8:	40003800 	.word	0x40003800

080007dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a42      	ldr	r2, [pc, #264]	; (8000900 <HAL_SPI_MspInit+0x124>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d17d      	bne.n	80008f8 <HAL_SPI_MspInit+0x11c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80007fc:	4b41      	ldr	r3, [pc, #260]	; (8000904 <HAL_SPI_MspInit+0x128>)
 80007fe:	69db      	ldr	r3, [r3, #28]
 8000800:	4a40      	ldr	r2, [pc, #256]	; (8000904 <HAL_SPI_MspInit+0x128>)
 8000802:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000806:	61d3      	str	r3, [r2, #28]
 8000808:	4b3e      	ldr	r3, [pc, #248]	; (8000904 <HAL_SPI_MspInit+0x128>)
 800080a:	69db      	ldr	r3, [r3, #28]
 800080c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000814:	4b3b      	ldr	r3, [pc, #236]	; (8000904 <HAL_SPI_MspInit+0x128>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a3a      	ldr	r2, [pc, #232]	; (8000904 <HAL_SPI_MspInit+0x128>)
 800081a:	f043 0308 	orr.w	r3, r3, #8
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b38      	ldr	r3, [pc, #224]	; (8000904 <HAL_SPI_MspInit+0x128>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f003 0308 	and.w	r3, r3, #8
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800082c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000830:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	4619      	mov	r1, r3
 8000840:	4831      	ldr	r0, [pc, #196]	; (8000908 <HAL_SPI_MspInit+0x12c>)
 8000842:	f000 fd33 	bl	80012ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000846:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800084a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	2302      	movs	r3, #2
 800084e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000850:	2303      	movs	r3, #3
 8000852:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	4619      	mov	r1, r3
 800085a:	482b      	ldr	r0, [pc, #172]	; (8000908 <HAL_SPI_MspInit+0x12c>)
 800085c:	f000 fd26 	bl	80012ac <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8000860:	4b2a      	ldr	r3, [pc, #168]	; (800090c <HAL_SPI_MspInit+0x130>)
 8000862:	4a2b      	ldr	r2, [pc, #172]	; (8000910 <HAL_SPI_MspInit+0x134>)
 8000864:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000866:	4b29      	ldr	r3, [pc, #164]	; (800090c <HAL_SPI_MspInit+0x130>)
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800086c:	4b27      	ldr	r3, [pc, #156]	; (800090c <HAL_SPI_MspInit+0x130>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000872:	4b26      	ldr	r3, [pc, #152]	; (800090c <HAL_SPI_MspInit+0x130>)
 8000874:	2280      	movs	r2, #128	; 0x80
 8000876:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000878:	4b24      	ldr	r3, [pc, #144]	; (800090c <HAL_SPI_MspInit+0x130>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800087e:	4b23      	ldr	r3, [pc, #140]	; (800090c <HAL_SPI_MspInit+0x130>)
 8000880:	2200      	movs	r2, #0
 8000882:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000884:	4b21      	ldr	r3, [pc, #132]	; (800090c <HAL_SPI_MspInit+0x130>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800088a:	4b20      	ldr	r3, [pc, #128]	; (800090c <HAL_SPI_MspInit+0x130>)
 800088c:	2200      	movs	r2, #0
 800088e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000890:	481e      	ldr	r0, [pc, #120]	; (800090c <HAL_SPI_MspInit+0x130>)
 8000892:	f000 fb1d 	bl	8000ed0 <HAL_DMA_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 800089c:	f7ff ff67 	bl	800076e <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a1a      	ldr	r2, [pc, #104]	; (800090c <HAL_SPI_MspInit+0x130>)
 80008a4:	64da      	str	r2, [r3, #76]	; 0x4c
 80008a6:	4a19      	ldr	r2, [pc, #100]	; (800090c <HAL_SPI_MspInit+0x130>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80008ac:	4b19      	ldr	r3, [pc, #100]	; (8000914 <HAL_SPI_MspInit+0x138>)
 80008ae:	4a1a      	ldr	r2, [pc, #104]	; (8000918 <HAL_SPI_MspInit+0x13c>)
 80008b0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <HAL_SPI_MspInit+0x138>)
 80008b4:	2210      	movs	r2, #16
 80008b6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <HAL_SPI_MspInit+0x138>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <HAL_SPI_MspInit+0x138>)
 80008c0:	2280      	movs	r2, #128	; 0x80
 80008c2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008c4:	4b13      	ldr	r3, [pc, #76]	; (8000914 <HAL_SPI_MspInit+0x138>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008ca:	4b12      	ldr	r3, [pc, #72]	; (8000914 <HAL_SPI_MspInit+0x138>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80008d0:	4b10      	ldr	r3, [pc, #64]	; (8000914 <HAL_SPI_MspInit+0x138>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <HAL_SPI_MspInit+0x138>)
 80008d8:	2200      	movs	r2, #0
 80008da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80008dc:	480d      	ldr	r0, [pc, #52]	; (8000914 <HAL_SPI_MspInit+0x138>)
 80008de:	f000 faf7 	bl	8000ed0 <HAL_DMA_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 80008e8:	f7ff ff41 	bl	800076e <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4a09      	ldr	r2, [pc, #36]	; (8000914 <HAL_SPI_MspInit+0x138>)
 80008f0:	649a      	str	r2, [r3, #72]	; 0x48
 80008f2:	4a08      	ldr	r2, [pc, #32]	; (8000914 <HAL_SPI_MspInit+0x138>)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80008f8:	bf00      	nop
 80008fa:	3720      	adds	r7, #32
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40003800 	.word	0x40003800
 8000904:	40021000 	.word	0x40021000
 8000908:	40010c00 	.word	0x40010c00
 800090c:	20000254 	.word	0x20000254
 8000910:	40020044 	.word	0x40020044
 8000914:	20000298 	.word	0x20000298
 8000918:	40020058 	.word	0x40020058

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <HAL_MspInit+0x5c>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	4a14      	ldr	r2, [pc, #80]	; (8000978 <HAL_MspInit+0x5c>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6193      	str	r3, [r2, #24]
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_MspInit+0x5c>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <HAL_MspInit+0x5c>)
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <HAL_MspInit+0x5c>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000944:	61d3      	str	r3, [r2, #28]
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <HAL_MspInit+0x5c>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <HAL_MspInit+0x60>)
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <HAL_MspInit+0x60>)
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	3714      	adds	r7, #20
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	40021000 	.word	0x40021000
 800097c:	40010000 	.word	0x40010000

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <NMI_Handler+0x4>

08000986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <MemManage_Handler+0x4>

08000992 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <UsageFault_Handler+0x4>

0800099e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr

080009aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr

080009b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr

080009c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c6:	f000 f935 	bl	8000c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <DMA1_Channel4_IRQHandler+0x10>)
 80009d6:	f000 fb35 	bl	8001044 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000254 	.word	0x20000254

080009e4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <DMA1_Channel5_IRQHandler+0x10>)
 80009ea:	f000 fb2b 	bl	8001044 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000298 	.word	0x20000298

080009f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a00:	4a14      	ldr	r2, [pc, #80]	; (8000a54 <_sbrk+0x5c>)
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <_sbrk+0x60>)
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d102      	bne.n	8000a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <_sbrk+0x64>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <_sbrk+0x68>)
 8000a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d207      	bcs.n	8000a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a28:	f001 ff38 	bl	800289c <__errno>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	220c      	movs	r2, #12
 8000a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
 8000a36:	e009      	b.n	8000a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <_sbrk+0x64>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <_sbrk+0x64>)
 8000a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20005000 	.word	0x20005000
 8000a58:	00000400 	.word	0x00000400
 8000a5c:	200002dc 	.word	0x200002dc
 8000a60:	20000338 	.word	0x20000338

08000a64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr

08000a70 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <MX_USART1_UART_Init+0x4c>)
 8000a76:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <MX_USART1_UART_Init+0x50>)
 8000a78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <MX_USART1_UART_Init+0x4c>)
 8000a7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <MX_USART1_UART_Init+0x4c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_USART1_UART_Init+0x4c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <MX_USART1_UART_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_USART1_UART_Init+0x4c>)
 8000a96:	220c      	movs	r2, #12
 8000a98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <MX_USART1_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <MX_USART1_UART_Init+0x4c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <MX_USART1_UART_Init+0x4c>)
 8000aa8:	f001 fd40 	bl	800252c <HAL_UART_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ab2:	f7ff fe5c 	bl	800076e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200002e0 	.word	0x200002e0
 8000ac0:	40013800 	.word	0x40013800

08000ac4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a1c      	ldr	r2, [pc, #112]	; (8000b50 <HAL_UART_MspInit+0x8c>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d131      	bne.n	8000b48 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <HAL_UART_MspInit+0x90>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a1a      	ldr	r2, [pc, #104]	; (8000b54 <HAL_UART_MspInit+0x90>)
 8000aea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <HAL_UART_MspInit+0x90>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <HAL_UART_MspInit+0x90>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a14      	ldr	r2, [pc, #80]	; (8000b54 <HAL_UART_MspInit+0x90>)
 8000b02:	f043 0304 	orr.w	r3, r3, #4
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_UART_MspInit+0x90>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0304 	and.w	r3, r3, #4
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	f107 0310 	add.w	r3, r7, #16
 8000b26:	4619      	mov	r1, r3
 8000b28:	480b      	ldr	r0, [pc, #44]	; (8000b58 <HAL_UART_MspInit+0x94>)
 8000b2a:	f000 fbbf 	bl	80012ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	4619      	mov	r1, r3
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <HAL_UART_MspInit+0x94>)
 8000b44:	f000 fbb2 	bl	80012ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b48:	bf00      	nop
 8000b4a:	3720      	adds	r7, #32
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40013800 	.word	0x40013800
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40010800 	.word	0x40010800

08000b5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b5c:	480c      	ldr	r0, [pc, #48]	; (8000b90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b5e:	490d      	ldr	r1, [pc, #52]	; (8000b94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b60:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b64:	e002      	b.n	8000b6c <LoopCopyDataInit>

08000b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6a:	3304      	adds	r3, #4

08000b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b70:	d3f9      	bcc.n	8000b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b72:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b74:	4c0a      	ldr	r4, [pc, #40]	; (8000ba0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b78:	e001      	b.n	8000b7e <LoopFillZerobss>

08000b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b7c:	3204      	adds	r2, #4

08000b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b80:	d3fb      	bcc.n	8000b7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b82:	f7ff ff6f 	bl	8000a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b86:	f001 fe8f 	bl	80028a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b8a:	f7ff fb57 	bl	800023c <main>
  bx lr
 8000b8e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b94:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000b98:	080034a0 	.word	0x080034a0
  ldr r2, =_sbss
 8000b9c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000ba0:	20000338 	.word	0x20000338

08000ba4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC1_2_IRQHandler>
	...

08000ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_Init+0x28>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_Init+0x28>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 f947 	bl	8000e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bbe:	200f      	movs	r0, #15
 8000bc0:	f000 f808 	bl	8000bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc4:	f7ff feaa 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40022000 	.word	0x40022000

08000bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_InitTick+0x54>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <HAL_InitTick+0x58>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f95f 	bl	8000eb6 <HAL_SYSTICK_Config>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00e      	b.n	8000c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d80a      	bhi.n	8000c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	f000 f927 	bl	8000e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c14:	4a06      	ldr	r2, [pc, #24]	; (8000c30 <HAL_InitTick+0x5c>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e000      	b.n	8000c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000010 	.word	0x20000010
 8000c2c:	20000018 	.word	0x20000018
 8000c30:	20000014 	.word	0x20000014

08000c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <HAL_IncTick+0x1c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_IncTick+0x20>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a03      	ldr	r2, [pc, #12]	; (8000c54 <HAL_IncTick+0x20>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	20000018 	.word	0x20000018
 8000c54:	20000324 	.word	0x20000324

08000c58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b02      	ldr	r3, [pc, #8]	; (8000c68 <HAL_GetTick+0x10>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	20000324 	.word	0x20000324

08000c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c74:	f7ff fff0 	bl	8000c58 <HAL_GetTick>
 8000c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c84:	d005      	beq.n	8000c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_Delay+0x44>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4413      	add	r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c92:	bf00      	nop
 8000c94:	f7ff ffe0 	bl	8000c58 <HAL_GetTick>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d8f7      	bhi.n	8000c94 <HAL_Delay+0x28>
  {
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000018 	.word	0x20000018

08000cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce6:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	60d3      	str	r3, [r2, #12]
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <__NVIC_GetPriorityGrouping+0x18>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	f003 0307 	and.w	r3, r3, #7
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db0b      	blt.n	8000d42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	f003 021f 	and.w	r2, r3, #31
 8000d30:	4906      	ldr	r1, [pc, #24]	; (8000d4c <__NVIC_EnableIRQ+0x34>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	095b      	lsrs	r3, r3, #5
 8000d38:	2001      	movs	r0, #1
 8000d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100

08000d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	db0a      	blt.n	8000d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	490c      	ldr	r1, [pc, #48]	; (8000d9c <__NVIC_SetPriority+0x4c>)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	0112      	lsls	r2, r2, #4
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	440b      	add	r3, r1
 8000d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d78:	e00a      	b.n	8000d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4908      	ldr	r1, [pc, #32]	; (8000da0 <__NVIC_SetPriority+0x50>)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	f003 030f 	and.w	r3, r3, #15
 8000d86:	3b04      	subs	r3, #4
 8000d88:	0112      	lsls	r2, r2, #4
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	761a      	strb	r2, [r3, #24]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000e100 	.word	0xe000e100
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b089      	sub	sp, #36	; 0x24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f1c3 0307 	rsb	r3, r3, #7
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	bf28      	it	cs
 8000dc2:	2304      	movcs	r3, #4
 8000dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3304      	adds	r3, #4
 8000dca:	2b06      	cmp	r3, #6
 8000dcc:	d902      	bls.n	8000dd4 <NVIC_EncodePriority+0x30>
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3b03      	subs	r3, #3
 8000dd2:	e000      	b.n	8000dd6 <NVIC_EncodePriority+0x32>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43da      	mvns	r2, r3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	401a      	ands	r2, r3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dec:	f04f 31ff 	mov.w	r1, #4294967295
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	fa01 f303 	lsl.w	r3, r1, r3
 8000df6:	43d9      	mvns	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	4313      	orrs	r3, r2
         );
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3724      	adds	r7, #36	; 0x24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e18:	d301      	bcc.n	8000e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00f      	b.n	8000e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <SysTick_Config+0x40>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e26:	210f      	movs	r1, #15
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	f7ff ff90 	bl	8000d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <SysTick_Config+0x40>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e36:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <SysTick_Config+0x40>)
 8000e38:	2207      	movs	r2, #7
 8000e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	e000e010 	.word	0xe000e010

08000e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff ff2d 	bl	8000cb4 <__NVIC_SetPriorityGrouping>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b086      	sub	sp, #24
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	607a      	str	r2, [r7, #4]
 8000e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e74:	f7ff ff42 	bl	8000cfc <__NVIC_GetPriorityGrouping>
 8000e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	68b9      	ldr	r1, [r7, #8]
 8000e7e:	6978      	ldr	r0, [r7, #20]
 8000e80:	f7ff ff90 	bl	8000da4 <NVIC_EncodePriority>
 8000e84:	4602      	mov	r2, r0
 8000e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff5f 	bl	8000d50 <__NVIC_SetPriority>
}
 8000e92:	bf00      	nop
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff35 	bl	8000d18 <__NVIC_EnableIRQ>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ffa2 	bl	8000e08 <SysTick_Config>
 8000ec4:	4603      	mov	r3, r0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d101      	bne.n	8000ee6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e043      	b.n	8000f6e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <HAL_DMA_Init+0xa8>)
 8000eee:	4413      	add	r3, r2
 8000ef0:	4a22      	ldr	r2, [pc, #136]	; (8000f7c <HAL_DMA_Init+0xac>)
 8000ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef6:	091b      	lsrs	r3, r3, #4
 8000ef8:	009a      	lsls	r2, r3, #2
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a1f      	ldr	r2, [pc, #124]	; (8000f80 <HAL_DMA_Init+0xb0>)
 8000f02:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2202      	movs	r2, #2
 8000f08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000f1a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	bffdfff8 	.word	0xbffdfff8
 8000f7c:	cccccccd 	.word	0xcccccccd
 8000f80:	40020000 	.word	0x40020000

08000f84 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
 8000f90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d101      	bne.n	8000fa4 <HAL_DMA_Start_IT+0x20>
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	e04a      	b.n	800103a <HAL_DMA_Start_IT+0xb6>
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d13a      	bne.n	800102c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2202      	movs	r2, #2
 8000fba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 0201 	bic.w	r2, r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	68b9      	ldr	r1, [r7, #8]
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f000 f938 	bl	8001250 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d008      	beq.n	8000ffa <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f042 020e 	orr.w	r2, r2, #14
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	e00f      	b.n	800101a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f022 0204 	bic.w	r2, r2, #4
 8001008:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f042 020a 	orr.w	r2, r2, #10
 8001018:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f042 0201 	orr.w	r2, r2, #1
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	e005      	b.n	8001038 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001034:	2302      	movs	r3, #2
 8001036:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001038:	7dfb      	ldrb	r3, [r7, #23]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	2204      	movs	r2, #4
 8001062:	409a      	lsls	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4013      	ands	r3, r2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d04f      	beq.n	800110c <HAL_DMA_IRQHandler+0xc8>
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	f003 0304 	and.w	r3, r3, #4
 8001072:	2b00      	cmp	r3, #0
 8001074:	d04a      	beq.n	800110c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0320 	and.w	r3, r3, #32
 8001080:	2b00      	cmp	r3, #0
 8001082:	d107      	bne.n	8001094 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 0204 	bic.w	r2, r2, #4
 8001092:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a66      	ldr	r2, [pc, #408]	; (8001234 <HAL_DMA_IRQHandler+0x1f0>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d029      	beq.n	80010f2 <HAL_DMA_IRQHandler+0xae>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a65      	ldr	r2, [pc, #404]	; (8001238 <HAL_DMA_IRQHandler+0x1f4>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d022      	beq.n	80010ee <HAL_DMA_IRQHandler+0xaa>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a63      	ldr	r2, [pc, #396]	; (800123c <HAL_DMA_IRQHandler+0x1f8>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d01a      	beq.n	80010e8 <HAL_DMA_IRQHandler+0xa4>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a62      	ldr	r2, [pc, #392]	; (8001240 <HAL_DMA_IRQHandler+0x1fc>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d012      	beq.n	80010e2 <HAL_DMA_IRQHandler+0x9e>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a60      	ldr	r2, [pc, #384]	; (8001244 <HAL_DMA_IRQHandler+0x200>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d00a      	beq.n	80010dc <HAL_DMA_IRQHandler+0x98>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a5f      	ldr	r2, [pc, #380]	; (8001248 <HAL_DMA_IRQHandler+0x204>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d102      	bne.n	80010d6 <HAL_DMA_IRQHandler+0x92>
 80010d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010d4:	e00e      	b.n	80010f4 <HAL_DMA_IRQHandler+0xb0>
 80010d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010da:	e00b      	b.n	80010f4 <HAL_DMA_IRQHandler+0xb0>
 80010dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80010e0:	e008      	b.n	80010f4 <HAL_DMA_IRQHandler+0xb0>
 80010e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010e6:	e005      	b.n	80010f4 <HAL_DMA_IRQHandler+0xb0>
 80010e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ec:	e002      	b.n	80010f4 <HAL_DMA_IRQHandler+0xb0>
 80010ee:	2340      	movs	r3, #64	; 0x40
 80010f0:	e000      	b.n	80010f4 <HAL_DMA_IRQHandler+0xb0>
 80010f2:	2304      	movs	r3, #4
 80010f4:	4a55      	ldr	r2, [pc, #340]	; (800124c <HAL_DMA_IRQHandler+0x208>)
 80010f6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f000 8094 	beq.w	800122a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800110a:	e08e      	b.n	800122a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	2202      	movs	r2, #2
 8001112:	409a      	lsls	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4013      	ands	r3, r2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d056      	beq.n	80011ca <HAL_DMA_IRQHandler+0x186>
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d051      	beq.n	80011ca <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0320 	and.w	r3, r3, #32
 8001130:	2b00      	cmp	r3, #0
 8001132:	d10b      	bne.n	800114c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f022 020a 	bic.w	r2, r2, #10
 8001142:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2201      	movs	r2, #1
 8001148:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a38      	ldr	r2, [pc, #224]	; (8001234 <HAL_DMA_IRQHandler+0x1f0>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d029      	beq.n	80011aa <HAL_DMA_IRQHandler+0x166>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a37      	ldr	r2, [pc, #220]	; (8001238 <HAL_DMA_IRQHandler+0x1f4>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d022      	beq.n	80011a6 <HAL_DMA_IRQHandler+0x162>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a35      	ldr	r2, [pc, #212]	; (800123c <HAL_DMA_IRQHandler+0x1f8>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d01a      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x15c>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a34      	ldr	r2, [pc, #208]	; (8001240 <HAL_DMA_IRQHandler+0x1fc>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d012      	beq.n	800119a <HAL_DMA_IRQHandler+0x156>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a32      	ldr	r2, [pc, #200]	; (8001244 <HAL_DMA_IRQHandler+0x200>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d00a      	beq.n	8001194 <HAL_DMA_IRQHandler+0x150>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a31      	ldr	r2, [pc, #196]	; (8001248 <HAL_DMA_IRQHandler+0x204>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d102      	bne.n	800118e <HAL_DMA_IRQHandler+0x14a>
 8001188:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800118c:	e00e      	b.n	80011ac <HAL_DMA_IRQHandler+0x168>
 800118e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001192:	e00b      	b.n	80011ac <HAL_DMA_IRQHandler+0x168>
 8001194:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001198:	e008      	b.n	80011ac <HAL_DMA_IRQHandler+0x168>
 800119a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800119e:	e005      	b.n	80011ac <HAL_DMA_IRQHandler+0x168>
 80011a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011a4:	e002      	b.n	80011ac <HAL_DMA_IRQHandler+0x168>
 80011a6:	2320      	movs	r3, #32
 80011a8:	e000      	b.n	80011ac <HAL_DMA_IRQHandler+0x168>
 80011aa:	2302      	movs	r3, #2
 80011ac:	4a27      	ldr	r2, [pc, #156]	; (800124c <HAL_DMA_IRQHandler+0x208>)
 80011ae:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d034      	beq.n	800122a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80011c8:	e02f      	b.n	800122a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	2208      	movs	r2, #8
 80011d0:	409a      	lsls	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4013      	ands	r3, r2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d028      	beq.n	800122c <HAL_DMA_IRQHandler+0x1e8>
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	f003 0308 	and.w	r3, r3, #8
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d023      	beq.n	800122c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 020e 	bic.w	r2, r2, #14
 80011f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011fc:	2101      	movs	r1, #1
 80011fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001202:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2201      	movs	r2, #1
 8001208:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2201      	movs	r2, #1
 800120e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	2b00      	cmp	r3, #0
 8001220:	d004      	beq.n	800122c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	4798      	blx	r3
    }
  }
  return;
 800122a:	bf00      	nop
 800122c:	bf00      	nop
}
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40020008 	.word	0x40020008
 8001238:	4002001c 	.word	0x4002001c
 800123c:	40020030 	.word	0x40020030
 8001240:	40020044 	.word	0x40020044
 8001244:	40020058 	.word	0x40020058
 8001248:	4002006c 	.word	0x4002006c
 800124c:	40020000 	.word	0x40020000

08001250 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
 800125c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001266:	2101      	movs	r1, #1
 8001268:	fa01 f202 	lsl.w	r2, r1, r2
 800126c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b10      	cmp	r3, #16
 800127c:	d108      	bne.n	8001290 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800128e:	e007      	b.n	80012a0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68ba      	ldr	r2, [r7, #8]
 8001296:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	60da      	str	r2, [r3, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
	...

080012ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b08b      	sub	sp, #44	; 0x2c
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012b6:	2300      	movs	r3, #0
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012be:	e169      	b.n	8001594 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012c0:	2201      	movs	r2, #1
 80012c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	69fa      	ldr	r2, [r7, #28]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	429a      	cmp	r2, r3
 80012da:	f040 8158 	bne.w	800158e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	4a9a      	ldr	r2, [pc, #616]	; (800154c <HAL_GPIO_Init+0x2a0>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d05e      	beq.n	80013a6 <HAL_GPIO_Init+0xfa>
 80012e8:	4a98      	ldr	r2, [pc, #608]	; (800154c <HAL_GPIO_Init+0x2a0>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d875      	bhi.n	80013da <HAL_GPIO_Init+0x12e>
 80012ee:	4a98      	ldr	r2, [pc, #608]	; (8001550 <HAL_GPIO_Init+0x2a4>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d058      	beq.n	80013a6 <HAL_GPIO_Init+0xfa>
 80012f4:	4a96      	ldr	r2, [pc, #600]	; (8001550 <HAL_GPIO_Init+0x2a4>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d86f      	bhi.n	80013da <HAL_GPIO_Init+0x12e>
 80012fa:	4a96      	ldr	r2, [pc, #600]	; (8001554 <HAL_GPIO_Init+0x2a8>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d052      	beq.n	80013a6 <HAL_GPIO_Init+0xfa>
 8001300:	4a94      	ldr	r2, [pc, #592]	; (8001554 <HAL_GPIO_Init+0x2a8>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d869      	bhi.n	80013da <HAL_GPIO_Init+0x12e>
 8001306:	4a94      	ldr	r2, [pc, #592]	; (8001558 <HAL_GPIO_Init+0x2ac>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d04c      	beq.n	80013a6 <HAL_GPIO_Init+0xfa>
 800130c:	4a92      	ldr	r2, [pc, #584]	; (8001558 <HAL_GPIO_Init+0x2ac>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d863      	bhi.n	80013da <HAL_GPIO_Init+0x12e>
 8001312:	4a92      	ldr	r2, [pc, #584]	; (800155c <HAL_GPIO_Init+0x2b0>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d046      	beq.n	80013a6 <HAL_GPIO_Init+0xfa>
 8001318:	4a90      	ldr	r2, [pc, #576]	; (800155c <HAL_GPIO_Init+0x2b0>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d85d      	bhi.n	80013da <HAL_GPIO_Init+0x12e>
 800131e:	2b12      	cmp	r3, #18
 8001320:	d82a      	bhi.n	8001378 <HAL_GPIO_Init+0xcc>
 8001322:	2b12      	cmp	r3, #18
 8001324:	d859      	bhi.n	80013da <HAL_GPIO_Init+0x12e>
 8001326:	a201      	add	r2, pc, #4	; (adr r2, 800132c <HAL_GPIO_Init+0x80>)
 8001328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132c:	080013a7 	.word	0x080013a7
 8001330:	08001381 	.word	0x08001381
 8001334:	08001393 	.word	0x08001393
 8001338:	080013d5 	.word	0x080013d5
 800133c:	080013db 	.word	0x080013db
 8001340:	080013db 	.word	0x080013db
 8001344:	080013db 	.word	0x080013db
 8001348:	080013db 	.word	0x080013db
 800134c:	080013db 	.word	0x080013db
 8001350:	080013db 	.word	0x080013db
 8001354:	080013db 	.word	0x080013db
 8001358:	080013db 	.word	0x080013db
 800135c:	080013db 	.word	0x080013db
 8001360:	080013db 	.word	0x080013db
 8001364:	080013db 	.word	0x080013db
 8001368:	080013db 	.word	0x080013db
 800136c:	080013db 	.word	0x080013db
 8001370:	08001389 	.word	0x08001389
 8001374:	0800139d 	.word	0x0800139d
 8001378:	4a79      	ldr	r2, [pc, #484]	; (8001560 <HAL_GPIO_Init+0x2b4>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d013      	beq.n	80013a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800137e:	e02c      	b.n	80013da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	623b      	str	r3, [r7, #32]
          break;
 8001386:	e029      	b.n	80013dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	3304      	adds	r3, #4
 800138e:	623b      	str	r3, [r7, #32]
          break;
 8001390:	e024      	b.n	80013dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	3308      	adds	r3, #8
 8001398:	623b      	str	r3, [r7, #32]
          break;
 800139a:	e01f      	b.n	80013dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	330c      	adds	r3, #12
 80013a2:	623b      	str	r3, [r7, #32]
          break;
 80013a4:	e01a      	b.n	80013dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d102      	bne.n	80013b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013ae:	2304      	movs	r3, #4
 80013b0:	623b      	str	r3, [r7, #32]
          break;
 80013b2:	e013      	b.n	80013dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d105      	bne.n	80013c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013bc:	2308      	movs	r3, #8
 80013be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69fa      	ldr	r2, [r7, #28]
 80013c4:	611a      	str	r2, [r3, #16]
          break;
 80013c6:	e009      	b.n	80013dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013c8:	2308      	movs	r3, #8
 80013ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69fa      	ldr	r2, [r7, #28]
 80013d0:	615a      	str	r2, [r3, #20]
          break;
 80013d2:	e003      	b.n	80013dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
          break;
 80013d8:	e000      	b.n	80013dc <HAL_GPIO_Init+0x130>
          break;
 80013da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	2bff      	cmp	r3, #255	; 0xff
 80013e0:	d801      	bhi.n	80013e6 <HAL_GPIO_Init+0x13a>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	e001      	b.n	80013ea <HAL_GPIO_Init+0x13e>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3304      	adds	r3, #4
 80013ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	2bff      	cmp	r3, #255	; 0xff
 80013f0:	d802      	bhi.n	80013f8 <HAL_GPIO_Init+0x14c>
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	e002      	b.n	80013fe <HAL_GPIO_Init+0x152>
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	3b08      	subs	r3, #8
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	210f      	movs	r1, #15
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	fa01 f303 	lsl.w	r3, r1, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	401a      	ands	r2, r3
 8001410:	6a39      	ldr	r1, [r7, #32]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	fa01 f303 	lsl.w	r3, r1, r3
 8001418:	431a      	orrs	r2, r3
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 80b1 	beq.w	800158e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800142c:	4b4d      	ldr	r3, [pc, #308]	; (8001564 <HAL_GPIO_Init+0x2b8>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	4a4c      	ldr	r2, [pc, #304]	; (8001564 <HAL_GPIO_Init+0x2b8>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6193      	str	r3, [r2, #24]
 8001438:	4b4a      	ldr	r3, [pc, #296]	; (8001564 <HAL_GPIO_Init+0x2b8>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	f003 0301 	and.w	r3, r3, #1
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001444:	4a48      	ldr	r2, [pc, #288]	; (8001568 <HAL_GPIO_Init+0x2bc>)
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	089b      	lsrs	r3, r3, #2
 800144a:	3302      	adds	r3, #2
 800144c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001450:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	220f      	movs	r2, #15
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	4013      	ands	r3, r2
 8001466:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a40      	ldr	r2, [pc, #256]	; (800156c <HAL_GPIO_Init+0x2c0>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d013      	beq.n	8001498 <HAL_GPIO_Init+0x1ec>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a3f      	ldr	r2, [pc, #252]	; (8001570 <HAL_GPIO_Init+0x2c4>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d00d      	beq.n	8001494 <HAL_GPIO_Init+0x1e8>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a3e      	ldr	r2, [pc, #248]	; (8001574 <HAL_GPIO_Init+0x2c8>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d007      	beq.n	8001490 <HAL_GPIO_Init+0x1e4>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a3d      	ldr	r2, [pc, #244]	; (8001578 <HAL_GPIO_Init+0x2cc>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d101      	bne.n	800148c <HAL_GPIO_Init+0x1e0>
 8001488:	2303      	movs	r3, #3
 800148a:	e006      	b.n	800149a <HAL_GPIO_Init+0x1ee>
 800148c:	2304      	movs	r3, #4
 800148e:	e004      	b.n	800149a <HAL_GPIO_Init+0x1ee>
 8001490:	2302      	movs	r3, #2
 8001492:	e002      	b.n	800149a <HAL_GPIO_Init+0x1ee>
 8001494:	2301      	movs	r3, #1
 8001496:	e000      	b.n	800149a <HAL_GPIO_Init+0x1ee>
 8001498:	2300      	movs	r3, #0
 800149a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800149c:	f002 0203 	and.w	r2, r2, #3
 80014a0:	0092      	lsls	r2, r2, #2
 80014a2:	4093      	lsls	r3, r2
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014aa:	492f      	ldr	r1, [pc, #188]	; (8001568 <HAL_GPIO_Init+0x2bc>)
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	089b      	lsrs	r3, r3, #2
 80014b0:	3302      	adds	r3, #2
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d006      	beq.n	80014d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014c4:	4b2d      	ldr	r3, [pc, #180]	; (800157c <HAL_GPIO_Init+0x2d0>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	492c      	ldr	r1, [pc, #176]	; (800157c <HAL_GPIO_Init+0x2d0>)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	600b      	str	r3, [r1, #0]
 80014d0:	e006      	b.n	80014e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014d2:	4b2a      	ldr	r3, [pc, #168]	; (800157c <HAL_GPIO_Init+0x2d0>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	43db      	mvns	r3, r3
 80014da:	4928      	ldr	r1, [pc, #160]	; (800157c <HAL_GPIO_Init+0x2d0>)
 80014dc:	4013      	ands	r3, r2
 80014de:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d006      	beq.n	80014fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014ec:	4b23      	ldr	r3, [pc, #140]	; (800157c <HAL_GPIO_Init+0x2d0>)
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	4922      	ldr	r1, [pc, #136]	; (800157c <HAL_GPIO_Init+0x2d0>)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]
 80014f8:	e006      	b.n	8001508 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014fa:	4b20      	ldr	r3, [pc, #128]	; (800157c <HAL_GPIO_Init+0x2d0>)
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	43db      	mvns	r3, r3
 8001502:	491e      	ldr	r1, [pc, #120]	; (800157c <HAL_GPIO_Init+0x2d0>)
 8001504:	4013      	ands	r3, r2
 8001506:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d006      	beq.n	8001522 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <HAL_GPIO_Init+0x2d0>)
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	4918      	ldr	r1, [pc, #96]	; (800157c <HAL_GPIO_Init+0x2d0>)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	608b      	str	r3, [r1, #8]
 8001520:	e006      	b.n	8001530 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001522:	4b16      	ldr	r3, [pc, #88]	; (800157c <HAL_GPIO_Init+0x2d0>)
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	43db      	mvns	r3, r3
 800152a:	4914      	ldr	r1, [pc, #80]	; (800157c <HAL_GPIO_Init+0x2d0>)
 800152c:	4013      	ands	r3, r2
 800152e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d021      	beq.n	8001580 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800153c:	4b0f      	ldr	r3, [pc, #60]	; (800157c <HAL_GPIO_Init+0x2d0>)
 800153e:	68da      	ldr	r2, [r3, #12]
 8001540:	490e      	ldr	r1, [pc, #56]	; (800157c <HAL_GPIO_Init+0x2d0>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	4313      	orrs	r3, r2
 8001546:	60cb      	str	r3, [r1, #12]
 8001548:	e021      	b.n	800158e <HAL_GPIO_Init+0x2e2>
 800154a:	bf00      	nop
 800154c:	10320000 	.word	0x10320000
 8001550:	10310000 	.word	0x10310000
 8001554:	10220000 	.word	0x10220000
 8001558:	10210000 	.word	0x10210000
 800155c:	10120000 	.word	0x10120000
 8001560:	10110000 	.word	0x10110000
 8001564:	40021000 	.word	0x40021000
 8001568:	40010000 	.word	0x40010000
 800156c:	40010800 	.word	0x40010800
 8001570:	40010c00 	.word	0x40010c00
 8001574:	40011000 	.word	0x40011000
 8001578:	40011400 	.word	0x40011400
 800157c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_GPIO_Init+0x304>)
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	43db      	mvns	r3, r3
 8001588:	4909      	ldr	r1, [pc, #36]	; (80015b0 <HAL_GPIO_Init+0x304>)
 800158a:	4013      	ands	r3, r2
 800158c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	3301      	adds	r3, #1
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	fa22 f303 	lsr.w	r3, r2, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f47f ae8e 	bne.w	80012c0 <HAL_GPIO_Init+0x14>
  }
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	372c      	adds	r7, #44	; 0x2c
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	40010400 	.word	0x40010400

080015b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	807b      	strh	r3, [r7, #2]
 80015c0:	4613      	mov	r3, r2
 80015c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015c4:	787b      	ldrb	r3, [r7, #1]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ca:	887a      	ldrh	r2, [r7, #2]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015d0:	e003      	b.n	80015da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015d2:	887b      	ldrh	r3, [r7, #2]
 80015d4:	041a      	lsls	r2, r3, #16
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	611a      	str	r2, [r3, #16]
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015f6:	887a      	ldrh	r2, [r7, #2]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4013      	ands	r3, r2
 80015fc:	041a      	lsls	r2, r3, #16
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	43d9      	mvns	r1, r3
 8001602:	887b      	ldrh	r3, [r7, #2]
 8001604:	400b      	ands	r3, r1
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	611a      	str	r2, [r3, #16]
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr
	...

08001618 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e272      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 8087 	beq.w	8001746 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001638:	4b92      	ldr	r3, [pc, #584]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 030c 	and.w	r3, r3, #12
 8001640:	2b04      	cmp	r3, #4
 8001642:	d00c      	beq.n	800165e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001644:	4b8f      	ldr	r3, [pc, #572]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 030c 	and.w	r3, r3, #12
 800164c:	2b08      	cmp	r3, #8
 800164e:	d112      	bne.n	8001676 <HAL_RCC_OscConfig+0x5e>
 8001650:	4b8c      	ldr	r3, [pc, #560]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165c:	d10b      	bne.n	8001676 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165e:	4b89      	ldr	r3, [pc, #548]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d06c      	beq.n	8001744 <HAL_RCC_OscConfig+0x12c>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d168      	bne.n	8001744 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e24c      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800167e:	d106      	bne.n	800168e <HAL_RCC_OscConfig+0x76>
 8001680:	4b80      	ldr	r3, [pc, #512]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a7f      	ldr	r2, [pc, #508]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	e02e      	b.n	80016ec <HAL_RCC_OscConfig+0xd4>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10c      	bne.n	80016b0 <HAL_RCC_OscConfig+0x98>
 8001696:	4b7b      	ldr	r3, [pc, #492]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a7a      	ldr	r2, [pc, #488]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 800169c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	4b78      	ldr	r3, [pc, #480]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a77      	ldr	r2, [pc, #476]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	e01d      	b.n	80016ec <HAL_RCC_OscConfig+0xd4>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016b8:	d10c      	bne.n	80016d4 <HAL_RCC_OscConfig+0xbc>
 80016ba:	4b72      	ldr	r3, [pc, #456]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a71      	ldr	r2, [pc, #452]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	4b6f      	ldr	r3, [pc, #444]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a6e      	ldr	r2, [pc, #440]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	e00b      	b.n	80016ec <HAL_RCC_OscConfig+0xd4>
 80016d4:	4b6b      	ldr	r3, [pc, #428]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a6a      	ldr	r2, [pc, #424]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	4b68      	ldr	r3, [pc, #416]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a67      	ldr	r2, [pc, #412]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d013      	beq.n	800171c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff fab0 	bl	8000c58 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016fc:	f7ff faac 	bl	8000c58 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b64      	cmp	r3, #100	; 0x64
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e200      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170e:	4b5d      	ldr	r3, [pc, #372]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0f0      	beq.n	80016fc <HAL_RCC_OscConfig+0xe4>
 800171a:	e014      	b.n	8001746 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171c:	f7ff fa9c 	bl	8000c58 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001724:	f7ff fa98 	bl	8000c58 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b64      	cmp	r3, #100	; 0x64
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e1ec      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001736:	4b53      	ldr	r3, [pc, #332]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0x10c>
 8001742:	e000      	b.n	8001746 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d063      	beq.n	800181a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001752:	4b4c      	ldr	r3, [pc, #304]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 030c 	and.w	r3, r3, #12
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00b      	beq.n	8001776 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800175e:	4b49      	ldr	r3, [pc, #292]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 030c 	and.w	r3, r3, #12
 8001766:	2b08      	cmp	r3, #8
 8001768:	d11c      	bne.n	80017a4 <HAL_RCC_OscConfig+0x18c>
 800176a:	4b46      	ldr	r3, [pc, #280]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d116      	bne.n	80017a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001776:	4b43      	ldr	r3, [pc, #268]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d005      	beq.n	800178e <HAL_RCC_OscConfig+0x176>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d001      	beq.n	800178e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e1c0      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178e:	4b3d      	ldr	r3, [pc, #244]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	4939      	ldr	r1, [pc, #228]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a2:	e03a      	b.n	800181a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d020      	beq.n	80017ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017ac:	4b36      	ldr	r3, [pc, #216]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b2:	f7ff fa51 	bl	8000c58 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ba:	f7ff fa4d 	bl	8000c58 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e1a1      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017cc:	4b2d      	ldr	r3, [pc, #180]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f0      	beq.n	80017ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d8:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	4927      	ldr	r1, [pc, #156]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	600b      	str	r3, [r1, #0]
 80017ec:	e015      	b.n	800181a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ee:	4b26      	ldr	r3, [pc, #152]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7ff fa30 	bl	8000c58 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017fc:	f7ff fa2c 	bl	8000c58 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e180      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800180e:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	2b00      	cmp	r3, #0
 8001824:	d03a      	beq.n	800189c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d019      	beq.n	8001862 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800182e:	4b17      	ldr	r3, [pc, #92]	; (800188c <HAL_RCC_OscConfig+0x274>)
 8001830:	2201      	movs	r2, #1
 8001832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001834:	f7ff fa10 	bl	8000c58 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800183c:	f7ff fa0c 	bl	8000c58 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e160      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184e:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0f0      	beq.n	800183c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800185a:	2001      	movs	r0, #1
 800185c:	f000 fad8 	bl	8001e10 <RCC_Delay>
 8001860:	e01c      	b.n	800189c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001862:	4b0a      	ldr	r3, [pc, #40]	; (800188c <HAL_RCC_OscConfig+0x274>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001868:	f7ff f9f6 	bl	8000c58 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800186e:	e00f      	b.n	8001890 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001870:	f7ff f9f2 	bl	8000c58 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d908      	bls.n	8001890 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e146      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
 8001882:	bf00      	nop
 8001884:	40021000 	.word	0x40021000
 8001888:	42420000 	.word	0x42420000
 800188c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001890:	4b92      	ldr	r3, [pc, #584]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1e9      	bne.n	8001870 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 80a6 	beq.w	80019f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ae:	4b8b      	ldr	r3, [pc, #556]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d10d      	bne.n	80018d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ba:	4b88      	ldr	r3, [pc, #544]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	4a87      	ldr	r2, [pc, #540]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 80018c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c4:	61d3      	str	r3, [r2, #28]
 80018c6:	4b85      	ldr	r3, [pc, #532]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018d2:	2301      	movs	r3, #1
 80018d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d6:	4b82      	ldr	r3, [pc, #520]	; (8001ae0 <HAL_RCC_OscConfig+0x4c8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d118      	bne.n	8001914 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018e2:	4b7f      	ldr	r3, [pc, #508]	; (8001ae0 <HAL_RCC_OscConfig+0x4c8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a7e      	ldr	r2, [pc, #504]	; (8001ae0 <HAL_RCC_OscConfig+0x4c8>)
 80018e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ee:	f7ff f9b3 	bl	8000c58 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f6:	f7ff f9af 	bl	8000c58 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b64      	cmp	r3, #100	; 0x64
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e103      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001908:	4b75      	ldr	r3, [pc, #468]	; (8001ae0 <HAL_RCC_OscConfig+0x4c8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0f0      	beq.n	80018f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d106      	bne.n	800192a <HAL_RCC_OscConfig+0x312>
 800191c:	4b6f      	ldr	r3, [pc, #444]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	4a6e      	ldr	r2, [pc, #440]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6213      	str	r3, [r2, #32]
 8001928:	e02d      	b.n	8001986 <HAL_RCC_OscConfig+0x36e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10c      	bne.n	800194c <HAL_RCC_OscConfig+0x334>
 8001932:	4b6a      	ldr	r3, [pc, #424]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	4a69      	ldr	r2, [pc, #420]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001938:	f023 0301 	bic.w	r3, r3, #1
 800193c:	6213      	str	r3, [r2, #32]
 800193e:	4b67      	ldr	r3, [pc, #412]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	4a66      	ldr	r2, [pc, #408]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001944:	f023 0304 	bic.w	r3, r3, #4
 8001948:	6213      	str	r3, [r2, #32]
 800194a:	e01c      	b.n	8001986 <HAL_RCC_OscConfig+0x36e>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	2b05      	cmp	r3, #5
 8001952:	d10c      	bne.n	800196e <HAL_RCC_OscConfig+0x356>
 8001954:	4b61      	ldr	r3, [pc, #388]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	4a60      	ldr	r2, [pc, #384]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 800195a:	f043 0304 	orr.w	r3, r3, #4
 800195e:	6213      	str	r3, [r2, #32]
 8001960:	4b5e      	ldr	r3, [pc, #376]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	4a5d      	ldr	r2, [pc, #372]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6213      	str	r3, [r2, #32]
 800196c:	e00b      	b.n	8001986 <HAL_RCC_OscConfig+0x36e>
 800196e:	4b5b      	ldr	r3, [pc, #364]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	4a5a      	ldr	r2, [pc, #360]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001974:	f023 0301 	bic.w	r3, r3, #1
 8001978:	6213      	str	r3, [r2, #32]
 800197a:	4b58      	ldr	r3, [pc, #352]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	4a57      	ldr	r2, [pc, #348]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001980:	f023 0304 	bic.w	r3, r3, #4
 8001984:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d015      	beq.n	80019ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198e:	f7ff f963 	bl	8000c58 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001994:	e00a      	b.n	80019ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001996:	f7ff f95f 	bl	8000c58 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e0b1      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ac:	4b4b      	ldr	r3, [pc, #300]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0ee      	beq.n	8001996 <HAL_RCC_OscConfig+0x37e>
 80019b8:	e014      	b.n	80019e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ba:	f7ff f94d 	bl	8000c58 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c0:	e00a      	b.n	80019d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c2:	f7ff f949 	bl	8000c58 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e09b      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d8:	4b40      	ldr	r3, [pc, #256]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1ee      	bne.n	80019c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019e4:	7dfb      	ldrb	r3, [r7, #23]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d105      	bne.n	80019f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ea:	4b3c      	ldr	r3, [pc, #240]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	4a3b      	ldr	r2, [pc, #236]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 80019f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 8087 	beq.w	8001b0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a00:	4b36      	ldr	r3, [pc, #216]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d061      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d146      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a14:	4b33      	ldr	r3, [pc, #204]	; (8001ae4 <HAL_RCC_OscConfig+0x4cc>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1a:	f7ff f91d 	bl	8000c58 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a22:	f7ff f919 	bl	8000c58 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e06d      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a34:	4b29      	ldr	r3, [pc, #164]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f0      	bne.n	8001a22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a48:	d108      	bne.n	8001a5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a4a:	4b24      	ldr	r3, [pc, #144]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	4921      	ldr	r1, [pc, #132]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a19      	ldr	r1, [r3, #32]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	430b      	orrs	r3, r1
 8001a6e:	491b      	ldr	r1, [pc, #108]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <HAL_RCC_OscConfig+0x4cc>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7a:	f7ff f8ed 	bl	8000c58 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a82:	f7ff f8e9 	bl	8000c58 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e03d      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0f0      	beq.n	8001a82 <HAL_RCC_OscConfig+0x46a>
 8001aa0:	e035      	b.n	8001b0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa2:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <HAL_RCC_OscConfig+0x4cc>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa8:	f7ff f8d6 	bl	8000c58 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab0:	f7ff f8d2 	bl	8000c58 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e026      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x498>
 8001ace:	e01e      	b.n	8001b0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d107      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e019      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40007000 	.word	0x40007000
 8001ae4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d106      	bne.n	8001b0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d001      	beq.n	8001b0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40021000 	.word	0x40021000

08001b1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e0d0      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b30:	4b6a      	ldr	r3, [pc, #424]	; (8001cdc <HAL_RCC_ClockConfig+0x1c0>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d910      	bls.n	8001b60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3e:	4b67      	ldr	r3, [pc, #412]	; (8001cdc <HAL_RCC_ClockConfig+0x1c0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f023 0207 	bic.w	r2, r3, #7
 8001b46:	4965      	ldr	r1, [pc, #404]	; (8001cdc <HAL_RCC_ClockConfig+0x1c0>)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4e:	4b63      	ldr	r3, [pc, #396]	; (8001cdc <HAL_RCC_ClockConfig+0x1c0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d001      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e0b8      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d020      	beq.n	8001bae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b78:	4b59      	ldr	r3, [pc, #356]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	4a58      	ldr	r2, [pc, #352]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0308 	and.w	r3, r3, #8
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b90:	4b53      	ldr	r3, [pc, #332]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	4a52      	ldr	r2, [pc, #328]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b9c:	4b50      	ldr	r3, [pc, #320]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	494d      	ldr	r1, [pc, #308]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d040      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d107      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc2:	4b47      	ldr	r3, [pc, #284]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d115      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e07f      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d107      	bne.n	8001bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bda:	4b41      	ldr	r3, [pc, #260]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d109      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e073      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bea:	4b3d      	ldr	r3, [pc, #244]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e06b      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bfa:	4b39      	ldr	r3, [pc, #228]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f023 0203 	bic.w	r2, r3, #3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	4936      	ldr	r1, [pc, #216]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c0c:	f7ff f824 	bl	8000c58 <HAL_GetTick>
 8001c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c12:	e00a      	b.n	8001c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c14:	f7ff f820 	bl	8000c58 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e053      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 020c 	and.w	r2, r3, #12
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d1eb      	bne.n	8001c14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c3c:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <HAL_RCC_ClockConfig+0x1c0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d210      	bcs.n	8001c6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4a:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <HAL_RCC_ClockConfig+0x1c0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 0207 	bic.w	r2, r3, #7
 8001c52:	4922      	ldr	r1, [pc, #136]	; (8001cdc <HAL_RCC_ClockConfig+0x1c0>)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5a:	4b20      	ldr	r3, [pc, #128]	; (8001cdc <HAL_RCC_ClockConfig+0x1c0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d001      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e032      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d008      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c78:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	4916      	ldr	r1, [pc, #88]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d009      	beq.n	8001caa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c96:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	490e      	ldr	r1, [pc, #56]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001caa:	f000 f821 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	091b      	lsrs	r3, r3, #4
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	490a      	ldr	r1, [pc, #40]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8001cbc:	5ccb      	ldrb	r3, [r1, r3]
 8001cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc2:	4a09      	ldr	r2, [pc, #36]	; (8001ce8 <HAL_RCC_ClockConfig+0x1cc>)
 8001cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <HAL_RCC_ClockConfig+0x1d0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe ff82 	bl	8000bd4 <HAL_InitTick>

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40022000 	.word	0x40022000
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	0800344c 	.word	0x0800344c
 8001ce8:	20000010 	.word	0x20000010
 8001cec:	20000014 	.word	0x20000014

08001cf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf0:	b490      	push	{r4, r7}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cf6:	4b29      	ldr	r3, [pc, #164]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xac>)
 8001cf8:	1d3c      	adds	r4, r7, #4
 8001cfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d00:	f240 2301 	movw	r3, #513	; 0x201
 8001d04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d1a:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d002      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0x40>
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d003      	beq.n	8001d36 <HAL_RCC_GetSysClockFreq+0x46>
 8001d2e:	e02b      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d30:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d32:	623b      	str	r3, [r7, #32]
      break;
 8001d34:	e02b      	b.n	8001d8e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	0c9b      	lsrs	r3, r3, #18
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	3328      	adds	r3, #40	; 0x28
 8001d40:	443b      	add	r3, r7
 8001d42:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d46:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d012      	beq.n	8001d78 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d52:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	0c5b      	lsrs	r3, r3, #17
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	3328      	adds	r3, #40	; 0x28
 8001d5e:	443b      	add	r3, r7
 8001d60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	4a0e      	ldr	r2, [pc, #56]	; (8001da4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d6a:	fb03 f202 	mul.w	r2, r3, r2
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
 8001d76:	e004      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	4a0b      	ldr	r2, [pc, #44]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d7c:	fb02 f303 	mul.w	r3, r2, r3
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	623b      	str	r3, [r7, #32]
      break;
 8001d86:	e002      	b.n	8001d8e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d8a:	623b      	str	r3, [r7, #32]
      break;
 8001d8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d8e:	6a3b      	ldr	r3, [r7, #32]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3728      	adds	r7, #40	; 0x28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc90      	pop	{r4, r7}
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	0800343c 	.word	0x0800343c
 8001da0:	40021000 	.word	0x40021000
 8001da4:	007a1200 	.word	0x007a1200
 8001da8:	003d0900 	.word	0x003d0900

08001dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001db0:	4b02      	ldr	r3, [pc, #8]	; (8001dbc <HAL_RCC_GetHCLKFreq+0x10>)
 8001db2:	681b      	ldr	r3, [r3, #0]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr
 8001dbc:	20000010 	.word	0x20000010

08001dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dc4:	f7ff fff2 	bl	8001dac <HAL_RCC_GetHCLKFreq>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	0a1b      	lsrs	r3, r3, #8
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	4903      	ldr	r1, [pc, #12]	; (8001de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dd6:	5ccb      	ldrb	r3, [r1, r3]
 8001dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40021000 	.word	0x40021000
 8001de4:	0800345c 	.word	0x0800345c

08001de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dec:	f7ff ffde 	bl	8001dac <HAL_RCC_GetHCLKFreq>
 8001df0:	4602      	mov	r2, r0
 8001df2:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	0adb      	lsrs	r3, r3, #11
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	4903      	ldr	r1, [pc, #12]	; (8001e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dfe:	5ccb      	ldrb	r3, [r1, r3]
 8001e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	0800345c 	.word	0x0800345c

08001e10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e18:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <RCC_Delay+0x34>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <RCC_Delay+0x38>)
 8001e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e22:	0a5b      	lsrs	r3, r3, #9
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	fb02 f303 	mul.w	r3, r2, r3
 8001e2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e2c:	bf00      	nop
  }
  while (Delay --);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	1e5a      	subs	r2, r3, #1
 8001e32:	60fa      	str	r2, [r7, #12]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1f9      	bne.n	8001e2c <RCC_Delay+0x1c>
}
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr
 8001e44:	20000010 	.word	0x20000010
 8001e48:	10624dd3 	.word	0x10624dd3

08001e4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e076      	b.n	8001f4c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d108      	bne.n	8001e78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e6e:	d009      	beq.n	8001e84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	61da      	str	r2, [r3, #28]
 8001e76:	e005      	b.n	8001e84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d106      	bne.n	8001ea4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7fe fc9c 	bl	80007dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f08:	ea42 0103 	orr.w	r1, r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	0c1a      	lsrs	r2, r3, #16
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f002 0204 	and.w	r2, r2, #4
 8001f2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	69da      	ldr	r2, [r3, #28]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_SPI_TransmitReceive_DMA+0x20>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e0e3      	b.n	800213c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f82:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8001f8a:	7dbb      	ldrb	r3, [r7, #22]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d00d      	beq.n	8001fac <HAL_SPI_TransmitReceive_DMA+0x58>
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f96:	d106      	bne.n	8001fa6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d102      	bne.n	8001fa6 <HAL_SPI_TransmitReceive_DMA+0x52>
 8001fa0:	7dbb      	ldrb	r3, [r7, #22]
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d002      	beq.n	8001fac <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001faa:	e0c2      	b.n	8002132 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d005      	beq.n	8001fbe <HAL_SPI_TransmitReceive_DMA+0x6a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d002      	beq.n	8001fbe <HAL_SPI_TransmitReceive_DMA+0x6a>
 8001fb8:	887b      	ldrh	r3, [r7, #2]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d102      	bne.n	8001fc4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001fc2:	e0b6      	b.n	8002132 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d003      	beq.n	8001fd8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2205      	movs	r2, #5
 8001fd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	887a      	ldrh	r2, [r7, #2]
 8001fe8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	887a      	ldrh	r2, [r7, #2]
 8001fee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	887a      	ldrh	r2, [r7, #2]
 8001ffa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	887a      	ldrh	r2, [r7, #2]
 8002000:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b04      	cmp	r3, #4
 8002018:	d108      	bne.n	800202c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201e:	4a49      	ldr	r2, [pc, #292]	; (8002144 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8002020:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002026:	4a48      	ldr	r2, [pc, #288]	; (8002148 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8002028:	629a      	str	r2, [r3, #40]	; 0x28
 800202a:	e007      	b.n	800203c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002030:	4a46      	ldr	r2, [pc, #280]	; (800214c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8002032:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002038:	4a45      	ldr	r2, [pc, #276]	; (8002150 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800203a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002040:	4a44      	ldr	r2, [pc, #272]	; (8002154 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8002042:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002048:	2200      	movs	r2, #0
 800204a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	330c      	adds	r3, #12
 8002056:	4619      	mov	r1, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002062:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002064:	f7fe ff8e 	bl	8000f84 <HAL_DMA_Start_IT>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00c      	beq.n	8002088 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002072:	f043 0210 	orr.w	r2, r3, #16
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002086:	e054      	b.n	8002132 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0201 	orr.w	r2, r2, #1
 8002096:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800209c:	2200      	movs	r2, #0
 800209e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a4:	2200      	movs	r2, #0
 80020a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ac:	2200      	movs	r2, #0
 80020ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b4:	2200      	movs	r2, #0
 80020b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c0:	4619      	mov	r1, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	330c      	adds	r3, #12
 80020c8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020ce:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80020d0:	f7fe ff58 	bl	8000f84 <HAL_DMA_Start_IT>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00c      	beq.n	80020f4 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020de:	f043 0210 	orr.w	r2, r3, #16
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80020f2:	e01e      	b.n	8002132 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fe:	2b40      	cmp	r3, #64	; 0x40
 8002100:	d007      	beq.n	8002112 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002110:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f042 0220 	orr.w	r2, r2, #32
 8002120:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f042 0202 	orr.w	r2, r2, #2
 8002130:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800213a:	7dfb      	ldrb	r3, [r7, #23]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	080022c3 	.word	0x080022c3
 8002148:	0800218f 	.word	0x0800218f
 800214c:	080022df 	.word	0x080022df
 8002150:	08002235 	.word	0x08002235
 8002154:	080022fb 	.word	0x080022fb

08002158 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr

0800216a <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr

0800218e <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b084      	sub	sp, #16
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800219c:	f7fe fd5c 	bl	8000c58 <HAL_GetTick>
 80021a0:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0320 	and.w	r3, r3, #32
 80021ac:	2b20      	cmp	r3, #32
 80021ae:	d03b      	beq.n	8002228 <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0220 	bic.w	r2, r2, #32
 80021be:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10d      	bne.n	80021e4 <SPI_DMAReceiveCplt+0x56>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021d0:	d108      	bne.n	80021e4 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0203 	bic.w	r2, r2, #3
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	e007      	b.n	80021f4 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0201 	bic.w	r2, r2, #1
 80021f2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	2164      	movs	r1, #100	; 0x64
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 f927 	bl	800244c <SPI_EndRxTransaction>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d002      	beq.n	800220a <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2220      	movs	r2, #32
 8002208:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f7fe fa61 	bl	80006e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002226:	e002      	b.n	800222e <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f7ff ff95 	bl	8002158 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002242:	f7fe fd09 	bl	8000c58 <HAL_GetTick>
 8002246:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0320 	and.w	r3, r3, #32
 8002252:	2b20      	cmp	r3, #32
 8002254:	d02f      	beq.n	80022b6 <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0220 	bic.w	r2, r2, #32
 8002264:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	2164      	movs	r1, #100	; 0x64
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f940 	bl	80024f0 <SPI_EndRxTxTransaction>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d005      	beq.n	8002282 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227a:	f043 0220 	orr.w	r2, r3, #32
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0203 	bic.w	r2, r2, #3
 8002290:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f7fe fa1a 	bl	80006e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80022b4:	e002      	b.n	80022bc <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f7fe f9ee 	bl	8000698 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b084      	sub	sp, #16
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f7ff ff4a 	bl	800216a <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b084      	sub	sp, #16
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f7ff ff45 	bl	800217c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b084      	sub	sp, #16
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0203 	bic.w	r2, r2, #3
 8002316:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231c:	f043 0210 	orr.w	r2, r3, #16
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f7fe f9db 	bl	80006e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b088      	sub	sp, #32
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	603b      	str	r3, [r7, #0]
 8002348:	4613      	mov	r3, r2
 800234a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800234c:	f7fe fc84 	bl	8000c58 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	4413      	add	r3, r2
 800235a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800235c:	f7fe fc7c 	bl	8000c58 <HAL_GetTick>
 8002360:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002362:	4b39      	ldr	r3, [pc, #228]	; (8002448 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	015b      	lsls	r3, r3, #5
 8002368:	0d1b      	lsrs	r3, r3, #20
 800236a:	69fa      	ldr	r2, [r7, #28]
 800236c:	fb02 f303 	mul.w	r3, r2, r3
 8002370:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002372:	e054      	b.n	800241e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237a:	d050      	beq.n	800241e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800237c:	f7fe fc6c 	bl	8000c58 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	69fa      	ldr	r2, [r7, #28]
 8002388:	429a      	cmp	r2, r3
 800238a:	d902      	bls.n	8002392 <SPI_WaitFlagStateUntilTimeout+0x56>
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d13d      	bne.n	800240e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80023a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023aa:	d111      	bne.n	80023d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023b4:	d004      	beq.n	80023c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023be:	d107      	bne.n	80023d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023d8:	d10f      	bne.n	80023fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e017      	b.n	800243e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002414:	2300      	movs	r3, #0
 8002416:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	3b01      	subs	r3, #1
 800241c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	4013      	ands	r3, r2
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	429a      	cmp	r2, r3
 800242c:	bf0c      	ite	eq
 800242e:	2301      	moveq	r3, #1
 8002430:	2300      	movne	r3, #0
 8002432:	b2db      	uxtb	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	429a      	cmp	r2, r3
 800243a:	d19b      	bne.n	8002374 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3720      	adds	r7, #32
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000010 	.word	0x20000010

0800244c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af02      	add	r7, sp, #8
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002460:	d111      	bne.n	8002486 <SPI_EndRxTransaction+0x3a>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800246a:	d004      	beq.n	8002476 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002474:	d107      	bne.n	8002486 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002484:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800248e:	d117      	bne.n	80024c0 <SPI_EndRxTransaction+0x74>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002498:	d112      	bne.n	80024c0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2200      	movs	r2, #0
 80024a2:	2101      	movs	r1, #1
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f7ff ff49 	bl	800233c <SPI_WaitFlagStateUntilTimeout>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d01a      	beq.n	80024e6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b4:	f043 0220 	orr.w	r2, r3, #32
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e013      	b.n	80024e8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2200      	movs	r2, #0
 80024c8:	2180      	movs	r1, #128	; 0x80
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f7ff ff36 	bl	800233c <SPI_WaitFlagStateUntilTimeout>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d007      	beq.n	80024e6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024da:	f043 0220 	orr.w	r2, r3, #32
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e000      	b.n	80024e8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2200      	movs	r2, #0
 8002504:	2180      	movs	r1, #128	; 0x80
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f7ff ff18 	bl	800233c <SPI_WaitFlagStateUntilTimeout>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d007      	beq.n	8002522 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002516:	f043 0220 	orr.w	r2, r3, #32
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e000      	b.n	8002524 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e03f      	b.n	80025be <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d106      	bne.n	8002558 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7fe fab6 	bl	8000ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2224      	movs	r2, #36	; 0x24
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800256e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f905 	bl	8002780 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002584:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695a      	ldr	r2, [r3, #20]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002594:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2220      	movs	r2, #32
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b08a      	sub	sp, #40	; 0x28
 80025ca:	af02      	add	r7, sp, #8
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	603b      	str	r3, [r7, #0]
 80025d2:	4613      	mov	r3, r2
 80025d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b20      	cmp	r3, #32
 80025e4:	d17c      	bne.n	80026e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d002      	beq.n	80025f2 <HAL_UART_Transmit+0x2c>
 80025ec:	88fb      	ldrh	r3, [r7, #6]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e075      	b.n	80026e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_UART_Transmit+0x3e>
 8002600:	2302      	movs	r3, #2
 8002602:	e06e      	b.n	80026e2 <HAL_UART_Transmit+0x11c>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2221      	movs	r2, #33	; 0x21
 8002616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800261a:	f7fe fb1d 	bl	8000c58 <HAL_GetTick>
 800261e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	88fa      	ldrh	r2, [r7, #6]
 8002624:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	88fa      	ldrh	r2, [r7, #6]
 800262a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002634:	d108      	bne.n	8002648 <HAL_UART_Transmit+0x82>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d104      	bne.n	8002648 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	61bb      	str	r3, [r7, #24]
 8002646:	e003      	b.n	8002650 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800264c:	2300      	movs	r3, #0
 800264e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002658:	e02a      	b.n	80026b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2200      	movs	r2, #0
 8002662:	2180      	movs	r1, #128	; 0x80
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f840 	bl	80026ea <UART_WaitOnFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e036      	b.n	80026e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10b      	bne.n	8002692 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002688:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	3302      	adds	r3, #2
 800268e:	61bb      	str	r3, [r7, #24]
 8002690:	e007      	b.n	80026a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	781a      	ldrb	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	3301      	adds	r3, #1
 80026a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1cf      	bne.n	800265a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	2200      	movs	r2, #0
 80026c2:	2140      	movs	r1, #64	; 0x40
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 f810 	bl	80026ea <UART_WaitOnFlagUntilTimeout>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e006      	b.n	80026e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2220      	movs	r2, #32
 80026d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80026dc:	2300      	movs	r3, #0
 80026de:	e000      	b.n	80026e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80026e0:	2302      	movs	r3, #2
  }
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3720      	adds	r7, #32
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b084      	sub	sp, #16
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	4613      	mov	r3, r2
 80026f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026fa:	e02c      	b.n	8002756 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002702:	d028      	beq.n	8002756 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d007      	beq.n	800271a <UART_WaitOnFlagUntilTimeout+0x30>
 800270a:	f7fe faa5 	bl	8000c58 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	429a      	cmp	r2, r3
 8002718:	d21d      	bcs.n	8002756 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002728:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0201 	bic.w	r2, r2, #1
 8002738:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2220      	movs	r2, #32
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2220      	movs	r2, #32
 8002746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e00f      	b.n	8002776 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	4013      	ands	r3, r2
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	429a      	cmp	r2, r3
 8002764:	bf0c      	ite	eq
 8002766:	2301      	moveq	r3, #1
 8002768:	2300      	movne	r3, #0
 800276a:	b2db      	uxtb	r3, r3
 800276c:	461a      	mov	r2, r3
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	429a      	cmp	r2, r3
 8002772:	d0c3      	beq.n	80026fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80027ba:	f023 030c 	bic.w	r3, r3, #12
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6812      	ldr	r2, [r2, #0]
 80027c2:	68b9      	ldr	r1, [r7, #8]
 80027c4:	430b      	orrs	r3, r1
 80027c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699a      	ldr	r2, [r3, #24]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a2c      	ldr	r2, [pc, #176]	; (8002894 <UART_SetConfig+0x114>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d103      	bne.n	80027f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027e8:	f7ff fafe 	bl	8001de8 <HAL_RCC_GetPCLK2Freq>
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	e002      	b.n	80027f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027f0:	f7ff fae6 	bl	8001dc0 <HAL_RCC_GetPCLK1Freq>
 80027f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4613      	mov	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	009a      	lsls	r2, r3, #2
 8002800:	441a      	add	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	fbb2 f3f3 	udiv	r3, r2, r3
 800280c:	4a22      	ldr	r2, [pc, #136]	; (8002898 <UART_SetConfig+0x118>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	0119      	lsls	r1, r3, #4
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	009a      	lsls	r2, r3, #2
 8002820:	441a      	add	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	fbb2 f2f3 	udiv	r2, r2, r3
 800282c:	4b1a      	ldr	r3, [pc, #104]	; (8002898 <UART_SetConfig+0x118>)
 800282e:	fba3 0302 	umull	r0, r3, r3, r2
 8002832:	095b      	lsrs	r3, r3, #5
 8002834:	2064      	movs	r0, #100	; 0x64
 8002836:	fb00 f303 	mul.w	r3, r0, r3
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	3332      	adds	r3, #50	; 0x32
 8002840:	4a15      	ldr	r2, [pc, #84]	; (8002898 <UART_SetConfig+0x118>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800284c:	4419      	add	r1, r3
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	009a      	lsls	r2, r3, #2
 8002858:	441a      	add	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	fbb2 f2f3 	udiv	r2, r2, r3
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <UART_SetConfig+0x118>)
 8002866:	fba3 0302 	umull	r0, r3, r3, r2
 800286a:	095b      	lsrs	r3, r3, #5
 800286c:	2064      	movs	r0, #100	; 0x64
 800286e:	fb00 f303 	mul.w	r3, r0, r3
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	3332      	adds	r3, #50	; 0x32
 8002878:	4a07      	ldr	r2, [pc, #28]	; (8002898 <UART_SetConfig+0x118>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	f003 020f 	and.w	r2, r3, #15
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	440a      	add	r2, r1
 800288a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800288c:	bf00      	nop
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40013800 	.word	0x40013800
 8002898:	51eb851f 	.word	0x51eb851f

0800289c <__errno>:
 800289c:	4b01      	ldr	r3, [pc, #4]	; (80028a4 <__errno+0x8>)
 800289e:	6818      	ldr	r0, [r3, #0]
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	2000001c 	.word	0x2000001c

080028a8 <__libc_init_array>:
 80028a8:	b570      	push	{r4, r5, r6, lr}
 80028aa:	2600      	movs	r6, #0
 80028ac:	4d0c      	ldr	r5, [pc, #48]	; (80028e0 <__libc_init_array+0x38>)
 80028ae:	4c0d      	ldr	r4, [pc, #52]	; (80028e4 <__libc_init_array+0x3c>)
 80028b0:	1b64      	subs	r4, r4, r5
 80028b2:	10a4      	asrs	r4, r4, #2
 80028b4:	42a6      	cmp	r6, r4
 80028b6:	d109      	bne.n	80028cc <__libc_init_array+0x24>
 80028b8:	f000 fcd0 	bl	800325c <_init>
 80028bc:	2600      	movs	r6, #0
 80028be:	4d0a      	ldr	r5, [pc, #40]	; (80028e8 <__libc_init_array+0x40>)
 80028c0:	4c0a      	ldr	r4, [pc, #40]	; (80028ec <__libc_init_array+0x44>)
 80028c2:	1b64      	subs	r4, r4, r5
 80028c4:	10a4      	asrs	r4, r4, #2
 80028c6:	42a6      	cmp	r6, r4
 80028c8:	d105      	bne.n	80028d6 <__libc_init_array+0x2e>
 80028ca:	bd70      	pop	{r4, r5, r6, pc}
 80028cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80028d0:	4798      	blx	r3
 80028d2:	3601      	adds	r6, #1
 80028d4:	e7ee      	b.n	80028b4 <__libc_init_array+0xc>
 80028d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80028da:	4798      	blx	r3
 80028dc:	3601      	adds	r6, #1
 80028de:	e7f2      	b.n	80028c6 <__libc_init_array+0x1e>
 80028e0:	08003498 	.word	0x08003498
 80028e4:	08003498 	.word	0x08003498
 80028e8:	08003498 	.word	0x08003498
 80028ec:	0800349c 	.word	0x0800349c

080028f0 <memset>:
 80028f0:	4603      	mov	r3, r0
 80028f2:	4402      	add	r2, r0
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d100      	bne.n	80028fa <memset+0xa>
 80028f8:	4770      	bx	lr
 80028fa:	f803 1b01 	strb.w	r1, [r3], #1
 80028fe:	e7f9      	b.n	80028f4 <memset+0x4>

08002900 <sniprintf>:
 8002900:	b40c      	push	{r2, r3}
 8002902:	b530      	push	{r4, r5, lr}
 8002904:	4b17      	ldr	r3, [pc, #92]	; (8002964 <sniprintf+0x64>)
 8002906:	1e0c      	subs	r4, r1, #0
 8002908:	681d      	ldr	r5, [r3, #0]
 800290a:	b09d      	sub	sp, #116	; 0x74
 800290c:	da08      	bge.n	8002920 <sniprintf+0x20>
 800290e:	238b      	movs	r3, #139	; 0x8b
 8002910:	f04f 30ff 	mov.w	r0, #4294967295
 8002914:	602b      	str	r3, [r5, #0]
 8002916:	b01d      	add	sp, #116	; 0x74
 8002918:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800291c:	b002      	add	sp, #8
 800291e:	4770      	bx	lr
 8002920:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002924:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002928:	bf0c      	ite	eq
 800292a:	4623      	moveq	r3, r4
 800292c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002930:	9304      	str	r3, [sp, #16]
 8002932:	9307      	str	r3, [sp, #28]
 8002934:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002938:	9002      	str	r0, [sp, #8]
 800293a:	9006      	str	r0, [sp, #24]
 800293c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002940:	4628      	mov	r0, r5
 8002942:	ab21      	add	r3, sp, #132	; 0x84
 8002944:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002946:	a902      	add	r1, sp, #8
 8002948:	9301      	str	r3, [sp, #4]
 800294a:	f000 f889 	bl	8002a60 <_svfiprintf_r>
 800294e:	1c43      	adds	r3, r0, #1
 8002950:	bfbc      	itt	lt
 8002952:	238b      	movlt	r3, #139	; 0x8b
 8002954:	602b      	strlt	r3, [r5, #0]
 8002956:	2c00      	cmp	r4, #0
 8002958:	d0dd      	beq.n	8002916 <sniprintf+0x16>
 800295a:	2200      	movs	r2, #0
 800295c:	9b02      	ldr	r3, [sp, #8]
 800295e:	701a      	strb	r2, [r3, #0]
 8002960:	e7d9      	b.n	8002916 <sniprintf+0x16>
 8002962:	bf00      	nop
 8002964:	2000001c 	.word	0x2000001c

08002968 <siprintf>:
 8002968:	b40e      	push	{r1, r2, r3}
 800296a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800296e:	b500      	push	{lr}
 8002970:	b09c      	sub	sp, #112	; 0x70
 8002972:	ab1d      	add	r3, sp, #116	; 0x74
 8002974:	9002      	str	r0, [sp, #8]
 8002976:	9006      	str	r0, [sp, #24]
 8002978:	9107      	str	r1, [sp, #28]
 800297a:	9104      	str	r1, [sp, #16]
 800297c:	4808      	ldr	r0, [pc, #32]	; (80029a0 <siprintf+0x38>)
 800297e:	4909      	ldr	r1, [pc, #36]	; (80029a4 <siprintf+0x3c>)
 8002980:	f853 2b04 	ldr.w	r2, [r3], #4
 8002984:	9105      	str	r1, [sp, #20]
 8002986:	6800      	ldr	r0, [r0, #0]
 8002988:	a902      	add	r1, sp, #8
 800298a:	9301      	str	r3, [sp, #4]
 800298c:	f000 f868 	bl	8002a60 <_svfiprintf_r>
 8002990:	2200      	movs	r2, #0
 8002992:	9b02      	ldr	r3, [sp, #8]
 8002994:	701a      	strb	r2, [r3, #0]
 8002996:	b01c      	add	sp, #112	; 0x70
 8002998:	f85d eb04 	ldr.w	lr, [sp], #4
 800299c:	b003      	add	sp, #12
 800299e:	4770      	bx	lr
 80029a0:	2000001c 	.word	0x2000001c
 80029a4:	ffff0208 	.word	0xffff0208

080029a8 <__ssputs_r>:
 80029a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029ac:	688e      	ldr	r6, [r1, #8]
 80029ae:	4682      	mov	sl, r0
 80029b0:	429e      	cmp	r6, r3
 80029b2:	460c      	mov	r4, r1
 80029b4:	4690      	mov	r8, r2
 80029b6:	461f      	mov	r7, r3
 80029b8:	d838      	bhi.n	8002a2c <__ssputs_r+0x84>
 80029ba:	898a      	ldrh	r2, [r1, #12]
 80029bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80029c0:	d032      	beq.n	8002a28 <__ssputs_r+0x80>
 80029c2:	6825      	ldr	r5, [r4, #0]
 80029c4:	6909      	ldr	r1, [r1, #16]
 80029c6:	3301      	adds	r3, #1
 80029c8:	eba5 0901 	sub.w	r9, r5, r1
 80029cc:	6965      	ldr	r5, [r4, #20]
 80029ce:	444b      	add	r3, r9
 80029d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80029d8:	106d      	asrs	r5, r5, #1
 80029da:	429d      	cmp	r5, r3
 80029dc:	bf38      	it	cc
 80029de:	461d      	movcc	r5, r3
 80029e0:	0553      	lsls	r3, r2, #21
 80029e2:	d531      	bpl.n	8002a48 <__ssputs_r+0xa0>
 80029e4:	4629      	mov	r1, r5
 80029e6:	f000 fb6f 	bl	80030c8 <_malloc_r>
 80029ea:	4606      	mov	r6, r0
 80029ec:	b950      	cbnz	r0, 8002a04 <__ssputs_r+0x5c>
 80029ee:	230c      	movs	r3, #12
 80029f0:	f04f 30ff 	mov.w	r0, #4294967295
 80029f4:	f8ca 3000 	str.w	r3, [sl]
 80029f8:	89a3      	ldrh	r3, [r4, #12]
 80029fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029fe:	81a3      	strh	r3, [r4, #12]
 8002a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a04:	464a      	mov	r2, r9
 8002a06:	6921      	ldr	r1, [r4, #16]
 8002a08:	f000 face 	bl	8002fa8 <memcpy>
 8002a0c:	89a3      	ldrh	r3, [r4, #12]
 8002a0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a16:	81a3      	strh	r3, [r4, #12]
 8002a18:	6126      	str	r6, [r4, #16]
 8002a1a:	444e      	add	r6, r9
 8002a1c:	6026      	str	r6, [r4, #0]
 8002a1e:	463e      	mov	r6, r7
 8002a20:	6165      	str	r5, [r4, #20]
 8002a22:	eba5 0509 	sub.w	r5, r5, r9
 8002a26:	60a5      	str	r5, [r4, #8]
 8002a28:	42be      	cmp	r6, r7
 8002a2a:	d900      	bls.n	8002a2e <__ssputs_r+0x86>
 8002a2c:	463e      	mov	r6, r7
 8002a2e:	4632      	mov	r2, r6
 8002a30:	4641      	mov	r1, r8
 8002a32:	6820      	ldr	r0, [r4, #0]
 8002a34:	f000 fac6 	bl	8002fc4 <memmove>
 8002a38:	68a3      	ldr	r3, [r4, #8]
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	1b9b      	subs	r3, r3, r6
 8002a3e:	60a3      	str	r3, [r4, #8]
 8002a40:	6823      	ldr	r3, [r4, #0]
 8002a42:	4433      	add	r3, r6
 8002a44:	6023      	str	r3, [r4, #0]
 8002a46:	e7db      	b.n	8002a00 <__ssputs_r+0x58>
 8002a48:	462a      	mov	r2, r5
 8002a4a:	f000 fbb1 	bl	80031b0 <_realloc_r>
 8002a4e:	4606      	mov	r6, r0
 8002a50:	2800      	cmp	r0, #0
 8002a52:	d1e1      	bne.n	8002a18 <__ssputs_r+0x70>
 8002a54:	4650      	mov	r0, sl
 8002a56:	6921      	ldr	r1, [r4, #16]
 8002a58:	f000 face 	bl	8002ff8 <_free_r>
 8002a5c:	e7c7      	b.n	80029ee <__ssputs_r+0x46>
	...

08002a60 <_svfiprintf_r>:
 8002a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a64:	4698      	mov	r8, r3
 8002a66:	898b      	ldrh	r3, [r1, #12]
 8002a68:	4607      	mov	r7, r0
 8002a6a:	061b      	lsls	r3, r3, #24
 8002a6c:	460d      	mov	r5, r1
 8002a6e:	4614      	mov	r4, r2
 8002a70:	b09d      	sub	sp, #116	; 0x74
 8002a72:	d50e      	bpl.n	8002a92 <_svfiprintf_r+0x32>
 8002a74:	690b      	ldr	r3, [r1, #16]
 8002a76:	b963      	cbnz	r3, 8002a92 <_svfiprintf_r+0x32>
 8002a78:	2140      	movs	r1, #64	; 0x40
 8002a7a:	f000 fb25 	bl	80030c8 <_malloc_r>
 8002a7e:	6028      	str	r0, [r5, #0]
 8002a80:	6128      	str	r0, [r5, #16]
 8002a82:	b920      	cbnz	r0, 8002a8e <_svfiprintf_r+0x2e>
 8002a84:	230c      	movs	r3, #12
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	f04f 30ff 	mov.w	r0, #4294967295
 8002a8c:	e0d1      	b.n	8002c32 <_svfiprintf_r+0x1d2>
 8002a8e:	2340      	movs	r3, #64	; 0x40
 8002a90:	616b      	str	r3, [r5, #20]
 8002a92:	2300      	movs	r3, #0
 8002a94:	9309      	str	r3, [sp, #36]	; 0x24
 8002a96:	2320      	movs	r3, #32
 8002a98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a9c:	2330      	movs	r3, #48	; 0x30
 8002a9e:	f04f 0901 	mov.w	r9, #1
 8002aa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002aa6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002c4c <_svfiprintf_r+0x1ec>
 8002aaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002aae:	4623      	mov	r3, r4
 8002ab0:	469a      	mov	sl, r3
 8002ab2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ab6:	b10a      	cbz	r2, 8002abc <_svfiprintf_r+0x5c>
 8002ab8:	2a25      	cmp	r2, #37	; 0x25
 8002aba:	d1f9      	bne.n	8002ab0 <_svfiprintf_r+0x50>
 8002abc:	ebba 0b04 	subs.w	fp, sl, r4
 8002ac0:	d00b      	beq.n	8002ada <_svfiprintf_r+0x7a>
 8002ac2:	465b      	mov	r3, fp
 8002ac4:	4622      	mov	r2, r4
 8002ac6:	4629      	mov	r1, r5
 8002ac8:	4638      	mov	r0, r7
 8002aca:	f7ff ff6d 	bl	80029a8 <__ssputs_r>
 8002ace:	3001      	adds	r0, #1
 8002ad0:	f000 80aa 	beq.w	8002c28 <_svfiprintf_r+0x1c8>
 8002ad4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ad6:	445a      	add	r2, fp
 8002ad8:	9209      	str	r2, [sp, #36]	; 0x24
 8002ada:	f89a 3000 	ldrb.w	r3, [sl]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 80a2 	beq.w	8002c28 <_svfiprintf_r+0x1c8>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8002aea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002aee:	f10a 0a01 	add.w	sl, sl, #1
 8002af2:	9304      	str	r3, [sp, #16]
 8002af4:	9307      	str	r3, [sp, #28]
 8002af6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002afa:	931a      	str	r3, [sp, #104]	; 0x68
 8002afc:	4654      	mov	r4, sl
 8002afe:	2205      	movs	r2, #5
 8002b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b04:	4851      	ldr	r0, [pc, #324]	; (8002c4c <_svfiprintf_r+0x1ec>)
 8002b06:	f000 fa41 	bl	8002f8c <memchr>
 8002b0a:	9a04      	ldr	r2, [sp, #16]
 8002b0c:	b9d8      	cbnz	r0, 8002b46 <_svfiprintf_r+0xe6>
 8002b0e:	06d0      	lsls	r0, r2, #27
 8002b10:	bf44      	itt	mi
 8002b12:	2320      	movmi	r3, #32
 8002b14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b18:	0711      	lsls	r1, r2, #28
 8002b1a:	bf44      	itt	mi
 8002b1c:	232b      	movmi	r3, #43	; 0x2b
 8002b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b22:	f89a 3000 	ldrb.w	r3, [sl]
 8002b26:	2b2a      	cmp	r3, #42	; 0x2a
 8002b28:	d015      	beq.n	8002b56 <_svfiprintf_r+0xf6>
 8002b2a:	4654      	mov	r4, sl
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	f04f 0c0a 	mov.w	ip, #10
 8002b32:	9a07      	ldr	r2, [sp, #28]
 8002b34:	4621      	mov	r1, r4
 8002b36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b3a:	3b30      	subs	r3, #48	; 0x30
 8002b3c:	2b09      	cmp	r3, #9
 8002b3e:	d94e      	bls.n	8002bde <_svfiprintf_r+0x17e>
 8002b40:	b1b0      	cbz	r0, 8002b70 <_svfiprintf_r+0x110>
 8002b42:	9207      	str	r2, [sp, #28]
 8002b44:	e014      	b.n	8002b70 <_svfiprintf_r+0x110>
 8002b46:	eba0 0308 	sub.w	r3, r0, r8
 8002b4a:	fa09 f303 	lsl.w	r3, r9, r3
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	46a2      	mov	sl, r4
 8002b52:	9304      	str	r3, [sp, #16]
 8002b54:	e7d2      	b.n	8002afc <_svfiprintf_r+0x9c>
 8002b56:	9b03      	ldr	r3, [sp, #12]
 8002b58:	1d19      	adds	r1, r3, #4
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	9103      	str	r1, [sp, #12]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	bfbb      	ittet	lt
 8002b62:	425b      	neglt	r3, r3
 8002b64:	f042 0202 	orrlt.w	r2, r2, #2
 8002b68:	9307      	strge	r3, [sp, #28]
 8002b6a:	9307      	strlt	r3, [sp, #28]
 8002b6c:	bfb8      	it	lt
 8002b6e:	9204      	strlt	r2, [sp, #16]
 8002b70:	7823      	ldrb	r3, [r4, #0]
 8002b72:	2b2e      	cmp	r3, #46	; 0x2e
 8002b74:	d10c      	bne.n	8002b90 <_svfiprintf_r+0x130>
 8002b76:	7863      	ldrb	r3, [r4, #1]
 8002b78:	2b2a      	cmp	r3, #42	; 0x2a
 8002b7a:	d135      	bne.n	8002be8 <_svfiprintf_r+0x188>
 8002b7c:	9b03      	ldr	r3, [sp, #12]
 8002b7e:	3402      	adds	r4, #2
 8002b80:	1d1a      	adds	r2, r3, #4
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	9203      	str	r2, [sp, #12]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	bfb8      	it	lt
 8002b8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b8e:	9305      	str	r3, [sp, #20]
 8002b90:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002c50 <_svfiprintf_r+0x1f0>
 8002b94:	2203      	movs	r2, #3
 8002b96:	4650      	mov	r0, sl
 8002b98:	7821      	ldrb	r1, [r4, #0]
 8002b9a:	f000 f9f7 	bl	8002f8c <memchr>
 8002b9e:	b140      	cbz	r0, 8002bb2 <_svfiprintf_r+0x152>
 8002ba0:	2340      	movs	r3, #64	; 0x40
 8002ba2:	eba0 000a 	sub.w	r0, r0, sl
 8002ba6:	fa03 f000 	lsl.w	r0, r3, r0
 8002baa:	9b04      	ldr	r3, [sp, #16]
 8002bac:	3401      	adds	r4, #1
 8002bae:	4303      	orrs	r3, r0
 8002bb0:	9304      	str	r3, [sp, #16]
 8002bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bb6:	2206      	movs	r2, #6
 8002bb8:	4826      	ldr	r0, [pc, #152]	; (8002c54 <_svfiprintf_r+0x1f4>)
 8002bba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002bbe:	f000 f9e5 	bl	8002f8c <memchr>
 8002bc2:	2800      	cmp	r0, #0
 8002bc4:	d038      	beq.n	8002c38 <_svfiprintf_r+0x1d8>
 8002bc6:	4b24      	ldr	r3, [pc, #144]	; (8002c58 <_svfiprintf_r+0x1f8>)
 8002bc8:	bb1b      	cbnz	r3, 8002c12 <_svfiprintf_r+0x1b2>
 8002bca:	9b03      	ldr	r3, [sp, #12]
 8002bcc:	3307      	adds	r3, #7
 8002bce:	f023 0307 	bic.w	r3, r3, #7
 8002bd2:	3308      	adds	r3, #8
 8002bd4:	9303      	str	r3, [sp, #12]
 8002bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bd8:	4433      	add	r3, r6
 8002bda:	9309      	str	r3, [sp, #36]	; 0x24
 8002bdc:	e767      	b.n	8002aae <_svfiprintf_r+0x4e>
 8002bde:	460c      	mov	r4, r1
 8002be0:	2001      	movs	r0, #1
 8002be2:	fb0c 3202 	mla	r2, ip, r2, r3
 8002be6:	e7a5      	b.n	8002b34 <_svfiprintf_r+0xd4>
 8002be8:	2300      	movs	r3, #0
 8002bea:	f04f 0c0a 	mov.w	ip, #10
 8002bee:	4619      	mov	r1, r3
 8002bf0:	3401      	adds	r4, #1
 8002bf2:	9305      	str	r3, [sp, #20]
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002bfa:	3a30      	subs	r2, #48	; 0x30
 8002bfc:	2a09      	cmp	r2, #9
 8002bfe:	d903      	bls.n	8002c08 <_svfiprintf_r+0x1a8>
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0c5      	beq.n	8002b90 <_svfiprintf_r+0x130>
 8002c04:	9105      	str	r1, [sp, #20]
 8002c06:	e7c3      	b.n	8002b90 <_svfiprintf_r+0x130>
 8002c08:	4604      	mov	r4, r0
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c10:	e7f0      	b.n	8002bf4 <_svfiprintf_r+0x194>
 8002c12:	ab03      	add	r3, sp, #12
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	462a      	mov	r2, r5
 8002c18:	4638      	mov	r0, r7
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <_svfiprintf_r+0x1fc>)
 8002c1c:	a904      	add	r1, sp, #16
 8002c1e:	f3af 8000 	nop.w
 8002c22:	1c42      	adds	r2, r0, #1
 8002c24:	4606      	mov	r6, r0
 8002c26:	d1d6      	bne.n	8002bd6 <_svfiprintf_r+0x176>
 8002c28:	89ab      	ldrh	r3, [r5, #12]
 8002c2a:	065b      	lsls	r3, r3, #25
 8002c2c:	f53f af2c 	bmi.w	8002a88 <_svfiprintf_r+0x28>
 8002c30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c32:	b01d      	add	sp, #116	; 0x74
 8002c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c38:	ab03      	add	r3, sp, #12
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	462a      	mov	r2, r5
 8002c3e:	4638      	mov	r0, r7
 8002c40:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <_svfiprintf_r+0x1fc>)
 8002c42:	a904      	add	r1, sp, #16
 8002c44:	f000 f87c 	bl	8002d40 <_printf_i>
 8002c48:	e7eb      	b.n	8002c22 <_svfiprintf_r+0x1c2>
 8002c4a:	bf00      	nop
 8002c4c:	08003464 	.word	0x08003464
 8002c50:	0800346a 	.word	0x0800346a
 8002c54:	0800346e 	.word	0x0800346e
 8002c58:	00000000 	.word	0x00000000
 8002c5c:	080029a9 	.word	0x080029a9

08002c60 <_printf_common>:
 8002c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c64:	4616      	mov	r6, r2
 8002c66:	4699      	mov	r9, r3
 8002c68:	688a      	ldr	r2, [r1, #8]
 8002c6a:	690b      	ldr	r3, [r1, #16]
 8002c6c:	4607      	mov	r7, r0
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	bfb8      	it	lt
 8002c72:	4613      	movlt	r3, r2
 8002c74:	6033      	str	r3, [r6, #0]
 8002c76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c7a:	460c      	mov	r4, r1
 8002c7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c80:	b10a      	cbz	r2, 8002c86 <_printf_common+0x26>
 8002c82:	3301      	adds	r3, #1
 8002c84:	6033      	str	r3, [r6, #0]
 8002c86:	6823      	ldr	r3, [r4, #0]
 8002c88:	0699      	lsls	r1, r3, #26
 8002c8a:	bf42      	ittt	mi
 8002c8c:	6833      	ldrmi	r3, [r6, #0]
 8002c8e:	3302      	addmi	r3, #2
 8002c90:	6033      	strmi	r3, [r6, #0]
 8002c92:	6825      	ldr	r5, [r4, #0]
 8002c94:	f015 0506 	ands.w	r5, r5, #6
 8002c98:	d106      	bne.n	8002ca8 <_printf_common+0x48>
 8002c9a:	f104 0a19 	add.w	sl, r4, #25
 8002c9e:	68e3      	ldr	r3, [r4, #12]
 8002ca0:	6832      	ldr	r2, [r6, #0]
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	42ab      	cmp	r3, r5
 8002ca6:	dc28      	bgt.n	8002cfa <_printf_common+0x9a>
 8002ca8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002cac:	1e13      	subs	r3, r2, #0
 8002cae:	6822      	ldr	r2, [r4, #0]
 8002cb0:	bf18      	it	ne
 8002cb2:	2301      	movne	r3, #1
 8002cb4:	0692      	lsls	r2, r2, #26
 8002cb6:	d42d      	bmi.n	8002d14 <_printf_common+0xb4>
 8002cb8:	4649      	mov	r1, r9
 8002cba:	4638      	mov	r0, r7
 8002cbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002cc0:	47c0      	blx	r8
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	d020      	beq.n	8002d08 <_printf_common+0xa8>
 8002cc6:	6823      	ldr	r3, [r4, #0]
 8002cc8:	68e5      	ldr	r5, [r4, #12]
 8002cca:	f003 0306 	and.w	r3, r3, #6
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	bf18      	it	ne
 8002cd2:	2500      	movne	r5, #0
 8002cd4:	6832      	ldr	r2, [r6, #0]
 8002cd6:	f04f 0600 	mov.w	r6, #0
 8002cda:	68a3      	ldr	r3, [r4, #8]
 8002cdc:	bf08      	it	eq
 8002cde:	1aad      	subeq	r5, r5, r2
 8002ce0:	6922      	ldr	r2, [r4, #16]
 8002ce2:	bf08      	it	eq
 8002ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	bfc4      	itt	gt
 8002cec:	1a9b      	subgt	r3, r3, r2
 8002cee:	18ed      	addgt	r5, r5, r3
 8002cf0:	341a      	adds	r4, #26
 8002cf2:	42b5      	cmp	r5, r6
 8002cf4:	d11a      	bne.n	8002d2c <_printf_common+0xcc>
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	e008      	b.n	8002d0c <_printf_common+0xac>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	4652      	mov	r2, sl
 8002cfe:	4649      	mov	r1, r9
 8002d00:	4638      	mov	r0, r7
 8002d02:	47c0      	blx	r8
 8002d04:	3001      	adds	r0, #1
 8002d06:	d103      	bne.n	8002d10 <_printf_common+0xb0>
 8002d08:	f04f 30ff 	mov.w	r0, #4294967295
 8002d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d10:	3501      	adds	r5, #1
 8002d12:	e7c4      	b.n	8002c9e <_printf_common+0x3e>
 8002d14:	2030      	movs	r0, #48	; 0x30
 8002d16:	18e1      	adds	r1, r4, r3
 8002d18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d22:	4422      	add	r2, r4
 8002d24:	3302      	adds	r3, #2
 8002d26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d2a:	e7c5      	b.n	8002cb8 <_printf_common+0x58>
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	4622      	mov	r2, r4
 8002d30:	4649      	mov	r1, r9
 8002d32:	4638      	mov	r0, r7
 8002d34:	47c0      	blx	r8
 8002d36:	3001      	adds	r0, #1
 8002d38:	d0e6      	beq.n	8002d08 <_printf_common+0xa8>
 8002d3a:	3601      	adds	r6, #1
 8002d3c:	e7d9      	b.n	8002cf2 <_printf_common+0x92>
	...

08002d40 <_printf_i>:
 8002d40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d44:	7e0f      	ldrb	r7, [r1, #24]
 8002d46:	4691      	mov	r9, r2
 8002d48:	2f78      	cmp	r7, #120	; 0x78
 8002d4a:	4680      	mov	r8, r0
 8002d4c:	460c      	mov	r4, r1
 8002d4e:	469a      	mov	sl, r3
 8002d50:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002d56:	d807      	bhi.n	8002d68 <_printf_i+0x28>
 8002d58:	2f62      	cmp	r7, #98	; 0x62
 8002d5a:	d80a      	bhi.n	8002d72 <_printf_i+0x32>
 8002d5c:	2f00      	cmp	r7, #0
 8002d5e:	f000 80d9 	beq.w	8002f14 <_printf_i+0x1d4>
 8002d62:	2f58      	cmp	r7, #88	; 0x58
 8002d64:	f000 80a4 	beq.w	8002eb0 <_printf_i+0x170>
 8002d68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d70:	e03a      	b.n	8002de8 <_printf_i+0xa8>
 8002d72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d76:	2b15      	cmp	r3, #21
 8002d78:	d8f6      	bhi.n	8002d68 <_printf_i+0x28>
 8002d7a:	a101      	add	r1, pc, #4	; (adr r1, 8002d80 <_printf_i+0x40>)
 8002d7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d80:	08002dd9 	.word	0x08002dd9
 8002d84:	08002ded 	.word	0x08002ded
 8002d88:	08002d69 	.word	0x08002d69
 8002d8c:	08002d69 	.word	0x08002d69
 8002d90:	08002d69 	.word	0x08002d69
 8002d94:	08002d69 	.word	0x08002d69
 8002d98:	08002ded 	.word	0x08002ded
 8002d9c:	08002d69 	.word	0x08002d69
 8002da0:	08002d69 	.word	0x08002d69
 8002da4:	08002d69 	.word	0x08002d69
 8002da8:	08002d69 	.word	0x08002d69
 8002dac:	08002efb 	.word	0x08002efb
 8002db0:	08002e1d 	.word	0x08002e1d
 8002db4:	08002edd 	.word	0x08002edd
 8002db8:	08002d69 	.word	0x08002d69
 8002dbc:	08002d69 	.word	0x08002d69
 8002dc0:	08002f1d 	.word	0x08002f1d
 8002dc4:	08002d69 	.word	0x08002d69
 8002dc8:	08002e1d 	.word	0x08002e1d
 8002dcc:	08002d69 	.word	0x08002d69
 8002dd0:	08002d69 	.word	0x08002d69
 8002dd4:	08002ee5 	.word	0x08002ee5
 8002dd8:	682b      	ldr	r3, [r5, #0]
 8002dda:	1d1a      	adds	r2, r3, #4
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	602a      	str	r2, [r5, #0]
 8002de0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002de4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0a4      	b.n	8002f36 <_printf_i+0x1f6>
 8002dec:	6820      	ldr	r0, [r4, #0]
 8002dee:	6829      	ldr	r1, [r5, #0]
 8002df0:	0606      	lsls	r6, r0, #24
 8002df2:	f101 0304 	add.w	r3, r1, #4
 8002df6:	d50a      	bpl.n	8002e0e <_printf_i+0xce>
 8002df8:	680e      	ldr	r6, [r1, #0]
 8002dfa:	602b      	str	r3, [r5, #0]
 8002dfc:	2e00      	cmp	r6, #0
 8002dfe:	da03      	bge.n	8002e08 <_printf_i+0xc8>
 8002e00:	232d      	movs	r3, #45	; 0x2d
 8002e02:	4276      	negs	r6, r6
 8002e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e08:	230a      	movs	r3, #10
 8002e0a:	485e      	ldr	r0, [pc, #376]	; (8002f84 <_printf_i+0x244>)
 8002e0c:	e019      	b.n	8002e42 <_printf_i+0x102>
 8002e0e:	680e      	ldr	r6, [r1, #0]
 8002e10:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e14:	602b      	str	r3, [r5, #0]
 8002e16:	bf18      	it	ne
 8002e18:	b236      	sxthne	r6, r6
 8002e1a:	e7ef      	b.n	8002dfc <_printf_i+0xbc>
 8002e1c:	682b      	ldr	r3, [r5, #0]
 8002e1e:	6820      	ldr	r0, [r4, #0]
 8002e20:	1d19      	adds	r1, r3, #4
 8002e22:	6029      	str	r1, [r5, #0]
 8002e24:	0601      	lsls	r1, r0, #24
 8002e26:	d501      	bpl.n	8002e2c <_printf_i+0xec>
 8002e28:	681e      	ldr	r6, [r3, #0]
 8002e2a:	e002      	b.n	8002e32 <_printf_i+0xf2>
 8002e2c:	0646      	lsls	r6, r0, #25
 8002e2e:	d5fb      	bpl.n	8002e28 <_printf_i+0xe8>
 8002e30:	881e      	ldrh	r6, [r3, #0]
 8002e32:	2f6f      	cmp	r7, #111	; 0x6f
 8002e34:	bf0c      	ite	eq
 8002e36:	2308      	moveq	r3, #8
 8002e38:	230a      	movne	r3, #10
 8002e3a:	4852      	ldr	r0, [pc, #328]	; (8002f84 <_printf_i+0x244>)
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e42:	6865      	ldr	r5, [r4, #4]
 8002e44:	2d00      	cmp	r5, #0
 8002e46:	bfa8      	it	ge
 8002e48:	6821      	ldrge	r1, [r4, #0]
 8002e4a:	60a5      	str	r5, [r4, #8]
 8002e4c:	bfa4      	itt	ge
 8002e4e:	f021 0104 	bicge.w	r1, r1, #4
 8002e52:	6021      	strge	r1, [r4, #0]
 8002e54:	b90e      	cbnz	r6, 8002e5a <_printf_i+0x11a>
 8002e56:	2d00      	cmp	r5, #0
 8002e58:	d04d      	beq.n	8002ef6 <_printf_i+0x1b6>
 8002e5a:	4615      	mov	r5, r2
 8002e5c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002e60:	fb03 6711 	mls	r7, r3, r1, r6
 8002e64:	5dc7      	ldrb	r7, [r0, r7]
 8002e66:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002e6a:	4637      	mov	r7, r6
 8002e6c:	42bb      	cmp	r3, r7
 8002e6e:	460e      	mov	r6, r1
 8002e70:	d9f4      	bls.n	8002e5c <_printf_i+0x11c>
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d10b      	bne.n	8002e8e <_printf_i+0x14e>
 8002e76:	6823      	ldr	r3, [r4, #0]
 8002e78:	07de      	lsls	r6, r3, #31
 8002e7a:	d508      	bpl.n	8002e8e <_printf_i+0x14e>
 8002e7c:	6923      	ldr	r3, [r4, #16]
 8002e7e:	6861      	ldr	r1, [r4, #4]
 8002e80:	4299      	cmp	r1, r3
 8002e82:	bfde      	ittt	le
 8002e84:	2330      	movle	r3, #48	; 0x30
 8002e86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e8e:	1b52      	subs	r2, r2, r5
 8002e90:	6122      	str	r2, [r4, #16]
 8002e92:	464b      	mov	r3, r9
 8002e94:	4621      	mov	r1, r4
 8002e96:	4640      	mov	r0, r8
 8002e98:	f8cd a000 	str.w	sl, [sp]
 8002e9c:	aa03      	add	r2, sp, #12
 8002e9e:	f7ff fedf 	bl	8002c60 <_printf_common>
 8002ea2:	3001      	adds	r0, #1
 8002ea4:	d14c      	bne.n	8002f40 <_printf_i+0x200>
 8002ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8002eaa:	b004      	add	sp, #16
 8002eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002eb0:	4834      	ldr	r0, [pc, #208]	; (8002f84 <_printf_i+0x244>)
 8002eb2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002eb6:	6829      	ldr	r1, [r5, #0]
 8002eb8:	6823      	ldr	r3, [r4, #0]
 8002eba:	f851 6b04 	ldr.w	r6, [r1], #4
 8002ebe:	6029      	str	r1, [r5, #0]
 8002ec0:	061d      	lsls	r5, r3, #24
 8002ec2:	d514      	bpl.n	8002eee <_printf_i+0x1ae>
 8002ec4:	07df      	lsls	r7, r3, #31
 8002ec6:	bf44      	itt	mi
 8002ec8:	f043 0320 	orrmi.w	r3, r3, #32
 8002ecc:	6023      	strmi	r3, [r4, #0]
 8002ece:	b91e      	cbnz	r6, 8002ed8 <_printf_i+0x198>
 8002ed0:	6823      	ldr	r3, [r4, #0]
 8002ed2:	f023 0320 	bic.w	r3, r3, #32
 8002ed6:	6023      	str	r3, [r4, #0]
 8002ed8:	2310      	movs	r3, #16
 8002eda:	e7af      	b.n	8002e3c <_printf_i+0xfc>
 8002edc:	6823      	ldr	r3, [r4, #0]
 8002ede:	f043 0320 	orr.w	r3, r3, #32
 8002ee2:	6023      	str	r3, [r4, #0]
 8002ee4:	2378      	movs	r3, #120	; 0x78
 8002ee6:	4828      	ldr	r0, [pc, #160]	; (8002f88 <_printf_i+0x248>)
 8002ee8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002eec:	e7e3      	b.n	8002eb6 <_printf_i+0x176>
 8002eee:	0659      	lsls	r1, r3, #25
 8002ef0:	bf48      	it	mi
 8002ef2:	b2b6      	uxthmi	r6, r6
 8002ef4:	e7e6      	b.n	8002ec4 <_printf_i+0x184>
 8002ef6:	4615      	mov	r5, r2
 8002ef8:	e7bb      	b.n	8002e72 <_printf_i+0x132>
 8002efa:	682b      	ldr	r3, [r5, #0]
 8002efc:	6826      	ldr	r6, [r4, #0]
 8002efe:	1d18      	adds	r0, r3, #4
 8002f00:	6961      	ldr	r1, [r4, #20]
 8002f02:	6028      	str	r0, [r5, #0]
 8002f04:	0635      	lsls	r5, r6, #24
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	d501      	bpl.n	8002f0e <_printf_i+0x1ce>
 8002f0a:	6019      	str	r1, [r3, #0]
 8002f0c:	e002      	b.n	8002f14 <_printf_i+0x1d4>
 8002f0e:	0670      	lsls	r0, r6, #25
 8002f10:	d5fb      	bpl.n	8002f0a <_printf_i+0x1ca>
 8002f12:	8019      	strh	r1, [r3, #0]
 8002f14:	2300      	movs	r3, #0
 8002f16:	4615      	mov	r5, r2
 8002f18:	6123      	str	r3, [r4, #16]
 8002f1a:	e7ba      	b.n	8002e92 <_printf_i+0x152>
 8002f1c:	682b      	ldr	r3, [r5, #0]
 8002f1e:	2100      	movs	r1, #0
 8002f20:	1d1a      	adds	r2, r3, #4
 8002f22:	602a      	str	r2, [r5, #0]
 8002f24:	681d      	ldr	r5, [r3, #0]
 8002f26:	6862      	ldr	r2, [r4, #4]
 8002f28:	4628      	mov	r0, r5
 8002f2a:	f000 f82f 	bl	8002f8c <memchr>
 8002f2e:	b108      	cbz	r0, 8002f34 <_printf_i+0x1f4>
 8002f30:	1b40      	subs	r0, r0, r5
 8002f32:	6060      	str	r0, [r4, #4]
 8002f34:	6863      	ldr	r3, [r4, #4]
 8002f36:	6123      	str	r3, [r4, #16]
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f3e:	e7a8      	b.n	8002e92 <_printf_i+0x152>
 8002f40:	462a      	mov	r2, r5
 8002f42:	4649      	mov	r1, r9
 8002f44:	4640      	mov	r0, r8
 8002f46:	6923      	ldr	r3, [r4, #16]
 8002f48:	47d0      	blx	sl
 8002f4a:	3001      	adds	r0, #1
 8002f4c:	d0ab      	beq.n	8002ea6 <_printf_i+0x166>
 8002f4e:	6823      	ldr	r3, [r4, #0]
 8002f50:	079b      	lsls	r3, r3, #30
 8002f52:	d413      	bmi.n	8002f7c <_printf_i+0x23c>
 8002f54:	68e0      	ldr	r0, [r4, #12]
 8002f56:	9b03      	ldr	r3, [sp, #12]
 8002f58:	4298      	cmp	r0, r3
 8002f5a:	bfb8      	it	lt
 8002f5c:	4618      	movlt	r0, r3
 8002f5e:	e7a4      	b.n	8002eaa <_printf_i+0x16a>
 8002f60:	2301      	movs	r3, #1
 8002f62:	4632      	mov	r2, r6
 8002f64:	4649      	mov	r1, r9
 8002f66:	4640      	mov	r0, r8
 8002f68:	47d0      	blx	sl
 8002f6a:	3001      	adds	r0, #1
 8002f6c:	d09b      	beq.n	8002ea6 <_printf_i+0x166>
 8002f6e:	3501      	adds	r5, #1
 8002f70:	68e3      	ldr	r3, [r4, #12]
 8002f72:	9903      	ldr	r1, [sp, #12]
 8002f74:	1a5b      	subs	r3, r3, r1
 8002f76:	42ab      	cmp	r3, r5
 8002f78:	dcf2      	bgt.n	8002f60 <_printf_i+0x220>
 8002f7a:	e7eb      	b.n	8002f54 <_printf_i+0x214>
 8002f7c:	2500      	movs	r5, #0
 8002f7e:	f104 0619 	add.w	r6, r4, #25
 8002f82:	e7f5      	b.n	8002f70 <_printf_i+0x230>
 8002f84:	08003475 	.word	0x08003475
 8002f88:	08003486 	.word	0x08003486

08002f8c <memchr>:
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	b510      	push	{r4, lr}
 8002f90:	b2c9      	uxtb	r1, r1
 8002f92:	4402      	add	r2, r0
 8002f94:	4293      	cmp	r3, r2
 8002f96:	4618      	mov	r0, r3
 8002f98:	d101      	bne.n	8002f9e <memchr+0x12>
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	e003      	b.n	8002fa6 <memchr+0x1a>
 8002f9e:	7804      	ldrb	r4, [r0, #0]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	428c      	cmp	r4, r1
 8002fa4:	d1f6      	bne.n	8002f94 <memchr+0x8>
 8002fa6:	bd10      	pop	{r4, pc}

08002fa8 <memcpy>:
 8002fa8:	440a      	add	r2, r1
 8002faa:	4291      	cmp	r1, r2
 8002fac:	f100 33ff 	add.w	r3, r0, #4294967295
 8002fb0:	d100      	bne.n	8002fb4 <memcpy+0xc>
 8002fb2:	4770      	bx	lr
 8002fb4:	b510      	push	{r4, lr}
 8002fb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fba:	4291      	cmp	r1, r2
 8002fbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fc0:	d1f9      	bne.n	8002fb6 <memcpy+0xe>
 8002fc2:	bd10      	pop	{r4, pc}

08002fc4 <memmove>:
 8002fc4:	4288      	cmp	r0, r1
 8002fc6:	b510      	push	{r4, lr}
 8002fc8:	eb01 0402 	add.w	r4, r1, r2
 8002fcc:	d902      	bls.n	8002fd4 <memmove+0x10>
 8002fce:	4284      	cmp	r4, r0
 8002fd0:	4623      	mov	r3, r4
 8002fd2:	d807      	bhi.n	8002fe4 <memmove+0x20>
 8002fd4:	1e43      	subs	r3, r0, #1
 8002fd6:	42a1      	cmp	r1, r4
 8002fd8:	d008      	beq.n	8002fec <memmove+0x28>
 8002fda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002fde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002fe2:	e7f8      	b.n	8002fd6 <memmove+0x12>
 8002fe4:	4601      	mov	r1, r0
 8002fe6:	4402      	add	r2, r0
 8002fe8:	428a      	cmp	r2, r1
 8002fea:	d100      	bne.n	8002fee <memmove+0x2a>
 8002fec:	bd10      	pop	{r4, pc}
 8002fee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002ff2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002ff6:	e7f7      	b.n	8002fe8 <memmove+0x24>

08002ff8 <_free_r>:
 8002ff8:	b538      	push	{r3, r4, r5, lr}
 8002ffa:	4605      	mov	r5, r0
 8002ffc:	2900      	cmp	r1, #0
 8002ffe:	d040      	beq.n	8003082 <_free_r+0x8a>
 8003000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003004:	1f0c      	subs	r4, r1, #4
 8003006:	2b00      	cmp	r3, #0
 8003008:	bfb8      	it	lt
 800300a:	18e4      	addlt	r4, r4, r3
 800300c:	f000 f910 	bl	8003230 <__malloc_lock>
 8003010:	4a1c      	ldr	r2, [pc, #112]	; (8003084 <_free_r+0x8c>)
 8003012:	6813      	ldr	r3, [r2, #0]
 8003014:	b933      	cbnz	r3, 8003024 <_free_r+0x2c>
 8003016:	6063      	str	r3, [r4, #4]
 8003018:	6014      	str	r4, [r2, #0]
 800301a:	4628      	mov	r0, r5
 800301c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003020:	f000 b90c 	b.w	800323c <__malloc_unlock>
 8003024:	42a3      	cmp	r3, r4
 8003026:	d908      	bls.n	800303a <_free_r+0x42>
 8003028:	6820      	ldr	r0, [r4, #0]
 800302a:	1821      	adds	r1, r4, r0
 800302c:	428b      	cmp	r3, r1
 800302e:	bf01      	itttt	eq
 8003030:	6819      	ldreq	r1, [r3, #0]
 8003032:	685b      	ldreq	r3, [r3, #4]
 8003034:	1809      	addeq	r1, r1, r0
 8003036:	6021      	streq	r1, [r4, #0]
 8003038:	e7ed      	b.n	8003016 <_free_r+0x1e>
 800303a:	461a      	mov	r2, r3
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	b10b      	cbz	r3, 8003044 <_free_r+0x4c>
 8003040:	42a3      	cmp	r3, r4
 8003042:	d9fa      	bls.n	800303a <_free_r+0x42>
 8003044:	6811      	ldr	r1, [r2, #0]
 8003046:	1850      	adds	r0, r2, r1
 8003048:	42a0      	cmp	r0, r4
 800304a:	d10b      	bne.n	8003064 <_free_r+0x6c>
 800304c:	6820      	ldr	r0, [r4, #0]
 800304e:	4401      	add	r1, r0
 8003050:	1850      	adds	r0, r2, r1
 8003052:	4283      	cmp	r3, r0
 8003054:	6011      	str	r1, [r2, #0]
 8003056:	d1e0      	bne.n	800301a <_free_r+0x22>
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	4401      	add	r1, r0
 800305e:	6011      	str	r1, [r2, #0]
 8003060:	6053      	str	r3, [r2, #4]
 8003062:	e7da      	b.n	800301a <_free_r+0x22>
 8003064:	d902      	bls.n	800306c <_free_r+0x74>
 8003066:	230c      	movs	r3, #12
 8003068:	602b      	str	r3, [r5, #0]
 800306a:	e7d6      	b.n	800301a <_free_r+0x22>
 800306c:	6820      	ldr	r0, [r4, #0]
 800306e:	1821      	adds	r1, r4, r0
 8003070:	428b      	cmp	r3, r1
 8003072:	bf01      	itttt	eq
 8003074:	6819      	ldreq	r1, [r3, #0]
 8003076:	685b      	ldreq	r3, [r3, #4]
 8003078:	1809      	addeq	r1, r1, r0
 800307a:	6021      	streq	r1, [r4, #0]
 800307c:	6063      	str	r3, [r4, #4]
 800307e:	6054      	str	r4, [r2, #4]
 8003080:	e7cb      	b.n	800301a <_free_r+0x22>
 8003082:	bd38      	pop	{r3, r4, r5, pc}
 8003084:	20000328 	.word	0x20000328

08003088 <sbrk_aligned>:
 8003088:	b570      	push	{r4, r5, r6, lr}
 800308a:	4e0e      	ldr	r6, [pc, #56]	; (80030c4 <sbrk_aligned+0x3c>)
 800308c:	460c      	mov	r4, r1
 800308e:	6831      	ldr	r1, [r6, #0]
 8003090:	4605      	mov	r5, r0
 8003092:	b911      	cbnz	r1, 800309a <sbrk_aligned+0x12>
 8003094:	f000 f8bc 	bl	8003210 <_sbrk_r>
 8003098:	6030      	str	r0, [r6, #0]
 800309a:	4621      	mov	r1, r4
 800309c:	4628      	mov	r0, r5
 800309e:	f000 f8b7 	bl	8003210 <_sbrk_r>
 80030a2:	1c43      	adds	r3, r0, #1
 80030a4:	d00a      	beq.n	80030bc <sbrk_aligned+0x34>
 80030a6:	1cc4      	adds	r4, r0, #3
 80030a8:	f024 0403 	bic.w	r4, r4, #3
 80030ac:	42a0      	cmp	r0, r4
 80030ae:	d007      	beq.n	80030c0 <sbrk_aligned+0x38>
 80030b0:	1a21      	subs	r1, r4, r0
 80030b2:	4628      	mov	r0, r5
 80030b4:	f000 f8ac 	bl	8003210 <_sbrk_r>
 80030b8:	3001      	adds	r0, #1
 80030ba:	d101      	bne.n	80030c0 <sbrk_aligned+0x38>
 80030bc:	f04f 34ff 	mov.w	r4, #4294967295
 80030c0:	4620      	mov	r0, r4
 80030c2:	bd70      	pop	{r4, r5, r6, pc}
 80030c4:	2000032c 	.word	0x2000032c

080030c8 <_malloc_r>:
 80030c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030cc:	1ccd      	adds	r5, r1, #3
 80030ce:	f025 0503 	bic.w	r5, r5, #3
 80030d2:	3508      	adds	r5, #8
 80030d4:	2d0c      	cmp	r5, #12
 80030d6:	bf38      	it	cc
 80030d8:	250c      	movcc	r5, #12
 80030da:	2d00      	cmp	r5, #0
 80030dc:	4607      	mov	r7, r0
 80030de:	db01      	blt.n	80030e4 <_malloc_r+0x1c>
 80030e0:	42a9      	cmp	r1, r5
 80030e2:	d905      	bls.n	80030f0 <_malloc_r+0x28>
 80030e4:	230c      	movs	r3, #12
 80030e6:	2600      	movs	r6, #0
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	4630      	mov	r0, r6
 80030ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030f0:	4e2e      	ldr	r6, [pc, #184]	; (80031ac <_malloc_r+0xe4>)
 80030f2:	f000 f89d 	bl	8003230 <__malloc_lock>
 80030f6:	6833      	ldr	r3, [r6, #0]
 80030f8:	461c      	mov	r4, r3
 80030fa:	bb34      	cbnz	r4, 800314a <_malloc_r+0x82>
 80030fc:	4629      	mov	r1, r5
 80030fe:	4638      	mov	r0, r7
 8003100:	f7ff ffc2 	bl	8003088 <sbrk_aligned>
 8003104:	1c43      	adds	r3, r0, #1
 8003106:	4604      	mov	r4, r0
 8003108:	d14d      	bne.n	80031a6 <_malloc_r+0xde>
 800310a:	6834      	ldr	r4, [r6, #0]
 800310c:	4626      	mov	r6, r4
 800310e:	2e00      	cmp	r6, #0
 8003110:	d140      	bne.n	8003194 <_malloc_r+0xcc>
 8003112:	6823      	ldr	r3, [r4, #0]
 8003114:	4631      	mov	r1, r6
 8003116:	4638      	mov	r0, r7
 8003118:	eb04 0803 	add.w	r8, r4, r3
 800311c:	f000 f878 	bl	8003210 <_sbrk_r>
 8003120:	4580      	cmp	r8, r0
 8003122:	d13a      	bne.n	800319a <_malloc_r+0xd2>
 8003124:	6821      	ldr	r1, [r4, #0]
 8003126:	3503      	adds	r5, #3
 8003128:	1a6d      	subs	r5, r5, r1
 800312a:	f025 0503 	bic.w	r5, r5, #3
 800312e:	3508      	adds	r5, #8
 8003130:	2d0c      	cmp	r5, #12
 8003132:	bf38      	it	cc
 8003134:	250c      	movcc	r5, #12
 8003136:	4638      	mov	r0, r7
 8003138:	4629      	mov	r1, r5
 800313a:	f7ff ffa5 	bl	8003088 <sbrk_aligned>
 800313e:	3001      	adds	r0, #1
 8003140:	d02b      	beq.n	800319a <_malloc_r+0xd2>
 8003142:	6823      	ldr	r3, [r4, #0]
 8003144:	442b      	add	r3, r5
 8003146:	6023      	str	r3, [r4, #0]
 8003148:	e00e      	b.n	8003168 <_malloc_r+0xa0>
 800314a:	6822      	ldr	r2, [r4, #0]
 800314c:	1b52      	subs	r2, r2, r5
 800314e:	d41e      	bmi.n	800318e <_malloc_r+0xc6>
 8003150:	2a0b      	cmp	r2, #11
 8003152:	d916      	bls.n	8003182 <_malloc_r+0xba>
 8003154:	1961      	adds	r1, r4, r5
 8003156:	42a3      	cmp	r3, r4
 8003158:	6025      	str	r5, [r4, #0]
 800315a:	bf18      	it	ne
 800315c:	6059      	strne	r1, [r3, #4]
 800315e:	6863      	ldr	r3, [r4, #4]
 8003160:	bf08      	it	eq
 8003162:	6031      	streq	r1, [r6, #0]
 8003164:	5162      	str	r2, [r4, r5]
 8003166:	604b      	str	r3, [r1, #4]
 8003168:	4638      	mov	r0, r7
 800316a:	f104 060b 	add.w	r6, r4, #11
 800316e:	f000 f865 	bl	800323c <__malloc_unlock>
 8003172:	f026 0607 	bic.w	r6, r6, #7
 8003176:	1d23      	adds	r3, r4, #4
 8003178:	1af2      	subs	r2, r6, r3
 800317a:	d0b6      	beq.n	80030ea <_malloc_r+0x22>
 800317c:	1b9b      	subs	r3, r3, r6
 800317e:	50a3      	str	r3, [r4, r2]
 8003180:	e7b3      	b.n	80030ea <_malloc_r+0x22>
 8003182:	6862      	ldr	r2, [r4, #4]
 8003184:	42a3      	cmp	r3, r4
 8003186:	bf0c      	ite	eq
 8003188:	6032      	streq	r2, [r6, #0]
 800318a:	605a      	strne	r2, [r3, #4]
 800318c:	e7ec      	b.n	8003168 <_malloc_r+0xa0>
 800318e:	4623      	mov	r3, r4
 8003190:	6864      	ldr	r4, [r4, #4]
 8003192:	e7b2      	b.n	80030fa <_malloc_r+0x32>
 8003194:	4634      	mov	r4, r6
 8003196:	6876      	ldr	r6, [r6, #4]
 8003198:	e7b9      	b.n	800310e <_malloc_r+0x46>
 800319a:	230c      	movs	r3, #12
 800319c:	4638      	mov	r0, r7
 800319e:	603b      	str	r3, [r7, #0]
 80031a0:	f000 f84c 	bl	800323c <__malloc_unlock>
 80031a4:	e7a1      	b.n	80030ea <_malloc_r+0x22>
 80031a6:	6025      	str	r5, [r4, #0]
 80031a8:	e7de      	b.n	8003168 <_malloc_r+0xa0>
 80031aa:	bf00      	nop
 80031ac:	20000328 	.word	0x20000328

080031b0 <_realloc_r>:
 80031b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031b4:	4680      	mov	r8, r0
 80031b6:	4614      	mov	r4, r2
 80031b8:	460e      	mov	r6, r1
 80031ba:	b921      	cbnz	r1, 80031c6 <_realloc_r+0x16>
 80031bc:	4611      	mov	r1, r2
 80031be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031c2:	f7ff bf81 	b.w	80030c8 <_malloc_r>
 80031c6:	b92a      	cbnz	r2, 80031d4 <_realloc_r+0x24>
 80031c8:	f7ff ff16 	bl	8002ff8 <_free_r>
 80031cc:	4625      	mov	r5, r4
 80031ce:	4628      	mov	r0, r5
 80031d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031d4:	f000 f838 	bl	8003248 <_malloc_usable_size_r>
 80031d8:	4284      	cmp	r4, r0
 80031da:	4607      	mov	r7, r0
 80031dc:	d802      	bhi.n	80031e4 <_realloc_r+0x34>
 80031de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80031e2:	d812      	bhi.n	800320a <_realloc_r+0x5a>
 80031e4:	4621      	mov	r1, r4
 80031e6:	4640      	mov	r0, r8
 80031e8:	f7ff ff6e 	bl	80030c8 <_malloc_r>
 80031ec:	4605      	mov	r5, r0
 80031ee:	2800      	cmp	r0, #0
 80031f0:	d0ed      	beq.n	80031ce <_realloc_r+0x1e>
 80031f2:	42bc      	cmp	r4, r7
 80031f4:	4622      	mov	r2, r4
 80031f6:	4631      	mov	r1, r6
 80031f8:	bf28      	it	cs
 80031fa:	463a      	movcs	r2, r7
 80031fc:	f7ff fed4 	bl	8002fa8 <memcpy>
 8003200:	4631      	mov	r1, r6
 8003202:	4640      	mov	r0, r8
 8003204:	f7ff fef8 	bl	8002ff8 <_free_r>
 8003208:	e7e1      	b.n	80031ce <_realloc_r+0x1e>
 800320a:	4635      	mov	r5, r6
 800320c:	e7df      	b.n	80031ce <_realloc_r+0x1e>
	...

08003210 <_sbrk_r>:
 8003210:	b538      	push	{r3, r4, r5, lr}
 8003212:	2300      	movs	r3, #0
 8003214:	4d05      	ldr	r5, [pc, #20]	; (800322c <_sbrk_r+0x1c>)
 8003216:	4604      	mov	r4, r0
 8003218:	4608      	mov	r0, r1
 800321a:	602b      	str	r3, [r5, #0]
 800321c:	f7fd fbec 	bl	80009f8 <_sbrk>
 8003220:	1c43      	adds	r3, r0, #1
 8003222:	d102      	bne.n	800322a <_sbrk_r+0x1a>
 8003224:	682b      	ldr	r3, [r5, #0]
 8003226:	b103      	cbz	r3, 800322a <_sbrk_r+0x1a>
 8003228:	6023      	str	r3, [r4, #0]
 800322a:	bd38      	pop	{r3, r4, r5, pc}
 800322c:	20000330 	.word	0x20000330

08003230 <__malloc_lock>:
 8003230:	4801      	ldr	r0, [pc, #4]	; (8003238 <__malloc_lock+0x8>)
 8003232:	f000 b811 	b.w	8003258 <__retarget_lock_acquire_recursive>
 8003236:	bf00      	nop
 8003238:	20000334 	.word	0x20000334

0800323c <__malloc_unlock>:
 800323c:	4801      	ldr	r0, [pc, #4]	; (8003244 <__malloc_unlock+0x8>)
 800323e:	f000 b80c 	b.w	800325a <__retarget_lock_release_recursive>
 8003242:	bf00      	nop
 8003244:	20000334 	.word	0x20000334

08003248 <_malloc_usable_size_r>:
 8003248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800324c:	1f18      	subs	r0, r3, #4
 800324e:	2b00      	cmp	r3, #0
 8003250:	bfbc      	itt	lt
 8003252:	580b      	ldrlt	r3, [r1, r0]
 8003254:	18c0      	addlt	r0, r0, r3
 8003256:	4770      	bx	lr

08003258 <__retarget_lock_acquire_recursive>:
 8003258:	4770      	bx	lr

0800325a <__retarget_lock_release_recursive>:
 800325a:	4770      	bx	lr

0800325c <_init>:
 800325c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325e:	bf00      	nop
 8003260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003262:	bc08      	pop	{r3}
 8003264:	469e      	mov	lr, r3
 8003266:	4770      	bx	lr

08003268 <_fini>:
 8003268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800326a:	bf00      	nop
 800326c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800326e:	bc08      	pop	{r3}
 8003270:	469e      	mov	lr, r3
 8003272:	4770      	bx	lr
