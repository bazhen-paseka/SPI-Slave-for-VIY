
SPI-Slave-for-VIY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003088  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08003194  08003194  00013194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800338c  0800338c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800338c  0800338c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800338c  0800338c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800338c  0800338c  0001338c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003390  08003390  00013390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08003394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000080  08003414  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08003414  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008115  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce7  00000000  00000000  000281be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  00029ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000828  00000000  00000000  0002a7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017987  00000000  00000000  0002afd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000abf6  00000000  00000000  00042957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008405c  00000000  00000000  0004d54d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d15a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002734  00000000  00000000  000d15fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	0800317c 	.word	0x0800317c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	0800317c 	.word	0x0800317c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000162:	4b10      	ldr	r3, [pc, #64]	; (80001a4 <MX_DMA_Init+0x48>)
 8000164:	695b      	ldr	r3, [r3, #20]
 8000166:	4a0f      	ldr	r2, [pc, #60]	; (80001a4 <MX_DMA_Init+0x48>)
 8000168:	f043 0301 	orr.w	r3, r3, #1
 800016c:	6153      	str	r3, [r2, #20]
 800016e:	4b0d      	ldr	r3, [pc, #52]	; (80001a4 <MX_DMA_Init+0x48>)
 8000170:	695b      	ldr	r3, [r3, #20]
 8000172:	f003 0301 	and.w	r3, r3, #1
 8000176:	607b      	str	r3, [r7, #4]
 8000178:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800017a:	2200      	movs	r2, #0
 800017c:	2100      	movs	r1, #0
 800017e:	200e      	movs	r0, #14
 8000180:	f000 fdff 	bl	8000d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000184:	200e      	movs	r0, #14
 8000186:	f000 fe18 	bl	8000dba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800018a:	2200      	movs	r2, #0
 800018c:	2100      	movs	r1, #0
 800018e:	200f      	movs	r0, #15
 8000190:	f000 fdf7 	bl	8000d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000194:	200f      	movs	r0, #15
 8000196:	f000 fe10 	bl	8000dba <HAL_NVIC_EnableIRQ>

}
 800019a:	bf00      	nop
 800019c:	3708      	adds	r7, #8
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	40021000 	.word	0x40021000

080001a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b088      	sub	sp, #32
 80001ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ae:	f107 0310 	add.w	r3, r7, #16
 80001b2:	2200      	movs	r2, #0
 80001b4:	601a      	str	r2, [r3, #0]
 80001b6:	605a      	str	r2, [r3, #4]
 80001b8:	609a      	str	r2, [r3, #8]
 80001ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001bc:	4b1d      	ldr	r3, [pc, #116]	; (8000234 <MX_GPIO_Init+0x8c>)
 80001be:	699b      	ldr	r3, [r3, #24]
 80001c0:	4a1c      	ldr	r2, [pc, #112]	; (8000234 <MX_GPIO_Init+0x8c>)
 80001c2:	f043 0320 	orr.w	r3, r3, #32
 80001c6:	6193      	str	r3, [r2, #24]
 80001c8:	4b1a      	ldr	r3, [pc, #104]	; (8000234 <MX_GPIO_Init+0x8c>)
 80001ca:	699b      	ldr	r3, [r3, #24]
 80001cc:	f003 0320 	and.w	r3, r3, #32
 80001d0:	60fb      	str	r3, [r7, #12]
 80001d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001d4:	4b17      	ldr	r3, [pc, #92]	; (8000234 <MX_GPIO_Init+0x8c>)
 80001d6:	699b      	ldr	r3, [r3, #24]
 80001d8:	4a16      	ldr	r2, [pc, #88]	; (8000234 <MX_GPIO_Init+0x8c>)
 80001da:	f043 0304 	orr.w	r3, r3, #4
 80001de:	6193      	str	r3, [r2, #24]
 80001e0:	4b14      	ldr	r3, [pc, #80]	; (8000234 <MX_GPIO_Init+0x8c>)
 80001e2:	699b      	ldr	r3, [r3, #24]
 80001e4:	f003 0304 	and.w	r3, r3, #4
 80001e8:	60bb      	str	r3, [r7, #8]
 80001ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001ec:	4b11      	ldr	r3, [pc, #68]	; (8000234 <MX_GPIO_Init+0x8c>)
 80001ee:	699b      	ldr	r3, [r3, #24]
 80001f0:	4a10      	ldr	r2, [pc, #64]	; (8000234 <MX_GPIO_Init+0x8c>)
 80001f2:	f043 0308 	orr.w	r3, r3, #8
 80001f6:	6193      	str	r3, [r2, #24]
 80001f8:	4b0e      	ldr	r3, [pc, #56]	; (8000234 <MX_GPIO_Init+0x8c>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	f003 0308 	and.w	r3, r3, #8
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000204:	2200      	movs	r2, #0
 8000206:	2102      	movs	r1, #2
 8000208:	480b      	ldr	r0, [pc, #44]	; (8000238 <MX_GPIO_Init+0x90>)
 800020a:	f001 f963 	bl	80014d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800020e:	2302      	movs	r3, #2
 8000210:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000212:	2311      	movs	r3, #17
 8000214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000216:	2300      	movs	r3, #0
 8000218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800021a:	2302      	movs	r3, #2
 800021c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800021e:	f107 0310 	add.w	r3, r7, #16
 8000222:	4619      	mov	r1, r3
 8000224:	4804      	ldr	r0, [pc, #16]	; (8000238 <MX_GPIO_Init+0x90>)
 8000226:	f000 ffd1 	bl	80011cc <HAL_GPIO_Init>

}
 800022a:	bf00      	nop
 800022c:	3720      	adds	r7, #32
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	40021000 	.word	0x40021000
 8000238:	40010800 	.word	0x40010800

0800023c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000242:	f000 fc41 	bl	8000ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000246:	f000 f971 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024a:	f7ff ffad 	bl	80001a8 <MX_GPIO_Init>
  MX_DMA_Init();
 800024e:	f7ff ff85 	bl	800015c <MX_DMA_Init>
  MX_SPI2_Init();
 8000252:	f000 fa21 	bl	8000698 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000256:	f000 fb9b 	bl	8000990 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	sprintf(DataChar,"\r\n\r\n\tSPI+DMA SLAVE for VIY.UA\r\n" );
 800025a:	4999      	ldr	r1, [pc, #612]	; (80004c0 <main+0x284>)
 800025c:	4899      	ldr	r0, [pc, #612]	; (80004c4 <main+0x288>)
 800025e:	f002 fb13 	bl	8002888 <siprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 8000262:	4898      	ldr	r0, [pc, #608]	; (80004c4 <main+0x288>)
 8000264:	f7ff ff72 	bl	800014c <strlen>
 8000268:	4603      	mov	r3, r0
 800026a:	b29a      	uxth	r2, r3
 800026c:	2364      	movs	r3, #100	; 0x64
 800026e:	4995      	ldr	r1, [pc, #596]	; (80004c4 <main+0x288>)
 8000270:	4895      	ldr	r0, [pc, #596]	; (80004c8 <main+0x28c>)
 8000272:	f002 f938 	bl	80024e6 <HAL_UART_Transmit>

	#define DATE_as_int_str 	(__DATE__)
	#define TIME_as_int_str 	(__TIME__)
	sprintf(DataChar,"\tBuild: %s. Time: %s." , DATE_as_int_str , TIME_as_int_str ) ;
 8000276:	4b95      	ldr	r3, [pc, #596]	; (80004cc <main+0x290>)
 8000278:	4a95      	ldr	r2, [pc, #596]	; (80004d0 <main+0x294>)
 800027a:	4996      	ldr	r1, [pc, #600]	; (80004d4 <main+0x298>)
 800027c:	4891      	ldr	r0, [pc, #580]	; (80004c4 <main+0x288>)
 800027e:	f002 fb03 	bl	8002888 <siprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 8000282:	4890      	ldr	r0, [pc, #576]	; (80004c4 <main+0x288>)
 8000284:	f7ff ff62 	bl	800014c <strlen>
 8000288:	4603      	mov	r3, r0
 800028a:	b29a      	uxth	r2, r3
 800028c:	2364      	movs	r3, #100	; 0x64
 800028e:	498d      	ldr	r1, [pc, #564]	; (80004c4 <main+0x288>)
 8000290:	488d      	ldr	r0, [pc, #564]	; (80004c8 <main+0x28c>)
 8000292:	f002 f928 	bl	80024e6 <HAL_UART_Transmit>

	sprintf(DataChar,"\r\n\tfor debug: UART1 115200/8-N-1\r\n" ) ;
 8000296:	4990      	ldr	r1, [pc, #576]	; (80004d8 <main+0x29c>)
 8000298:	488a      	ldr	r0, [pc, #552]	; (80004c4 <main+0x288>)
 800029a:	f002 faf5 	bl	8002888 <siprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 800029e:	4889      	ldr	r0, [pc, #548]	; (80004c4 <main+0x288>)
 80002a0:	f7ff ff54 	bl	800014c <strlen>
 80002a4:	4603      	mov	r3, r0
 80002a6:	b29a      	uxth	r2, r3
 80002a8:	2364      	movs	r3, #100	; 0x64
 80002aa:	4986      	ldr	r1, [pc, #536]	; (80004c4 <main+0x288>)
 80002ac:	4886      	ldr	r0, [pc, #536]	; (80004c8 <main+0x28c>)
 80002ae:	f002 f91a 	bl	80024e6 <HAL_UART_Transmit>

	snprintf(DataChar, BUFFERSIZE + 7 , "1Tx: %s\r\n", aTxBuffer ) ;
 80002b2:	4b8a      	ldr	r3, [pc, #552]	; (80004dc <main+0x2a0>)
 80002b4:	4a8a      	ldr	r2, [pc, #552]	; (80004e0 <main+0x2a4>)
 80002b6:	210f      	movs	r1, #15
 80002b8:	4882      	ldr	r0, [pc, #520]	; (80004c4 <main+0x288>)
 80002ba:	f002 fab1 	bl	8002820 <sniprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 80002be:	4881      	ldr	r0, [pc, #516]	; (80004c4 <main+0x288>)
 80002c0:	f7ff ff44 	bl	800014c <strlen>
 80002c4:	4603      	mov	r3, r0
 80002c6:	b29a      	uxth	r2, r3
 80002c8:	2364      	movs	r3, #100	; 0x64
 80002ca:	497e      	ldr	r1, [pc, #504]	; (80004c4 <main+0x288>)
 80002cc:	487e      	ldr	r0, [pc, #504]	; (80004c8 <main+0x28c>)
 80002ce:	f002 f90a 	bl	80024e6 <HAL_UART_Transmit>

	snprintf(DataChar, BUFFERSIZE + 7 , "1Rx: %s\r\n", aRxBuffer ) ;
 80002d2:	4b84      	ldr	r3, [pc, #528]	; (80004e4 <main+0x2a8>)
 80002d4:	4a84      	ldr	r2, [pc, #528]	; (80004e8 <main+0x2ac>)
 80002d6:	210f      	movs	r1, #15
 80002d8:	487a      	ldr	r0, [pc, #488]	; (80004c4 <main+0x288>)
 80002da:	f002 faa1 	bl	8002820 <sniprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 80002de:	4879      	ldr	r0, [pc, #484]	; (80004c4 <main+0x288>)
 80002e0:	f7ff ff34 	bl	800014c <strlen>
 80002e4:	4603      	mov	r3, r0
 80002e6:	b29a      	uxth	r2, r3
 80002e8:	2364      	movs	r3, #100	; 0x64
 80002ea:	4976      	ldr	r1, [pc, #472]	; (80004c4 <main+0x288>)
 80002ec:	4876      	ldr	r0, [pc, #472]	; (80004c8 <main+0x28c>)
 80002ee:	f002 f8fa 	bl	80024e6 <HAL_UART_Transmit>
//	/* SPI block is enabled prior calling SPI transmit/receive functions, in order to get CLK signal properly pulled down.
//	 Otherwise, SPI CLK signal is not clean on this board and leads to errors during transfer */
//	__HAL_SPI_ENABLE(&SpiHandle);

//	__HAL_SPI_ENABLE(&hspi2);
	sprintf(DataChar,"SPI_TransmitReceive_DMA Start... " ) ;
 80002f2:	497e      	ldr	r1, [pc, #504]	; (80004ec <main+0x2b0>)
 80002f4:	4873      	ldr	r0, [pc, #460]	; (80004c4 <main+0x288>)
 80002f6:	f002 fac7 	bl	8002888 <siprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 80002fa:	4872      	ldr	r0, [pc, #456]	; (80004c4 <main+0x288>)
 80002fc:	f7ff ff26 	bl	800014c <strlen>
 8000300:	4603      	mov	r3, r0
 8000302:	b29a      	uxth	r2, r3
 8000304:	2364      	movs	r3, #100	; 0x64
 8000306:	496f      	ldr	r1, [pc, #444]	; (80004c4 <main+0x288>)
 8000308:	486f      	ldr	r0, [pc, #444]	; (80004c8 <main+0x28c>)
 800030a:	f002 f8ec 	bl	80024e6 <HAL_UART_Transmit>
//	if(HAL_SPI_TransmitReceive_DMA(&SpiHandle, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, BUFFERSIZE) != HAL_OK) {
	if(HAL_SPI_TransmitReceive_DMA(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, BUFFERSIZE) != HAL_OK) {
 800030e:	2308      	movs	r3, #8
 8000310:	4a74      	ldr	r2, [pc, #464]	; (80004e4 <main+0x2a8>)
 8000312:	4972      	ldr	r1, [pc, #456]	; (80004dc <main+0x2a0>)
 8000314:	4876      	ldr	r0, [pc, #472]	; (80004f0 <main+0x2b4>)
 8000316:	f001 fdad 	bl	8001e74 <HAL_SPI_TransmitReceive_DMA>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d00e      	beq.n	800033e <main+0x102>
		sprintf(DataChar," - FAIL\r\n" ) ;
 8000320:	4974      	ldr	r1, [pc, #464]	; (80004f4 <main+0x2b8>)
 8000322:	4868      	ldr	r0, [pc, #416]	; (80004c4 <main+0x288>)
 8000324:	f002 fab0 	bl	8002888 <siprintf>
		HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 8000328:	4866      	ldr	r0, [pc, #408]	; (80004c4 <main+0x288>)
 800032a:	f7ff ff0f 	bl	800014c <strlen>
 800032e:	4603      	mov	r3, r0
 8000330:	b29a      	uxth	r2, r3
 8000332:	2364      	movs	r3, #100	; 0x64
 8000334:	4963      	ldr	r1, [pc, #396]	; (80004c4 <main+0x288>)
 8000336:	4864      	ldr	r0, [pc, #400]	; (80004c8 <main+0x28c>)
 8000338:	f002 f8d5 	bl	80024e6 <HAL_UART_Transmit>
 800033c:	e00d      	b.n	800035a <main+0x11e>
	} else {
		sprintf(DataChar," - Ok.\r\n" ) ;
 800033e:	496e      	ldr	r1, [pc, #440]	; (80004f8 <main+0x2bc>)
 8000340:	4860      	ldr	r0, [pc, #384]	; (80004c4 <main+0x288>)
 8000342:	f002 faa1 	bl	8002888 <siprintf>
		HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 8000346:	485f      	ldr	r0, [pc, #380]	; (80004c4 <main+0x288>)
 8000348:	f7ff ff00 	bl	800014c <strlen>
 800034c:	4603      	mov	r3, r0
 800034e:	b29a      	uxth	r2, r3
 8000350:	2364      	movs	r3, #100	; 0x64
 8000352:	495c      	ldr	r1, [pc, #368]	; (80004c4 <main+0x288>)
 8000354:	485c      	ldr	r0, [pc, #368]	; (80004c8 <main+0x28c>)
 8000356:	f002 f8c6 	bl	80024e6 <HAL_UART_Transmit>
	}

	cnt_i = 0;
 800035a:	4b68      	ldr	r3, [pc, #416]	; (80004fc <main+0x2c0>)
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
	while (wTransferState == TRANSFER_WAIT) {
 8000360:	e01a      	b.n	8000398 <main+0x15c>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000362:	2102      	movs	r1, #2
 8000364:	4866      	ldr	r0, [pc, #408]	; (8000500 <main+0x2c4>)
 8000366:	f001 f8cd 	bl	8001504 <HAL_GPIO_TogglePin>
		sprintf(DataChar,"  TRANSFER_WAIT.. %d\r", cnt_i++ ) ;
 800036a:	4b64      	ldr	r3, [pc, #400]	; (80004fc <main+0x2c0>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	1c5a      	adds	r2, r3, #1
 8000370:	4962      	ldr	r1, [pc, #392]	; (80004fc <main+0x2c0>)
 8000372:	600a      	str	r2, [r1, #0]
 8000374:	461a      	mov	r2, r3
 8000376:	4963      	ldr	r1, [pc, #396]	; (8000504 <main+0x2c8>)
 8000378:	4852      	ldr	r0, [pc, #328]	; (80004c4 <main+0x288>)
 800037a:	f002 fa85 	bl	8002888 <siprintf>
		HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 800037e:	4851      	ldr	r0, [pc, #324]	; (80004c4 <main+0x288>)
 8000380:	f7ff fee4 	bl	800014c <strlen>
 8000384:	4603      	mov	r3, r0
 8000386:	b29a      	uxth	r2, r3
 8000388:	2364      	movs	r3, #100	; 0x64
 800038a:	494e      	ldr	r1, [pc, #312]	; (80004c4 <main+0x288>)
 800038c:	484e      	ldr	r0, [pc, #312]	; (80004c8 <main+0x28c>)
 800038e:	f002 f8aa 	bl	80024e6 <HAL_UART_Transmit>
		HAL_Delay(100);
 8000392:	2064      	movs	r0, #100	; 0x64
 8000394:	f000 fbfa 	bl	8000b8c <HAL_Delay>
	while (wTransferState == TRANSFER_WAIT) {
 8000398:	4b5b      	ldr	r3, [pc, #364]	; (8000508 <main+0x2cc>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0e0      	beq.n	8000362 <main+0x126>
	}

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 80003a0:	2201      	movs	r2, #1
 80003a2:	2102      	movs	r1, #2
 80003a4:	4856      	ldr	r0, [pc, #344]	; (8000500 <main+0x2c4>)
 80003a6:	f001 f895 	bl	80014d4 <HAL_GPIO_WritePin>
	sprintf(DataChar,"\r\nTRANSFER_COMPLETED\r\n" ) ;
 80003aa:	4958      	ldr	r1, [pc, #352]	; (800050c <main+0x2d0>)
 80003ac:	4845      	ldr	r0, [pc, #276]	; (80004c4 <main+0x288>)
 80003ae:	f002 fa6b 	bl	8002888 <siprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 80003b2:	4844      	ldr	r0, [pc, #272]	; (80004c4 <main+0x288>)
 80003b4:	f7ff feca 	bl	800014c <strlen>
 80003b8:	4603      	mov	r3, r0
 80003ba:	b29a      	uxth	r2, r3
 80003bc:	2364      	movs	r3, #100	; 0x64
 80003be:	4941      	ldr	r1, [pc, #260]	; (80004c4 <main+0x288>)
 80003c0:	4841      	ldr	r0, [pc, #260]	; (80004c8 <main+0x28c>)
 80003c2:	f002 f890 	bl	80024e6 <HAL_UART_Transmit>

	snprintf(DataChar, BUFFERSIZE + 7 , "2Tx: %s\r\n", aTxBuffer ) ;
 80003c6:	4b45      	ldr	r3, [pc, #276]	; (80004dc <main+0x2a0>)
 80003c8:	4a51      	ldr	r2, [pc, #324]	; (8000510 <main+0x2d4>)
 80003ca:	210f      	movs	r1, #15
 80003cc:	483d      	ldr	r0, [pc, #244]	; (80004c4 <main+0x288>)
 80003ce:	f002 fa27 	bl	8002820 <sniprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 80003d2:	483c      	ldr	r0, [pc, #240]	; (80004c4 <main+0x288>)
 80003d4:	f7ff feba 	bl	800014c <strlen>
 80003d8:	4603      	mov	r3, r0
 80003da:	b29a      	uxth	r2, r3
 80003dc:	2364      	movs	r3, #100	; 0x64
 80003de:	4939      	ldr	r1, [pc, #228]	; (80004c4 <main+0x288>)
 80003e0:	4839      	ldr	r0, [pc, #228]	; (80004c8 <main+0x28c>)
 80003e2:	f002 f880 	bl	80024e6 <HAL_UART_Transmit>

	sprintf(DataChar,"2Rx: " ) ;
 80003e6:	494b      	ldr	r1, [pc, #300]	; (8000514 <main+0x2d8>)
 80003e8:	4836      	ldr	r0, [pc, #216]	; (80004c4 <main+0x288>)
 80003ea:	f002 fa4d 	bl	8002888 <siprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 80003ee:	4835      	ldr	r0, [pc, #212]	; (80004c4 <main+0x288>)
 80003f0:	f7ff feac 	bl	800014c <strlen>
 80003f4:	4603      	mov	r3, r0
 80003f6:	b29a      	uxth	r2, r3
 80003f8:	2364      	movs	r3, #100	; 0x64
 80003fa:	4932      	ldr	r1, [pc, #200]	; (80004c4 <main+0x288>)
 80003fc:	4832      	ldr	r0, [pc, #200]	; (80004c8 <main+0x28c>)
 80003fe:	f002 f872 	bl	80024e6 <HAL_UART_Transmit>
	snprintf(DataChar, BUFFERSIZE + 1 , "%s", aRxBuffer ) ;
 8000402:	4b38      	ldr	r3, [pc, #224]	; (80004e4 <main+0x2a8>)
 8000404:	4a44      	ldr	r2, [pc, #272]	; (8000518 <main+0x2dc>)
 8000406:	2109      	movs	r1, #9
 8000408:	482e      	ldr	r0, [pc, #184]	; (80004c4 <main+0x288>)
 800040a:	f002 fa09 	bl	8002820 <sniprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 800040e:	482d      	ldr	r0, [pc, #180]	; (80004c4 <main+0x288>)
 8000410:	f7ff fe9c 	bl	800014c <strlen>
 8000414:	4603      	mov	r3, r0
 8000416:	b29a      	uxth	r2, r3
 8000418:	2364      	movs	r3, #100	; 0x64
 800041a:	492a      	ldr	r1, [pc, #168]	; (80004c4 <main+0x288>)
 800041c:	482a      	ldr	r0, [pc, #168]	; (80004c8 <main+0x28c>)
 800041e:	f002 f862 	bl	80024e6 <HAL_UART_Transmit>
	sprintf(DataChar,"\r\n" ) ;
 8000422:	493e      	ldr	r1, [pc, #248]	; (800051c <main+0x2e0>)
 8000424:	4827      	ldr	r0, [pc, #156]	; (80004c4 <main+0x288>)
 8000426:	f002 fa2f 	bl	8002888 <siprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 800042a:	4826      	ldr	r0, [pc, #152]	; (80004c4 <main+0x288>)
 800042c:	f7ff fe8e 	bl	800014c <strlen>
 8000430:	4603      	mov	r3, r0
 8000432:	b29a      	uxth	r2, r3
 8000434:	2364      	movs	r3, #100	; 0x64
 8000436:	4923      	ldr	r1, [pc, #140]	; (80004c4 <main+0x288>)
 8000438:	4823      	ldr	r0, [pc, #140]	; (80004c8 <main+0x28c>)
 800043a:	f002 f854 	bl	80024e6 <HAL_UART_Transmit>

	uint16_t buffer_cmp_res = 0;
 800043e:	2300      	movs	r3, #0
 8000440:	80fb      	strh	r3, [r7, #6]

	switch(wTransferState) {
 8000442:	4b31      	ldr	r3, [pc, #196]	; (8000508 <main+0x2cc>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	2b01      	cmp	r3, #1
 8000448:	d137      	bne.n	80004ba <main+0x27e>
		case TRANSFER_COMPLETE :
			buffer_cmp_res = BufferCmp((uint8_t*)aTxBuffer, (uint8_t*)aRxBuffer, BUFFERSIZE);
 800044a:	2208      	movs	r2, #8
 800044c:	4925      	ldr	r1, [pc, #148]	; (80004e4 <main+0x2a8>)
 800044e:	4823      	ldr	r0, [pc, #140]	; (80004dc <main+0x2a0>)
 8000450:	f000 f8fc 	bl	800064c <BufferCmp>
 8000454:	4603      	mov	r3, r0
 8000456:	80fb      	strh	r3, [r7, #6]
			sprintf(DataChar,"buffer_cmp_res= %d\r\n", buffer_cmp_res ) ;
 8000458:	88fb      	ldrh	r3, [r7, #6]
 800045a:	461a      	mov	r2, r3
 800045c:	4930      	ldr	r1, [pc, #192]	; (8000520 <main+0x2e4>)
 800045e:	4819      	ldr	r0, [pc, #100]	; (80004c4 <main+0x288>)
 8000460:	f002 fa12 	bl	8002888 <siprintf>
			HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 8000464:	4817      	ldr	r0, [pc, #92]	; (80004c4 <main+0x288>)
 8000466:	f7ff fe71 	bl	800014c <strlen>
 800046a:	4603      	mov	r3, r0
 800046c:	b29a      	uxth	r2, r3
 800046e:	2364      	movs	r3, #100	; 0x64
 8000470:	4914      	ldr	r1, [pc, #80]	; (80004c4 <main+0x288>)
 8000472:	4815      	ldr	r0, [pc, #84]	; (80004c8 <main+0x28c>)
 8000474:	f002 f837 	bl	80024e6 <HAL_UART_Transmit>

		  if(buffer_cmp_res)  {
 8000478:	88fb      	ldrh	r3, [r7, #6]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d00e      	beq.n	800049c <main+0x260>
				sprintf(DataChar,"Buffer cmp - Wrong.\r\n") ;
 800047e:	4929      	ldr	r1, [pc, #164]	; (8000524 <main+0x2e8>)
 8000480:	4810      	ldr	r0, [pc, #64]	; (80004c4 <main+0x288>)
 8000482:	f002 fa01 	bl	8002888 <siprintf>
				HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 8000486:	480f      	ldr	r0, [pc, #60]	; (80004c4 <main+0x288>)
 8000488:	f7ff fe60 	bl	800014c <strlen>
 800048c:	4603      	mov	r3, r0
 800048e:	b29a      	uxth	r2, r3
 8000490:	2364      	movs	r3, #100	; 0x64
 8000492:	490c      	ldr	r1, [pc, #48]	; (80004c4 <main+0x288>)
 8000494:	480c      	ldr	r0, [pc, #48]	; (80004c8 <main+0x28c>)
 8000496:	f002 f826 	bl	80024e6 <HAL_UART_Transmit>
		  } else {
				sprintf(DataChar,"Buffer cmp - Successfully.\r\n") ;
				HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
		  }
		break;
 800049a:	e00f      	b.n	80004bc <main+0x280>
				sprintf(DataChar,"Buffer cmp - Successfully.\r\n") ;
 800049c:	4922      	ldr	r1, [pc, #136]	; (8000528 <main+0x2ec>)
 800049e:	4809      	ldr	r0, [pc, #36]	; (80004c4 <main+0x288>)
 80004a0:	f002 f9f2 	bl	8002888 <siprintf>
				HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 80004a4:	4807      	ldr	r0, [pc, #28]	; (80004c4 <main+0x288>)
 80004a6:	f7ff fe51 	bl	800014c <strlen>
 80004aa:	4603      	mov	r3, r0
 80004ac:	b29a      	uxth	r2, r3
 80004ae:	2364      	movs	r3, #100	; 0x64
 80004b0:	4904      	ldr	r1, [pc, #16]	; (80004c4 <main+0x288>)
 80004b2:	4805      	ldr	r0, [pc, #20]	; (80004c8 <main+0x28c>)
 80004b4:	f002 f817 	bl	80024e6 <HAL_UART_Transmit>
		break;
 80004b8:	e000      	b.n	80004bc <main+0x280>
		default: {} break;
 80004ba:	bf00      	nop

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004bc:	e7fe      	b.n	80004bc <main+0x280>
 80004be:	bf00      	nop
 80004c0:	08003194 	.word	0x08003194
 80004c4:	2000009c 	.word	0x2000009c
 80004c8:	20000288 	.word	0x20000288
 80004cc:	080031b4 	.word	0x080031b4
 80004d0:	080031c0 	.word	0x080031c0
 80004d4:	080031cc 	.word	0x080031cc
 80004d8:	080031e4 	.word	0x080031e4
 80004dc:	20000000 	.word	0x20000000
 80004e0:	08003208 	.word	0x08003208
 80004e4:	20000008 	.word	0x20000008
 80004e8:	08003214 	.word	0x08003214
 80004ec:	08003220 	.word	0x08003220
 80004f0:	200001a4 	.word	0x200001a4
 80004f4:	08003244 	.word	0x08003244
 80004f8:	08003250 	.word	0x08003250
 80004fc:	200001a0 	.word	0x200001a0
 8000500:	40010800 	.word	0x40010800
 8000504:	0800325c 	.word	0x0800325c
 8000508:	2000019c 	.word	0x2000019c
 800050c:	08003274 	.word	0x08003274
 8000510:	0800328c 	.word	0x0800328c
 8000514:	08003298 	.word	0x08003298
 8000518:	080032a0 	.word	0x080032a0
 800051c:	080032a4 	.word	0x080032a4
 8000520:	080032a8 	.word	0x080032a8
 8000524:	080032c0 	.word	0x080032c0
 8000528:	080032d8 	.word	0x080032d8

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b090      	sub	sp, #64	; 0x40
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0318 	add.w	r3, r7, #24
 8000536:	2228      	movs	r2, #40	; 0x28
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f002 f968 	bl	8002810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
 800054c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800054e:	2301      	movs	r3, #1
 8000550:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000552:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000556:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000558:	2300      	movs	r3, #0
 800055a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055c:	2301      	movs	r3, #1
 800055e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000560:	2302      	movs	r3, #2
 8000562:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000568:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800056a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800056e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	f107 0318 	add.w	r3, r7, #24
 8000574:	4618      	mov	r0, r3
 8000576:	f000 ffdf 	bl	8001538 <HAL_RCC_OscConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000580:	f000 f885 	bl	800068e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000584:	230f      	movs	r3, #15
 8000586:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000588:	2302      	movs	r3, #2
 800058a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000594:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2102      	movs	r1, #2
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 fa4c 	bl	8001a3c <HAL_RCC_ClockConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005aa:	f000 f870 	bl	800068e <Error_Handler>
  }
}
 80005ae:	bf00      	nop
 80005b0:	3740      	adds	r7, #64	; 0x40
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2102      	movs	r1, #2
 80005c4:	480b      	ldr	r0, [pc, #44]	; (80005f4 <HAL_SPI_TxRxCpltCallback+0x3c>)
 80005c6:	f000 ff85 	bl	80014d4 <HAL_GPIO_WritePin>
	sprintf(DataChar,"Cplt: TRANSFER_COMPLETE\r\n" ) ;
 80005ca:	490b      	ldr	r1, [pc, #44]	; (80005f8 <HAL_SPI_TxRxCpltCallback+0x40>)
 80005cc:	480b      	ldr	r0, [pc, #44]	; (80005fc <HAL_SPI_TxRxCpltCallback+0x44>)
 80005ce:	f002 f95b 	bl	8002888 <siprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 80005d2:	480a      	ldr	r0, [pc, #40]	; (80005fc <HAL_SPI_TxRxCpltCallback+0x44>)
 80005d4:	f7ff fdba 	bl	800014c <strlen>
 80005d8:	4603      	mov	r3, r0
 80005da:	b29a      	uxth	r2, r3
 80005dc:	2364      	movs	r3, #100	; 0x64
 80005de:	4907      	ldr	r1, [pc, #28]	; (80005fc <HAL_SPI_TxRxCpltCallback+0x44>)
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <HAL_SPI_TxRxCpltCallback+0x48>)
 80005e2:	f001 ff80 	bl	80024e6 <HAL_UART_Transmit>
	wTransferState = TRANSFER_COMPLETE;
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <HAL_SPI_TxRxCpltCallback+0x4c>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	601a      	str	r2, [r3, #0]
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40010800 	.word	0x40010800
 80005f8:	080032f8 	.word	0x080032f8
 80005fc:	2000009c 	.word	0x2000009c
 8000600:	20000288 	.word	0x20000288
 8000604:	2000019c 	.word	0x2000019c

08000608 <HAL_SPI_ErrorCallback>:
//-------------------------------------------------------

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	sprintf(DataChar,"!!!-TRANSFER_ERROR-!!!\r\n" ) ;
 8000610:	490a      	ldr	r1, [pc, #40]	; (800063c <HAL_SPI_ErrorCallback+0x34>)
 8000612:	480b      	ldr	r0, [pc, #44]	; (8000640 <HAL_SPI_ErrorCallback+0x38>)
 8000614:	f002 f938 	bl	8002888 <siprintf>
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 8000618:	4809      	ldr	r0, [pc, #36]	; (8000640 <HAL_SPI_ErrorCallback+0x38>)
 800061a:	f7ff fd97 	bl	800014c <strlen>
 800061e:	4603      	mov	r3, r0
 8000620:	b29a      	uxth	r2, r3
 8000622:	2364      	movs	r3, #100	; 0x64
 8000624:	4906      	ldr	r1, [pc, #24]	; (8000640 <HAL_SPI_ErrorCallback+0x38>)
 8000626:	4807      	ldr	r0, [pc, #28]	; (8000644 <HAL_SPI_ErrorCallback+0x3c>)
 8000628:	f001 ff5d 	bl	80024e6 <HAL_UART_Transmit>
	wTransferState = TRANSFER_ERROR;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_SPI_ErrorCallback+0x40>)
 800062e:	2202      	movs	r2, #2
 8000630:	601a      	str	r2, [r3, #0]
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	08003314 	.word	0x08003314
 8000640:	2000009c 	.word	0x2000009c
 8000644:	20000288 	.word	0x20000288
 8000648:	2000019c 	.word	0x2000019c

0800064c <BufferCmp>:
//-------------------------------------------------------

uint16_t BufferCmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength) {
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	4613      	mov	r3, r2
 8000658:	80fb      	strh	r3, [r7, #6]
	while (BufferLength--) {
 800065a:	e00d      	b.n	8000678 <BufferCmp+0x2c>
		if((*pBuffer1) != *pBuffer2) {
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	781a      	ldrb	r2, [r3, #0]
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	429a      	cmp	r2, r3
 8000666:	d001      	beq.n	800066c <BufferCmp+0x20>
			return BufferLength;
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	e00b      	b.n	8000684 <BufferCmp+0x38>
		}
		pBuffer1++;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	3301      	adds	r3, #1
 8000670:	60fb      	str	r3, [r7, #12]
		pBuffer2++;
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	3301      	adds	r3, #1
 8000676:	60bb      	str	r3, [r7, #8]
	while (BufferLength--) {
 8000678:	88fb      	ldrh	r3, [r7, #6]
 800067a:	1e5a      	subs	r2, r3, #1
 800067c:	80fa      	strh	r2, [r7, #6]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1ec      	bne.n	800065c <BufferCmp+0x10>
	}
	return 0;
 8000682:	2300      	movs	r3, #0
}
 8000684:	4618      	mov	r0, r3
 8000686:	3714      	adds	r7, #20
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr

0800068e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000692:	b672      	cpsid	i
}
 8000694:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000696:	e7fe      	b.n	8000696 <Error_Handler+0x8>

08000698 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_SPI2_Init+0x5c>)
 800069e:	4a16      	ldr	r2, [pc, #88]	; (80006f8 <MX_SPI2_Init+0x60>)
 80006a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_SPI2_Init+0x5c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_SPI2_Init+0x5c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_SPI2_Init+0x5c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_SPI2_Init+0x5c>)
 80006b6:	2202      	movs	r2, #2
 80006b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_SPI2_Init+0x5c>)
 80006bc:	2201      	movs	r2, #1
 80006be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_SPI2_Init+0x5c>)
 80006c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_SPI2_Init+0x5c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_SPI2_Init+0x5c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_SPI2_Init+0x5c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_SPI2_Init+0x5c>)
 80006dc:	220a      	movs	r2, #10
 80006de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_SPI2_Init+0x5c>)
 80006e2:	f001 fb43 	bl	8001d6c <HAL_SPI_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 80006ec:	f7ff ffcf 	bl	800068e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200001a4 	.word	0x200001a4
 80006f8:	40003800 	.word	0x40003800

080006fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a42      	ldr	r2, [pc, #264]	; (8000820 <HAL_SPI_MspInit+0x124>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d17d      	bne.n	8000818 <HAL_SPI_MspInit+0x11c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800071c:	4b41      	ldr	r3, [pc, #260]	; (8000824 <HAL_SPI_MspInit+0x128>)
 800071e:	69db      	ldr	r3, [r3, #28]
 8000720:	4a40      	ldr	r2, [pc, #256]	; (8000824 <HAL_SPI_MspInit+0x128>)
 8000722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000726:	61d3      	str	r3, [r2, #28]
 8000728:	4b3e      	ldr	r3, [pc, #248]	; (8000824 <HAL_SPI_MspInit+0x128>)
 800072a:	69db      	ldr	r3, [r3, #28]
 800072c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000734:	4b3b      	ldr	r3, [pc, #236]	; (8000824 <HAL_SPI_MspInit+0x128>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a3a      	ldr	r2, [pc, #232]	; (8000824 <HAL_SPI_MspInit+0x128>)
 800073a:	f043 0308 	orr.w	r3, r3, #8
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b38      	ldr	r3, [pc, #224]	; (8000824 <HAL_SPI_MspInit+0x128>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f003 0308 	and.w	r3, r3, #8
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800074c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000750:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	4619      	mov	r1, r3
 8000760:	4831      	ldr	r0, [pc, #196]	; (8000828 <HAL_SPI_MspInit+0x12c>)
 8000762:	f000 fd33 	bl	80011cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000766:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800076a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076c:	2302      	movs	r3, #2
 800076e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000770:	2303      	movs	r3, #3
 8000772:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	4619      	mov	r1, r3
 800077a:	482b      	ldr	r0, [pc, #172]	; (8000828 <HAL_SPI_MspInit+0x12c>)
 800077c:	f000 fd26 	bl	80011cc <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8000780:	4b2a      	ldr	r3, [pc, #168]	; (800082c <HAL_SPI_MspInit+0x130>)
 8000782:	4a2b      	ldr	r2, [pc, #172]	; (8000830 <HAL_SPI_MspInit+0x134>)
 8000784:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000786:	4b29      	ldr	r3, [pc, #164]	; (800082c <HAL_SPI_MspInit+0x130>)
 8000788:	2200      	movs	r2, #0
 800078a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800078c:	4b27      	ldr	r3, [pc, #156]	; (800082c <HAL_SPI_MspInit+0x130>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000792:	4b26      	ldr	r3, [pc, #152]	; (800082c <HAL_SPI_MspInit+0x130>)
 8000794:	2280      	movs	r2, #128	; 0x80
 8000796:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000798:	4b24      	ldr	r3, [pc, #144]	; (800082c <HAL_SPI_MspInit+0x130>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800079e:	4b23      	ldr	r3, [pc, #140]	; (800082c <HAL_SPI_MspInit+0x130>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80007a4:	4b21      	ldr	r3, [pc, #132]	; (800082c <HAL_SPI_MspInit+0x130>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007aa:	4b20      	ldr	r3, [pc, #128]	; (800082c <HAL_SPI_MspInit+0x130>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80007b0:	481e      	ldr	r0, [pc, #120]	; (800082c <HAL_SPI_MspInit+0x130>)
 80007b2:	f000 fb1d 	bl	8000df0 <HAL_DMA_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 80007bc:	f7ff ff67 	bl	800068e <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4a1a      	ldr	r2, [pc, #104]	; (800082c <HAL_SPI_MspInit+0x130>)
 80007c4:	64da      	str	r2, [r3, #76]	; 0x4c
 80007c6:	4a19      	ldr	r2, [pc, #100]	; (800082c <HAL_SPI_MspInit+0x130>)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80007cc:	4b19      	ldr	r3, [pc, #100]	; (8000834 <HAL_SPI_MspInit+0x138>)
 80007ce:	4a1a      	ldr	r2, [pc, #104]	; (8000838 <HAL_SPI_MspInit+0x13c>)
 80007d0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <HAL_SPI_MspInit+0x138>)
 80007d4:	2210      	movs	r2, #16
 80007d6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007d8:	4b16      	ldr	r3, [pc, #88]	; (8000834 <HAL_SPI_MspInit+0x138>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <HAL_SPI_MspInit+0x138>)
 80007e0:	2280      	movs	r2, #128	; 0x80
 80007e2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007e4:	4b13      	ldr	r3, [pc, #76]	; (8000834 <HAL_SPI_MspInit+0x138>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007ea:	4b12      	ldr	r3, [pc, #72]	; (8000834 <HAL_SPI_MspInit+0x138>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80007f0:	4b10      	ldr	r3, [pc, #64]	; (8000834 <HAL_SPI_MspInit+0x138>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <HAL_SPI_MspInit+0x138>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80007fc:	480d      	ldr	r0, [pc, #52]	; (8000834 <HAL_SPI_MspInit+0x138>)
 80007fe:	f000 faf7 	bl	8000df0 <HAL_DMA_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 8000808:	f7ff ff41 	bl	800068e <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4a09      	ldr	r2, [pc, #36]	; (8000834 <HAL_SPI_MspInit+0x138>)
 8000810:	649a      	str	r2, [r3, #72]	; 0x48
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <HAL_SPI_MspInit+0x138>)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000818:	bf00      	nop
 800081a:	3720      	adds	r7, #32
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40003800 	.word	0x40003800
 8000824:	40021000 	.word	0x40021000
 8000828:	40010c00 	.word	0x40010c00
 800082c:	200001fc 	.word	0x200001fc
 8000830:	40020044 	.word	0x40020044
 8000834:	20000240 	.word	0x20000240
 8000838:	40020058 	.word	0x40020058

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <HAL_MspInit+0x5c>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	4a14      	ldr	r2, [pc, #80]	; (8000898 <HAL_MspInit+0x5c>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6193      	str	r3, [r2, #24]
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_MspInit+0x5c>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <HAL_MspInit+0x5c>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <HAL_MspInit+0x5c>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	61d3      	str	r3, [r2, #28]
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <HAL_MspInit+0x5c>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <HAL_MspInit+0x60>)
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	4a04      	ldr	r2, [pc, #16]	; (800089c <HAL_MspInit+0x60>)
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr
 8000898:	40021000 	.word	0x40021000
 800089c:	40010000 	.word	0x40010000

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <NMI_Handler+0x4>

080008a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <MemManage_Handler+0x4>

080008b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <UsageFault_Handler+0x4>

080008be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr

080008ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr

080008d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr

080008e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e6:	f000 f935 	bl	8000b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <DMA1_Channel4_IRQHandler+0x10>)
 80008f6:	f000 fb35 	bl	8000f64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200001fc 	.word	0x200001fc

08000904 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <DMA1_Channel5_IRQHandler+0x10>)
 800090a:	f000 fb2b 	bl	8000f64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000240 	.word	0x20000240

08000918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000920:	4a14      	ldr	r2, [pc, #80]	; (8000974 <_sbrk+0x5c>)
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <_sbrk+0x60>)
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800092c:	4b13      	ldr	r3, [pc, #76]	; (800097c <_sbrk+0x64>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d102      	bne.n	800093a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <_sbrk+0x64>)
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <_sbrk+0x68>)
 8000938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <_sbrk+0x64>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	429a      	cmp	r2, r3
 8000946:	d207      	bcs.n	8000958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000948:	f001 ff38 	bl	80027bc <__errno>
 800094c:	4603      	mov	r3, r0
 800094e:	220c      	movs	r2, #12
 8000950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000952:	f04f 33ff 	mov.w	r3, #4294967295
 8000956:	e009      	b.n	800096c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <_sbrk+0x64>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800095e:	4b07      	ldr	r3, [pc, #28]	; (800097c <_sbrk+0x64>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4413      	add	r3, r2
 8000966:	4a05      	ldr	r2, [pc, #20]	; (800097c <_sbrk+0x64>)
 8000968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800096a:	68fb      	ldr	r3, [r7, #12]
}
 800096c:	4618      	mov	r0, r3
 800096e:	3718      	adds	r7, #24
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20005000 	.word	0x20005000
 8000978:	00000400 	.word	0x00000400
 800097c:	20000284 	.word	0x20000284
 8000980:	200002e0 	.word	0x200002e0

08000984 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr

08000990 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 8000996:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <MX_USART1_UART_Init+0x50>)
 8000998:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 800099c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009c8:	f001 fd40 	bl	800244c <HAL_UART_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009d2:	f7ff fe5c 	bl	800068e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000288 	.word	0x20000288
 80009e0:	40013800 	.word	0x40013800

080009e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a1c      	ldr	r2, [pc, #112]	; (8000a70 <HAL_UART_MspInit+0x8c>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d131      	bne.n	8000a68 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a04:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <HAL_UART_MspInit+0x90>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a1a      	ldr	r2, [pc, #104]	; (8000a74 <HAL_UART_MspInit+0x90>)
 8000a0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0e:	6193      	str	r3, [r2, #24]
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <HAL_UART_MspInit+0x90>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <HAL_UART_MspInit+0x90>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	4a14      	ldr	r2, [pc, #80]	; (8000a74 <HAL_UART_MspInit+0x90>)
 8000a22:	f043 0304 	orr.w	r3, r3, #4
 8000a26:	6193      	str	r3, [r2, #24]
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <HAL_UART_MspInit+0x90>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	f003 0304 	and.w	r3, r3, #4
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 0310 	add.w	r3, r7, #16
 8000a46:	4619      	mov	r1, r3
 8000a48:	480b      	ldr	r0, [pc, #44]	; (8000a78 <HAL_UART_MspInit+0x94>)
 8000a4a:	f000 fbbf 	bl	80011cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	4619      	mov	r1, r3
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <HAL_UART_MspInit+0x94>)
 8000a64:	f000 fbb2 	bl	80011cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a68:	bf00      	nop
 8000a6a:	3720      	adds	r7, #32
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40013800 	.word	0x40013800
 8000a74:	40021000 	.word	0x40021000
 8000a78:	40010800 	.word	0x40010800

08000a7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a7c:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a7e:	490d      	ldr	r1, [pc, #52]	; (8000ab4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a80:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a84:	e002      	b.n	8000a8c <LoopCopyDataInit>

08000a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8a:	3304      	adds	r3, #4

08000a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a90:	d3f9      	bcc.n	8000a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a94:	4c0a      	ldr	r4, [pc, #40]	; (8000ac0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a98:	e001      	b.n	8000a9e <LoopFillZerobss>

08000a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a9c:	3204      	adds	r2, #4

08000a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa0:	d3fb      	bcc.n	8000a9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000aa2:	f7ff ff6f 	bl	8000984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aa6:	f001 fe8f 	bl	80027c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aaa:	f7ff fbc7 	bl	800023c <main>
  bx lr
 8000aae:	4770      	bx	lr
  ldr r0, =_sdata
 8000ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000ab8:	08003394 	.word	0x08003394
  ldr r2, =_sbss
 8000abc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000ac0:	200002e0 	.word	0x200002e0

08000ac4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC1_2_IRQHandler>
	...

08000ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <HAL_Init+0x28>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <HAL_Init+0x28>)
 8000ad2:	f043 0310 	orr.w	r3, r3, #16
 8000ad6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad8:	2003      	movs	r0, #3
 8000ada:	f000 f947 	bl	8000d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ade:	200f      	movs	r0, #15
 8000ae0:	f000 f808 	bl	8000af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae4:	f7ff feaa 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40022000 	.word	0x40022000

08000af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_InitTick+0x54>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <HAL_InitTick+0x58>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4619      	mov	r1, r3
 8000b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 f95f 	bl	8000dd6 <HAL_SYSTICK_Config>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00e      	b.n	8000b40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b0f      	cmp	r3, #15
 8000b26:	d80a      	bhi.n	8000b3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f000 f927 	bl	8000d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b34:	4a06      	ldr	r2, [pc, #24]	; (8000b50 <HAL_InitTick+0x5c>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e000      	b.n	8000b40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000010 	.word	0x20000010
 8000b4c:	20000018 	.word	0x20000018
 8000b50:	20000014 	.word	0x20000014

08000b54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_IncTick+0x1c>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <HAL_IncTick+0x20>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	4a03      	ldr	r2, [pc, #12]	; (8000b74 <HAL_IncTick+0x20>)
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	20000018 	.word	0x20000018
 8000b74:	200002cc 	.word	0x200002cc

08000b78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b7c:	4b02      	ldr	r3, [pc, #8]	; (8000b88 <HAL_GetTick+0x10>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	200002cc 	.word	0x200002cc

08000b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b94:	f7ff fff0 	bl	8000b78 <HAL_GetTick>
 8000b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba4:	d005      	beq.n	8000bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <HAL_Delay+0x44>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	461a      	mov	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4413      	add	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bb2:	bf00      	nop
 8000bb4:	f7ff ffe0 	bl	8000b78 <HAL_GetTick>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d8f7      	bhi.n	8000bb4 <HAL_Delay+0x28>
  {
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000018 	.word	0x20000018

08000bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c06:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	60d3      	str	r3, [r2, #12]
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <__NVIC_GetPriorityGrouping+0x18>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	f003 0307 	and.w	r3, r3, #7
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	db0b      	blt.n	8000c62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	f003 021f 	and.w	r2, r3, #31
 8000c50:	4906      	ldr	r1, [pc, #24]	; (8000c6c <__NVIC_EnableIRQ+0x34>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	095b      	lsrs	r3, r3, #5
 8000c58:	2001      	movs	r0, #1
 8000c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr
 8000c6c:	e000e100 	.word	0xe000e100

08000c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db0a      	blt.n	8000c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	490c      	ldr	r1, [pc, #48]	; (8000cbc <__NVIC_SetPriority+0x4c>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	0112      	lsls	r2, r2, #4
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	440b      	add	r3, r1
 8000c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c98:	e00a      	b.n	8000cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4908      	ldr	r1, [pc, #32]	; (8000cc0 <__NVIC_SetPriority+0x50>)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	0112      	lsls	r2, r2, #4
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	440b      	add	r3, r1
 8000cae:	761a      	strb	r2, [r3, #24]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	; 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f1c3 0307 	rsb	r3, r3, #7
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	bf28      	it	cs
 8000ce2:	2304      	movcs	r3, #4
 8000ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d902      	bls.n	8000cf4 <NVIC_EncodePriority+0x30>
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3b03      	subs	r3, #3
 8000cf2:	e000      	b.n	8000cf6 <NVIC_EncodePriority+0x32>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43da      	mvns	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	43d9      	mvns	r1, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	4313      	orrs	r3, r2
         );
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3724      	adds	r7, #36	; 0x24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d38:	d301      	bcc.n	8000d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00f      	b.n	8000d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <SysTick_Config+0x40>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d46:	210f      	movs	r1, #15
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4c:	f7ff ff90 	bl	8000c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <SysTick_Config+0x40>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <SysTick_Config+0x40>)
 8000d58:	2207      	movs	r2, #7
 8000d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	e000e010 	.word	0xe000e010

08000d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff ff2d 	bl	8000bd4 <__NVIC_SetPriorityGrouping>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d94:	f7ff ff42 	bl	8000c1c <__NVIC_GetPriorityGrouping>
 8000d98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	68b9      	ldr	r1, [r7, #8]
 8000d9e:	6978      	ldr	r0, [r7, #20]
 8000da0:	f7ff ff90 	bl	8000cc4 <NVIC_EncodePriority>
 8000da4:	4602      	mov	r2, r0
 8000da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff5f 	bl	8000c70 <__NVIC_SetPriority>
}
 8000db2:	bf00      	nop
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff35 	bl	8000c38 <__NVIC_EnableIRQ>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff ffa2 	bl	8000d28 <SysTick_Config>
 8000de4:	4603      	mov	r3, r0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d101      	bne.n	8000e06 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e043      	b.n	8000e8e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4b22      	ldr	r3, [pc, #136]	; (8000e98 <HAL_DMA_Init+0xa8>)
 8000e0e:	4413      	add	r3, r2
 8000e10:	4a22      	ldr	r2, [pc, #136]	; (8000e9c <HAL_DMA_Init+0xac>)
 8000e12:	fba2 2303 	umull	r2, r3, r2, r3
 8000e16:	091b      	lsrs	r3, r3, #4
 8000e18:	009a      	lsls	r2, r3, #2
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a1f      	ldr	r2, [pc, #124]	; (8000ea0 <HAL_DMA_Init+0xb0>)
 8000e22:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2202      	movs	r2, #2
 8000e28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000e3a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e3e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr
 8000e98:	bffdfff8 	.word	0xbffdfff8
 8000e9c:	cccccccd 	.word	0xcccccccd
 8000ea0:	40020000 	.word	0x40020000

08000ea4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
 8000eb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d101      	bne.n	8000ec4 <HAL_DMA_Start_IT+0x20>
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	e04a      	b.n	8000f5a <HAL_DMA_Start_IT+0xb6>
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d13a      	bne.n	8000f4c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	2202      	movs	r2, #2
 8000eda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f022 0201 	bic.w	r2, r2, #1
 8000ef2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	68b9      	ldr	r1, [r7, #8]
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	f000 f938 	bl	8001170 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d008      	beq.n	8000f1a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f042 020e 	orr.w	r2, r2, #14
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	e00f      	b.n	8000f3a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f022 0204 	bic.w	r2, r2, #4
 8000f28:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f042 020a 	orr.w	r2, r2, #10
 8000f38:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f042 0201 	orr.w	r2, r2, #1
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	e005      	b.n	8000f58 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f54:	2302      	movs	r3, #2
 8000f56:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	2204      	movs	r2, #4
 8000f82:	409a      	lsls	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4013      	ands	r3, r2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d04f      	beq.n	800102c <HAL_DMA_IRQHandler+0xc8>
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	f003 0304 	and.w	r3, r3, #4
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d04a      	beq.n	800102c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0320 	and.w	r3, r3, #32
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d107      	bne.n	8000fb4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 0204 	bic.w	r2, r2, #4
 8000fb2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a66      	ldr	r2, [pc, #408]	; (8001154 <HAL_DMA_IRQHandler+0x1f0>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d029      	beq.n	8001012 <HAL_DMA_IRQHandler+0xae>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a65      	ldr	r2, [pc, #404]	; (8001158 <HAL_DMA_IRQHandler+0x1f4>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d022      	beq.n	800100e <HAL_DMA_IRQHandler+0xaa>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a63      	ldr	r2, [pc, #396]	; (800115c <HAL_DMA_IRQHandler+0x1f8>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d01a      	beq.n	8001008 <HAL_DMA_IRQHandler+0xa4>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a62      	ldr	r2, [pc, #392]	; (8001160 <HAL_DMA_IRQHandler+0x1fc>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d012      	beq.n	8001002 <HAL_DMA_IRQHandler+0x9e>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a60      	ldr	r2, [pc, #384]	; (8001164 <HAL_DMA_IRQHandler+0x200>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d00a      	beq.n	8000ffc <HAL_DMA_IRQHandler+0x98>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a5f      	ldr	r2, [pc, #380]	; (8001168 <HAL_DMA_IRQHandler+0x204>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d102      	bne.n	8000ff6 <HAL_DMA_IRQHandler+0x92>
 8000ff0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ff4:	e00e      	b.n	8001014 <HAL_DMA_IRQHandler+0xb0>
 8000ff6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000ffa:	e00b      	b.n	8001014 <HAL_DMA_IRQHandler+0xb0>
 8000ffc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001000:	e008      	b.n	8001014 <HAL_DMA_IRQHandler+0xb0>
 8001002:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001006:	e005      	b.n	8001014 <HAL_DMA_IRQHandler+0xb0>
 8001008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800100c:	e002      	b.n	8001014 <HAL_DMA_IRQHandler+0xb0>
 800100e:	2340      	movs	r3, #64	; 0x40
 8001010:	e000      	b.n	8001014 <HAL_DMA_IRQHandler+0xb0>
 8001012:	2304      	movs	r3, #4
 8001014:	4a55      	ldr	r2, [pc, #340]	; (800116c <HAL_DMA_IRQHandler+0x208>)
 8001016:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101c:	2b00      	cmp	r3, #0
 800101e:	f000 8094 	beq.w	800114a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800102a:	e08e      	b.n	800114a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	2202      	movs	r2, #2
 8001032:	409a      	lsls	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4013      	ands	r3, r2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d056      	beq.n	80010ea <HAL_DMA_IRQHandler+0x186>
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	2b00      	cmp	r3, #0
 8001044:	d051      	beq.n	80010ea <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0320 	and.w	r3, r3, #32
 8001050:	2b00      	cmp	r3, #0
 8001052:	d10b      	bne.n	800106c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f022 020a 	bic.w	r2, r2, #10
 8001062:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2201      	movs	r2, #1
 8001068:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a38      	ldr	r2, [pc, #224]	; (8001154 <HAL_DMA_IRQHandler+0x1f0>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d029      	beq.n	80010ca <HAL_DMA_IRQHandler+0x166>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a37      	ldr	r2, [pc, #220]	; (8001158 <HAL_DMA_IRQHandler+0x1f4>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d022      	beq.n	80010c6 <HAL_DMA_IRQHandler+0x162>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a35      	ldr	r2, [pc, #212]	; (800115c <HAL_DMA_IRQHandler+0x1f8>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d01a      	beq.n	80010c0 <HAL_DMA_IRQHandler+0x15c>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a34      	ldr	r2, [pc, #208]	; (8001160 <HAL_DMA_IRQHandler+0x1fc>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d012      	beq.n	80010ba <HAL_DMA_IRQHandler+0x156>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a32      	ldr	r2, [pc, #200]	; (8001164 <HAL_DMA_IRQHandler+0x200>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d00a      	beq.n	80010b4 <HAL_DMA_IRQHandler+0x150>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a31      	ldr	r2, [pc, #196]	; (8001168 <HAL_DMA_IRQHandler+0x204>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d102      	bne.n	80010ae <HAL_DMA_IRQHandler+0x14a>
 80010a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80010ac:	e00e      	b.n	80010cc <HAL_DMA_IRQHandler+0x168>
 80010ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010b2:	e00b      	b.n	80010cc <HAL_DMA_IRQHandler+0x168>
 80010b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010b8:	e008      	b.n	80010cc <HAL_DMA_IRQHandler+0x168>
 80010ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010be:	e005      	b.n	80010cc <HAL_DMA_IRQHandler+0x168>
 80010c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010c4:	e002      	b.n	80010cc <HAL_DMA_IRQHandler+0x168>
 80010c6:	2320      	movs	r3, #32
 80010c8:	e000      	b.n	80010cc <HAL_DMA_IRQHandler+0x168>
 80010ca:	2302      	movs	r3, #2
 80010cc:	4a27      	ldr	r2, [pc, #156]	; (800116c <HAL_DMA_IRQHandler+0x208>)
 80010ce:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d034      	beq.n	800114a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80010e8:	e02f      	b.n	800114a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	2208      	movs	r2, #8
 80010f0:	409a      	lsls	r2, r3
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	4013      	ands	r3, r2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d028      	beq.n	800114c <HAL_DMA_IRQHandler+0x1e8>
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	2b00      	cmp	r3, #0
 8001102:	d023      	beq.n	800114c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 020e 	bic.w	r2, r2, #14
 8001112:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800111c:	2101      	movs	r1, #1
 800111e:	fa01 f202 	lsl.w	r2, r1, r2
 8001122:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2201      	movs	r2, #1
 8001128:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2201      	movs	r2, #1
 800112e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	2b00      	cmp	r3, #0
 8001140:	d004      	beq.n	800114c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	4798      	blx	r3
    }
  }
  return;
 800114a:	bf00      	nop
 800114c:	bf00      	nop
}
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40020008 	.word	0x40020008
 8001158:	4002001c 	.word	0x4002001c
 800115c:	40020030 	.word	0x40020030
 8001160:	40020044 	.word	0x40020044
 8001164:	40020058 	.word	0x40020058
 8001168:	4002006c 	.word	0x4002006c
 800116c:	40020000 	.word	0x40020000

08001170 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
 800117c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001186:	2101      	movs	r1, #1
 8001188:	fa01 f202 	lsl.w	r2, r1, r2
 800118c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b10      	cmp	r3, #16
 800119c:	d108      	bne.n	80011b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80011ae:	e007      	b.n	80011c0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	68ba      	ldr	r2, [r7, #8]
 80011b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	60da      	str	r2, [r3, #12]
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
	...

080011cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b08b      	sub	sp, #44	; 0x2c
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011da:	2300      	movs	r3, #0
 80011dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011de:	e169      	b.n	80014b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011e0:	2201      	movs	r2, #1
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	69fa      	ldr	r2, [r7, #28]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	f040 8158 	bne.w	80014ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	4a9a      	ldr	r2, [pc, #616]	; (800146c <HAL_GPIO_Init+0x2a0>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d05e      	beq.n	80012c6 <HAL_GPIO_Init+0xfa>
 8001208:	4a98      	ldr	r2, [pc, #608]	; (800146c <HAL_GPIO_Init+0x2a0>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d875      	bhi.n	80012fa <HAL_GPIO_Init+0x12e>
 800120e:	4a98      	ldr	r2, [pc, #608]	; (8001470 <HAL_GPIO_Init+0x2a4>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d058      	beq.n	80012c6 <HAL_GPIO_Init+0xfa>
 8001214:	4a96      	ldr	r2, [pc, #600]	; (8001470 <HAL_GPIO_Init+0x2a4>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d86f      	bhi.n	80012fa <HAL_GPIO_Init+0x12e>
 800121a:	4a96      	ldr	r2, [pc, #600]	; (8001474 <HAL_GPIO_Init+0x2a8>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d052      	beq.n	80012c6 <HAL_GPIO_Init+0xfa>
 8001220:	4a94      	ldr	r2, [pc, #592]	; (8001474 <HAL_GPIO_Init+0x2a8>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d869      	bhi.n	80012fa <HAL_GPIO_Init+0x12e>
 8001226:	4a94      	ldr	r2, [pc, #592]	; (8001478 <HAL_GPIO_Init+0x2ac>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d04c      	beq.n	80012c6 <HAL_GPIO_Init+0xfa>
 800122c:	4a92      	ldr	r2, [pc, #584]	; (8001478 <HAL_GPIO_Init+0x2ac>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d863      	bhi.n	80012fa <HAL_GPIO_Init+0x12e>
 8001232:	4a92      	ldr	r2, [pc, #584]	; (800147c <HAL_GPIO_Init+0x2b0>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d046      	beq.n	80012c6 <HAL_GPIO_Init+0xfa>
 8001238:	4a90      	ldr	r2, [pc, #576]	; (800147c <HAL_GPIO_Init+0x2b0>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d85d      	bhi.n	80012fa <HAL_GPIO_Init+0x12e>
 800123e:	2b12      	cmp	r3, #18
 8001240:	d82a      	bhi.n	8001298 <HAL_GPIO_Init+0xcc>
 8001242:	2b12      	cmp	r3, #18
 8001244:	d859      	bhi.n	80012fa <HAL_GPIO_Init+0x12e>
 8001246:	a201      	add	r2, pc, #4	; (adr r2, 800124c <HAL_GPIO_Init+0x80>)
 8001248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124c:	080012c7 	.word	0x080012c7
 8001250:	080012a1 	.word	0x080012a1
 8001254:	080012b3 	.word	0x080012b3
 8001258:	080012f5 	.word	0x080012f5
 800125c:	080012fb 	.word	0x080012fb
 8001260:	080012fb 	.word	0x080012fb
 8001264:	080012fb 	.word	0x080012fb
 8001268:	080012fb 	.word	0x080012fb
 800126c:	080012fb 	.word	0x080012fb
 8001270:	080012fb 	.word	0x080012fb
 8001274:	080012fb 	.word	0x080012fb
 8001278:	080012fb 	.word	0x080012fb
 800127c:	080012fb 	.word	0x080012fb
 8001280:	080012fb 	.word	0x080012fb
 8001284:	080012fb 	.word	0x080012fb
 8001288:	080012fb 	.word	0x080012fb
 800128c:	080012fb 	.word	0x080012fb
 8001290:	080012a9 	.word	0x080012a9
 8001294:	080012bd 	.word	0x080012bd
 8001298:	4a79      	ldr	r2, [pc, #484]	; (8001480 <HAL_GPIO_Init+0x2b4>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d013      	beq.n	80012c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800129e:	e02c      	b.n	80012fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	623b      	str	r3, [r7, #32]
          break;
 80012a6:	e029      	b.n	80012fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	3304      	adds	r3, #4
 80012ae:	623b      	str	r3, [r7, #32]
          break;
 80012b0:	e024      	b.n	80012fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	3308      	adds	r3, #8
 80012b8:	623b      	str	r3, [r7, #32]
          break;
 80012ba:	e01f      	b.n	80012fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	330c      	adds	r3, #12
 80012c2:	623b      	str	r3, [r7, #32]
          break;
 80012c4:	e01a      	b.n	80012fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d102      	bne.n	80012d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012ce:	2304      	movs	r3, #4
 80012d0:	623b      	str	r3, [r7, #32]
          break;
 80012d2:	e013      	b.n	80012fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d105      	bne.n	80012e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012dc:	2308      	movs	r3, #8
 80012de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69fa      	ldr	r2, [r7, #28]
 80012e4:	611a      	str	r2, [r3, #16]
          break;
 80012e6:	e009      	b.n	80012fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012e8:	2308      	movs	r3, #8
 80012ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69fa      	ldr	r2, [r7, #28]
 80012f0:	615a      	str	r2, [r3, #20]
          break;
 80012f2:	e003      	b.n	80012fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012f4:	2300      	movs	r3, #0
 80012f6:	623b      	str	r3, [r7, #32]
          break;
 80012f8:	e000      	b.n	80012fc <HAL_GPIO_Init+0x130>
          break;
 80012fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	2bff      	cmp	r3, #255	; 0xff
 8001300:	d801      	bhi.n	8001306 <HAL_GPIO_Init+0x13a>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	e001      	b.n	800130a <HAL_GPIO_Init+0x13e>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3304      	adds	r3, #4
 800130a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	2bff      	cmp	r3, #255	; 0xff
 8001310:	d802      	bhi.n	8001318 <HAL_GPIO_Init+0x14c>
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	e002      	b.n	800131e <HAL_GPIO_Init+0x152>
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	3b08      	subs	r3, #8
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	210f      	movs	r1, #15
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	fa01 f303 	lsl.w	r3, r1, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	401a      	ands	r2, r3
 8001330:	6a39      	ldr	r1, [r7, #32]
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	fa01 f303 	lsl.w	r3, r1, r3
 8001338:	431a      	orrs	r2, r3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 80b1 	beq.w	80014ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800134c:	4b4d      	ldr	r3, [pc, #308]	; (8001484 <HAL_GPIO_Init+0x2b8>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a4c      	ldr	r2, [pc, #304]	; (8001484 <HAL_GPIO_Init+0x2b8>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b4a      	ldr	r3, [pc, #296]	; (8001484 <HAL_GPIO_Init+0x2b8>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001364:	4a48      	ldr	r2, [pc, #288]	; (8001488 <HAL_GPIO_Init+0x2bc>)
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	089b      	lsrs	r3, r3, #2
 800136a:	3302      	adds	r3, #2
 800136c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001370:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	220f      	movs	r2, #15
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	4013      	ands	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a40      	ldr	r2, [pc, #256]	; (800148c <HAL_GPIO_Init+0x2c0>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d013      	beq.n	80013b8 <HAL_GPIO_Init+0x1ec>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a3f      	ldr	r2, [pc, #252]	; (8001490 <HAL_GPIO_Init+0x2c4>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d00d      	beq.n	80013b4 <HAL_GPIO_Init+0x1e8>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a3e      	ldr	r2, [pc, #248]	; (8001494 <HAL_GPIO_Init+0x2c8>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d007      	beq.n	80013b0 <HAL_GPIO_Init+0x1e4>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a3d      	ldr	r2, [pc, #244]	; (8001498 <HAL_GPIO_Init+0x2cc>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d101      	bne.n	80013ac <HAL_GPIO_Init+0x1e0>
 80013a8:	2303      	movs	r3, #3
 80013aa:	e006      	b.n	80013ba <HAL_GPIO_Init+0x1ee>
 80013ac:	2304      	movs	r3, #4
 80013ae:	e004      	b.n	80013ba <HAL_GPIO_Init+0x1ee>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e002      	b.n	80013ba <HAL_GPIO_Init+0x1ee>
 80013b4:	2301      	movs	r3, #1
 80013b6:	e000      	b.n	80013ba <HAL_GPIO_Init+0x1ee>
 80013b8:	2300      	movs	r3, #0
 80013ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013bc:	f002 0203 	and.w	r2, r2, #3
 80013c0:	0092      	lsls	r2, r2, #2
 80013c2:	4093      	lsls	r3, r2
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013ca:	492f      	ldr	r1, [pc, #188]	; (8001488 <HAL_GPIO_Init+0x2bc>)
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	089b      	lsrs	r3, r3, #2
 80013d0:	3302      	adds	r3, #2
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d006      	beq.n	80013f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013e4:	4b2d      	ldr	r3, [pc, #180]	; (800149c <HAL_GPIO_Init+0x2d0>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	492c      	ldr	r1, [pc, #176]	; (800149c <HAL_GPIO_Init+0x2d0>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	600b      	str	r3, [r1, #0]
 80013f0:	e006      	b.n	8001400 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013f2:	4b2a      	ldr	r3, [pc, #168]	; (800149c <HAL_GPIO_Init+0x2d0>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	4928      	ldr	r1, [pc, #160]	; (800149c <HAL_GPIO_Init+0x2d0>)
 80013fc:	4013      	ands	r3, r2
 80013fe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d006      	beq.n	800141a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800140c:	4b23      	ldr	r3, [pc, #140]	; (800149c <HAL_GPIO_Init+0x2d0>)
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	4922      	ldr	r1, [pc, #136]	; (800149c <HAL_GPIO_Init+0x2d0>)
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	4313      	orrs	r3, r2
 8001416:	604b      	str	r3, [r1, #4]
 8001418:	e006      	b.n	8001428 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800141a:	4b20      	ldr	r3, [pc, #128]	; (800149c <HAL_GPIO_Init+0x2d0>)
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	43db      	mvns	r3, r3
 8001422:	491e      	ldr	r1, [pc, #120]	; (800149c <HAL_GPIO_Init+0x2d0>)
 8001424:	4013      	ands	r3, r2
 8001426:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d006      	beq.n	8001442 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001434:	4b19      	ldr	r3, [pc, #100]	; (800149c <HAL_GPIO_Init+0x2d0>)
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	4918      	ldr	r1, [pc, #96]	; (800149c <HAL_GPIO_Init+0x2d0>)
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	4313      	orrs	r3, r2
 800143e:	608b      	str	r3, [r1, #8]
 8001440:	e006      	b.n	8001450 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001442:	4b16      	ldr	r3, [pc, #88]	; (800149c <HAL_GPIO_Init+0x2d0>)
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	43db      	mvns	r3, r3
 800144a:	4914      	ldr	r1, [pc, #80]	; (800149c <HAL_GPIO_Init+0x2d0>)
 800144c:	4013      	ands	r3, r2
 800144e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d021      	beq.n	80014a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <HAL_GPIO_Init+0x2d0>)
 800145e:	68da      	ldr	r2, [r3, #12]
 8001460:	490e      	ldr	r1, [pc, #56]	; (800149c <HAL_GPIO_Init+0x2d0>)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	60cb      	str	r3, [r1, #12]
 8001468:	e021      	b.n	80014ae <HAL_GPIO_Init+0x2e2>
 800146a:	bf00      	nop
 800146c:	10320000 	.word	0x10320000
 8001470:	10310000 	.word	0x10310000
 8001474:	10220000 	.word	0x10220000
 8001478:	10210000 	.word	0x10210000
 800147c:	10120000 	.word	0x10120000
 8001480:	10110000 	.word	0x10110000
 8001484:	40021000 	.word	0x40021000
 8001488:	40010000 	.word	0x40010000
 800148c:	40010800 	.word	0x40010800
 8001490:	40010c00 	.word	0x40010c00
 8001494:	40011000 	.word	0x40011000
 8001498:	40011400 	.word	0x40011400
 800149c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_GPIO_Init+0x304>)
 80014a2:	68da      	ldr	r2, [r3, #12]
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	4909      	ldr	r1, [pc, #36]	; (80014d0 <HAL_GPIO_Init+0x304>)
 80014aa:	4013      	ands	r3, r2
 80014ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	3301      	adds	r3, #1
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	fa22 f303 	lsr.w	r3, r2, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f47f ae8e 	bne.w	80011e0 <HAL_GPIO_Init+0x14>
  }
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	372c      	adds	r7, #44	; 0x2c
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	40010400 	.word	0x40010400

080014d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	807b      	strh	r3, [r7, #2]
 80014e0:	4613      	mov	r3, r2
 80014e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014e4:	787b      	ldrb	r3, [r7, #1]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ea:	887a      	ldrh	r2, [r7, #2]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014f0:	e003      	b.n	80014fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014f2:	887b      	ldrh	r3, [r7, #2]
 80014f4:	041a      	lsls	r2, r3, #16
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	611a      	str	r2, [r3, #16]
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001516:	887a      	ldrh	r2, [r7, #2]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4013      	ands	r3, r2
 800151c:	041a      	lsls	r2, r3, #16
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	43d9      	mvns	r1, r3
 8001522:	887b      	ldrh	r3, [r7, #2]
 8001524:	400b      	ands	r3, r1
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	611a      	str	r2, [r3, #16]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
	...

08001538 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e272      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 8087 	beq.w	8001666 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001558:	4b92      	ldr	r3, [pc, #584]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 030c 	and.w	r3, r3, #12
 8001560:	2b04      	cmp	r3, #4
 8001562:	d00c      	beq.n	800157e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001564:	4b8f      	ldr	r3, [pc, #572]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 030c 	and.w	r3, r3, #12
 800156c:	2b08      	cmp	r3, #8
 800156e:	d112      	bne.n	8001596 <HAL_RCC_OscConfig+0x5e>
 8001570:	4b8c      	ldr	r3, [pc, #560]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800157c:	d10b      	bne.n	8001596 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157e:	4b89      	ldr	r3, [pc, #548]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d06c      	beq.n	8001664 <HAL_RCC_OscConfig+0x12c>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d168      	bne.n	8001664 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e24c      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800159e:	d106      	bne.n	80015ae <HAL_RCC_OscConfig+0x76>
 80015a0:	4b80      	ldr	r3, [pc, #512]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a7f      	ldr	r2, [pc, #508]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	e02e      	b.n	800160c <HAL_RCC_OscConfig+0xd4>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x98>
 80015b6:	4b7b      	ldr	r3, [pc, #492]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a7a      	ldr	r2, [pc, #488]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	4b78      	ldr	r3, [pc, #480]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a77      	ldr	r2, [pc, #476]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	e01d      	b.n	800160c <HAL_RCC_OscConfig+0xd4>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d8:	d10c      	bne.n	80015f4 <HAL_RCC_OscConfig+0xbc>
 80015da:	4b72      	ldr	r3, [pc, #456]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a71      	ldr	r2, [pc, #452]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	4b6f      	ldr	r3, [pc, #444]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a6e      	ldr	r2, [pc, #440]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	e00b      	b.n	800160c <HAL_RCC_OscConfig+0xd4>
 80015f4:	4b6b      	ldr	r3, [pc, #428]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a6a      	ldr	r2, [pc, #424]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80015fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	4b68      	ldr	r3, [pc, #416]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a67      	ldr	r2, [pc, #412]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800160a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d013      	beq.n	800163c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001614:	f7ff fab0 	bl	8000b78 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800161c:	f7ff faac 	bl	8000b78 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b64      	cmp	r3, #100	; 0x64
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e200      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162e:	4b5d      	ldr	r3, [pc, #372]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0xe4>
 800163a:	e014      	b.n	8001666 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff fa9c 	bl	8000b78 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001644:	f7ff fa98 	bl	8000b78 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b64      	cmp	r3, #100	; 0x64
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e1ec      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001656:	4b53      	ldr	r3, [pc, #332]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x10c>
 8001662:	e000      	b.n	8001666 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d063      	beq.n	800173a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001672:	4b4c      	ldr	r3, [pc, #304]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00b      	beq.n	8001696 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800167e:	4b49      	ldr	r3, [pc, #292]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 030c 	and.w	r3, r3, #12
 8001686:	2b08      	cmp	r3, #8
 8001688:	d11c      	bne.n	80016c4 <HAL_RCC_OscConfig+0x18c>
 800168a:	4b46      	ldr	r3, [pc, #280]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d116      	bne.n	80016c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001696:	4b43      	ldr	r3, [pc, #268]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d005      	beq.n	80016ae <HAL_RCC_OscConfig+0x176>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d001      	beq.n	80016ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e1c0      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ae:	4b3d      	ldr	r3, [pc, #244]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	4939      	ldr	r1, [pc, #228]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c2:	e03a      	b.n	800173a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d020      	beq.n	800170e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016cc:	4b36      	ldr	r3, [pc, #216]	; (80017a8 <HAL_RCC_OscConfig+0x270>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d2:	f7ff fa51 	bl	8000b78 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016da:	f7ff fa4d 	bl	8000b78 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e1a1      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ec:	4b2d      	ldr	r3, [pc, #180]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f8:	4b2a      	ldr	r3, [pc, #168]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	4927      	ldr	r1, [pc, #156]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001708:	4313      	orrs	r3, r2
 800170a:	600b      	str	r3, [r1, #0]
 800170c:	e015      	b.n	800173a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800170e:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <HAL_RCC_OscConfig+0x270>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001714:	f7ff fa30 	bl	8000b78 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800171c:	f7ff fa2c 	bl	8000b78 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e180      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800172e:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b00      	cmp	r3, #0
 8001744:	d03a      	beq.n	80017bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d019      	beq.n	8001782 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800174e:	4b17      	ldr	r3, [pc, #92]	; (80017ac <HAL_RCC_OscConfig+0x274>)
 8001750:	2201      	movs	r2, #1
 8001752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001754:	f7ff fa10 	bl	8000b78 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800175c:	f7ff fa0c 	bl	8000b78 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e160      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176e:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <HAL_RCC_OscConfig+0x26c>)
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f0      	beq.n	800175c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800177a:	2001      	movs	r0, #1
 800177c:	f000 fad8 	bl	8001d30 <RCC_Delay>
 8001780:	e01c      	b.n	80017bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <HAL_RCC_OscConfig+0x274>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001788:	f7ff f9f6 	bl	8000b78 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800178e:	e00f      	b.n	80017b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001790:	f7ff f9f2 	bl	8000b78 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d908      	bls.n	80017b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e146      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000
 80017a8:	42420000 	.word	0x42420000
 80017ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b0:	4b92      	ldr	r3, [pc, #584]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1e9      	bne.n	8001790 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 80a6 	beq.w	8001916 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ca:	2300      	movs	r3, #0
 80017cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ce:	4b8b      	ldr	r3, [pc, #556]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10d      	bne.n	80017f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017da:	4b88      	ldr	r3, [pc, #544]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	4a87      	ldr	r2, [pc, #540]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80017e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e4:	61d3      	str	r3, [r2, #28]
 80017e6:	4b85      	ldr	r3, [pc, #532]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017f2:	2301      	movs	r3, #1
 80017f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f6:	4b82      	ldr	r3, [pc, #520]	; (8001a00 <HAL_RCC_OscConfig+0x4c8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d118      	bne.n	8001834 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001802:	4b7f      	ldr	r3, [pc, #508]	; (8001a00 <HAL_RCC_OscConfig+0x4c8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a7e      	ldr	r2, [pc, #504]	; (8001a00 <HAL_RCC_OscConfig+0x4c8>)
 8001808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800180e:	f7ff f9b3 	bl	8000b78 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001816:	f7ff f9af 	bl	8000b78 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b64      	cmp	r3, #100	; 0x64
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e103      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001828:	4b75      	ldr	r3, [pc, #468]	; (8001a00 <HAL_RCC_OscConfig+0x4c8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f0      	beq.n	8001816 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d106      	bne.n	800184a <HAL_RCC_OscConfig+0x312>
 800183c:	4b6f      	ldr	r3, [pc, #444]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	4a6e      	ldr	r2, [pc, #440]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6213      	str	r3, [r2, #32]
 8001848:	e02d      	b.n	80018a6 <HAL_RCC_OscConfig+0x36e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10c      	bne.n	800186c <HAL_RCC_OscConfig+0x334>
 8001852:	4b6a      	ldr	r3, [pc, #424]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	4a69      	ldr	r2, [pc, #420]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001858:	f023 0301 	bic.w	r3, r3, #1
 800185c:	6213      	str	r3, [r2, #32]
 800185e:	4b67      	ldr	r3, [pc, #412]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	4a66      	ldr	r2, [pc, #408]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001864:	f023 0304 	bic.w	r3, r3, #4
 8001868:	6213      	str	r3, [r2, #32]
 800186a:	e01c      	b.n	80018a6 <HAL_RCC_OscConfig+0x36e>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	2b05      	cmp	r3, #5
 8001872:	d10c      	bne.n	800188e <HAL_RCC_OscConfig+0x356>
 8001874:	4b61      	ldr	r3, [pc, #388]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	4a60      	ldr	r2, [pc, #384]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 800187a:	f043 0304 	orr.w	r3, r3, #4
 800187e:	6213      	str	r3, [r2, #32]
 8001880:	4b5e      	ldr	r3, [pc, #376]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	4a5d      	ldr	r2, [pc, #372]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6213      	str	r3, [r2, #32]
 800188c:	e00b      	b.n	80018a6 <HAL_RCC_OscConfig+0x36e>
 800188e:	4b5b      	ldr	r3, [pc, #364]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	4a5a      	ldr	r2, [pc, #360]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001894:	f023 0301 	bic.w	r3, r3, #1
 8001898:	6213      	str	r3, [r2, #32]
 800189a:	4b58      	ldr	r3, [pc, #352]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	4a57      	ldr	r2, [pc, #348]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80018a0:	f023 0304 	bic.w	r3, r3, #4
 80018a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d015      	beq.n	80018da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ae:	f7ff f963 	bl	8000b78 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b4:	e00a      	b.n	80018cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b6:	f7ff f95f 	bl	8000b78 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e0b1      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018cc:	4b4b      	ldr	r3, [pc, #300]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0ee      	beq.n	80018b6 <HAL_RCC_OscConfig+0x37e>
 80018d8:	e014      	b.n	8001904 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018da:	f7ff f94d 	bl	8000b78 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e0:	e00a      	b.n	80018f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e2:	f7ff f949 	bl	8000b78 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e09b      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f8:	4b40      	ldr	r3, [pc, #256]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1ee      	bne.n	80018e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001904:	7dfb      	ldrb	r3, [r7, #23]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d105      	bne.n	8001916 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800190a:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	4a3b      	ldr	r2, [pc, #236]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001910:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001914:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 8087 	beq.w	8001a2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001920:	4b36      	ldr	r3, [pc, #216]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	2b08      	cmp	r3, #8
 800192a:	d061      	beq.n	80019f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	2b02      	cmp	r3, #2
 8001932:	d146      	bne.n	80019c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001934:	4b33      	ldr	r3, [pc, #204]	; (8001a04 <HAL_RCC_OscConfig+0x4cc>)
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193a:	f7ff f91d 	bl	8000b78 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001942:	f7ff f919 	bl	8000b78 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e06d      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001954:	4b29      	ldr	r3, [pc, #164]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f0      	bne.n	8001942 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001968:	d108      	bne.n	800197c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800196a:	4b24      	ldr	r3, [pc, #144]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	4921      	ldr	r1, [pc, #132]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001978:	4313      	orrs	r3, r2
 800197a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800197c:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a19      	ldr	r1, [r3, #32]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	430b      	orrs	r3, r1
 800198e:	491b      	ldr	r1, [pc, #108]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 8001990:	4313      	orrs	r3, r2
 8001992:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <HAL_RCC_OscConfig+0x4cc>)
 8001996:	2201      	movs	r2, #1
 8001998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199a:	f7ff f8ed 	bl	8000b78 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a2:	f7ff f8e9 	bl	8000b78 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e03d      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0f0      	beq.n	80019a2 <HAL_RCC_OscConfig+0x46a>
 80019c0:	e035      	b.n	8001a2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <HAL_RCC_OscConfig+0x4cc>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff f8d6 	bl	8000b78 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d0:	f7ff f8d2 	bl	8000b78 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e026      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_RCC_OscConfig+0x4c4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x498>
 80019ee:	e01e      	b.n	8001a2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d107      	bne.n	8001a08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e019      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40007000 	.word	0x40007000
 8001a04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_RCC_OscConfig+0x500>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d106      	bne.n	8001a2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d001      	beq.n	8001a2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40021000 	.word	0x40021000

08001a3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0d0      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a50:	4b6a      	ldr	r3, [pc, #424]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d910      	bls.n	8001a80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5e:	4b67      	ldr	r3, [pc, #412]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f023 0207 	bic.w	r2, r3, #7
 8001a66:	4965      	ldr	r1, [pc, #404]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6e:	4b63      	ldr	r3, [pc, #396]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0b8      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d020      	beq.n	8001ace <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d005      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a98:	4b59      	ldr	r3, [pc, #356]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	4a58      	ldr	r2, [pc, #352]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001aa2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d005      	beq.n	8001abc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ab0:	4b53      	ldr	r3, [pc, #332]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	4a52      	ldr	r2, [pc, #328]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001aba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001abc:	4b50      	ldr	r3, [pc, #320]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	494d      	ldr	r1, [pc, #308]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d040      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d107      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae2:	4b47      	ldr	r3, [pc, #284]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d115      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e07f      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d107      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afa:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d109      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e073      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0a:	4b3d      	ldr	r3, [pc, #244]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e06b      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b1a:	4b39      	ldr	r3, [pc, #228]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f023 0203 	bic.w	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	4936      	ldr	r1, [pc, #216]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b2c:	f7ff f824 	bl	8000b78 <HAL_GetTick>
 8001b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b32:	e00a      	b.n	8001b4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b34:	f7ff f820 	bl	8000b78 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e053      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4a:	4b2d      	ldr	r3, [pc, #180]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 020c 	and.w	r2, r3, #12
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d1eb      	bne.n	8001b34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b5c:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d210      	bcs.n	8001b8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6a:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 0207 	bic.w	r2, r3, #7
 8001b72:	4922      	ldr	r1, [pc, #136]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7a:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d001      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e032      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d008      	beq.n	8001baa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b98:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	4916      	ldr	r1, [pc, #88]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d009      	beq.n	8001bca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bb6:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	490e      	ldr	r1, [pc, #56]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bca:	f000 f821 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	091b      	lsrs	r3, r3, #4
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	490a      	ldr	r1, [pc, #40]	; (8001c04 <HAL_RCC_ClockConfig+0x1c8>)
 8001bdc:	5ccb      	ldrb	r3, [r1, r3]
 8001bde:	fa22 f303 	lsr.w	r3, r2, r3
 8001be2:	4a09      	ldr	r2, [pc, #36]	; (8001c08 <HAL_RCC_ClockConfig+0x1cc>)
 8001be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <HAL_RCC_ClockConfig+0x1d0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe ff82 	bl	8000af4 <HAL_InitTick>

  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40022000 	.word	0x40022000
 8001c00:	40021000 	.word	0x40021000
 8001c04:	08003340 	.word	0x08003340
 8001c08:	20000010 	.word	0x20000010
 8001c0c:	20000014 	.word	0x20000014

08001c10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c10:	b490      	push	{r4, r7}
 8001c12:	b08a      	sub	sp, #40	; 0x28
 8001c14:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c16:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <HAL_RCC_GetSysClockFreq+0xac>)
 8001c18:	1d3c      	adds	r4, r7, #4
 8001c1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c20:	f240 2301 	movw	r3, #513	; 0x201
 8001c24:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c3a:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d002      	beq.n	8001c50 <HAL_RCC_GetSysClockFreq+0x40>
 8001c4a:	2b08      	cmp	r3, #8
 8001c4c:	d003      	beq.n	8001c56 <HAL_RCC_GetSysClockFreq+0x46>
 8001c4e:	e02b      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c50:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c52:	623b      	str	r3, [r7, #32]
      break;
 8001c54:	e02b      	b.n	8001cae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	0c9b      	lsrs	r3, r3, #18
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	3328      	adds	r3, #40	; 0x28
 8001c60:	443b      	add	r3, r7
 8001c62:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c66:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d012      	beq.n	8001c98 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c72:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	0c5b      	lsrs	r3, r3, #17
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	3328      	adds	r3, #40	; 0x28
 8001c7e:	443b      	add	r3, r7
 8001c80:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c84:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	4a0e      	ldr	r2, [pc, #56]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c8a:	fb03 f202 	mul.w	r2, r3, r2
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
 8001c96:	e004      	b.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	4a0b      	ldr	r2, [pc, #44]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	623b      	str	r3, [r7, #32]
      break;
 8001ca6:	e002      	b.n	8001cae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001caa:	623b      	str	r3, [r7, #32]
      break;
 8001cac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cae:	6a3b      	ldr	r3, [r7, #32]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3728      	adds	r7, #40	; 0x28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc90      	pop	{r4, r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	08003330 	.word	0x08003330
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	007a1200 	.word	0x007a1200
 8001cc8:	003d0900 	.word	0x003d0900

08001ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd0:	4b02      	ldr	r3, [pc, #8]	; (8001cdc <HAL_RCC_GetHCLKFreq+0x10>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr
 8001cdc:	20000010 	.word	0x20000010

08001ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ce4:	f7ff fff2 	bl	8001ccc <HAL_RCC_GetHCLKFreq>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	0a1b      	lsrs	r3, r3, #8
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	4903      	ldr	r1, [pc, #12]	; (8001d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cf6:	5ccb      	ldrb	r3, [r1, r3]
 8001cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40021000 	.word	0x40021000
 8001d04:	08003350 	.word	0x08003350

08001d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d0c:	f7ff ffde 	bl	8001ccc <HAL_RCC_GetHCLKFreq>
 8001d10:	4602      	mov	r2, r0
 8001d12:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	0adb      	lsrs	r3, r3, #11
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	4903      	ldr	r1, [pc, #12]	; (8001d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d1e:	5ccb      	ldrb	r3, [r1, r3]
 8001d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	08003350 	.word	0x08003350

08001d30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <RCC_Delay+0x34>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <RCC_Delay+0x38>)
 8001d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d42:	0a5b      	lsrs	r3, r3, #9
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	fb02 f303 	mul.w	r3, r2, r3
 8001d4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d4c:	bf00      	nop
  }
  while (Delay --);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	1e5a      	subs	r2, r3, #1
 8001d52:	60fa      	str	r2, [r7, #12]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1f9      	bne.n	8001d4c <RCC_Delay+0x1c>
}
 8001d58:	bf00      	nop
 8001d5a:	bf00      	nop
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr
 8001d64:	20000010 	.word	0x20000010
 8001d68:	10624dd3 	.word	0x10624dd3

08001d6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e076      	b.n	8001e6c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d108      	bne.n	8001d98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d8e:	d009      	beq.n	8001da4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	61da      	str	r2, [r3, #28]
 8001d96:	e005      	b.n	8001da4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d106      	bne.n	8001dc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7fe fc9c 	bl	80006fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001dec:	431a      	orrs	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	431a      	orrs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e14:	431a      	orrs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e28:	ea42 0103 	orr.w	r1, r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	0c1a      	lsrs	r2, r3, #16
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f002 0204 	and.w	r2, r2, #4
 8001e4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	69da      	ldr	r2, [r3, #28]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_SPI_TransmitReceive_DMA+0x20>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e0e3      	b.n	800205c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ea2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8001eaa:	7dbb      	ldrb	r3, [r7, #22]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d00d      	beq.n	8001ecc <HAL_SPI_TransmitReceive_DMA+0x58>
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001eb6:	d106      	bne.n	8001ec6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d102      	bne.n	8001ec6 <HAL_SPI_TransmitReceive_DMA+0x52>
 8001ec0:	7dbb      	ldrb	r3, [r7, #22]
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d002      	beq.n	8001ecc <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001eca:	e0c2      	b.n	8002052 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d005      	beq.n	8001ede <HAL_SPI_TransmitReceive_DMA+0x6a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d002      	beq.n	8001ede <HAL_SPI_TransmitReceive_DMA+0x6a>
 8001ed8:	887b      	ldrh	r3, [r7, #2]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d102      	bne.n	8001ee4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001ee2:	e0b6      	b.n	8002052 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d003      	beq.n	8001ef8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2205      	movs	r2, #5
 8001ef4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	887a      	ldrh	r2, [r7, #2]
 8001f08:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	887a      	ldrh	r2, [r7, #2]
 8001f0e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	887a      	ldrh	r2, [r7, #2]
 8001f1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	887a      	ldrh	r2, [r7, #2]
 8001f20:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d108      	bne.n	8001f4c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3e:	4a49      	ldr	r2, [pc, #292]	; (8002064 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8001f40:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f46:	4a48      	ldr	r2, [pc, #288]	; (8002068 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8001f48:	629a      	str	r2, [r3, #40]	; 0x28
 8001f4a:	e007      	b.n	8001f5c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f50:	4a46      	ldr	r2, [pc, #280]	; (800206c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8001f52:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f58:	4a45      	ldr	r2, [pc, #276]	; (8002070 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8001f5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f60:	4a44      	ldr	r2, [pc, #272]	; (8002074 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8001f62:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f68:	2200      	movs	r2, #0
 8001f6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	330c      	adds	r3, #12
 8001f76:	4619      	mov	r1, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f82:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001f84:	f7fe ff8e 	bl	8000ea4 <HAL_DMA_Start_IT>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00c      	beq.n	8001fa8 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f92:	f043 0210 	orr.w	r2, r3, #16
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8001fa6:	e054      	b.n	8002052 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0201 	orr.w	r2, r2, #1
 8001fb6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fcc:	2200      	movs	r2, #0
 8001fce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	330c      	adds	r3, #12
 8001fe8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fee:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8001ff0:	f7fe ff58 	bl	8000ea4 <HAL_DMA_Start_IT>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00c      	beq.n	8002014 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffe:	f043 0210 	orr.w	r2, r3, #16
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002012:	e01e      	b.n	8002052 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800201e:	2b40      	cmp	r3, #64	; 0x40
 8002020:	d007      	beq.n	8002032 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002030:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f042 0220 	orr.w	r2, r2, #32
 8002040:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 0202 	orr.w	r2, r2, #2
 8002050:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800205a:	7dfb      	ldrb	r3, [r7, #23]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	080021e3 	.word	0x080021e3
 8002068:	080020af 	.word	0x080020af
 800206c:	080021ff 	.word	0x080021ff
 8002070:	08002155 	.word	0x08002155
 8002074:	0800221b 	.word	0x0800221b

08002078 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr

0800208a <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr

080020ae <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b084      	sub	sp, #16
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020bc:	f7fe fd5c 	bl	8000b78 <HAL_GetTick>
 80020c0:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0320 	and.w	r3, r3, #32
 80020cc:	2b20      	cmp	r3, #32
 80020ce:	d03b      	beq.n	8002148 <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0220 	bic.w	r2, r2, #32
 80020de:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10d      	bne.n	8002104 <SPI_DMAReceiveCplt+0x56>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020f0:	d108      	bne.n	8002104 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0203 	bic.w	r2, r2, #3
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	e007      	b.n	8002114 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0201 	bic.w	r2, r2, #1
 8002112:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	2164      	movs	r1, #100	; 0x64
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 f927 	bl	800236c <SPI_EndRxTransaction>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2220      	movs	r2, #32
 8002128:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f7fe fa61 	bl	8000608 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002146:	e002      	b.n	800214e <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f7ff ff95 	bl	8002078 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002162:	f7fe fd09 	bl	8000b78 <HAL_GetTick>
 8002166:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0320 	and.w	r3, r3, #32
 8002172:	2b20      	cmp	r3, #32
 8002174:	d02f      	beq.n	80021d6 <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0220 	bic.w	r2, r2, #32
 8002184:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	2164      	movs	r1, #100	; 0x64
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f000 f940 	bl	8002410 <SPI_EndRxTxTransaction>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d005      	beq.n	80021a2 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219a:	f043 0220 	orr.w	r2, r3, #32
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0203 	bic.w	r2, r2, #3
 80021b0:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f7fe fa1a 	bl	8000608 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80021d4:	e002      	b.n	80021dc <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f7fe f9ee 	bl	80005b8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b084      	sub	sp, #16
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f7ff ff4a 	bl	800208a <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f7ff ff45 	bl	800209c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002212:	bf00      	nop
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b084      	sub	sp, #16
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0203 	bic.w	r2, r2, #3
 8002236:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223c:	f043 0210 	orr.w	r2, r3, #16
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f7fe f9db 	bl	8000608 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	4613      	mov	r3, r2
 800226a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800226c:	f7fe fc84 	bl	8000b78 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002274:	1a9b      	subs	r3, r3, r2
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	4413      	add	r3, r2
 800227a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800227c:	f7fe fc7c 	bl	8000b78 <HAL_GetTick>
 8002280:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002282:	4b39      	ldr	r3, [pc, #228]	; (8002368 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	015b      	lsls	r3, r3, #5
 8002288:	0d1b      	lsrs	r3, r3, #20
 800228a:	69fa      	ldr	r2, [r7, #28]
 800228c:	fb02 f303 	mul.w	r3, r2, r3
 8002290:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002292:	e054      	b.n	800233e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229a:	d050      	beq.n	800233e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800229c:	f7fe fc6c 	bl	8000b78 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	69fa      	ldr	r2, [r7, #28]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d902      	bls.n	80022b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d13d      	bne.n	800232e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80022c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022ca:	d111      	bne.n	80022f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022d4:	d004      	beq.n	80022e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022de:	d107      	bne.n	80022f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022f8:	d10f      	bne.n	800231a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002318:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e017      	b.n	800235e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	3b01      	subs	r3, #1
 800233c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	4013      	ands	r3, r2
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	429a      	cmp	r2, r3
 800234c:	bf0c      	ite	eq
 800234e:	2301      	moveq	r3, #1
 8002350:	2300      	movne	r3, #0
 8002352:	b2db      	uxtb	r3, r3
 8002354:	461a      	mov	r2, r3
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	429a      	cmp	r2, r3
 800235a:	d19b      	bne.n	8002294 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3720      	adds	r7, #32
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000010 	.word	0x20000010

0800236c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af02      	add	r7, sp, #8
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002380:	d111      	bne.n	80023a6 <SPI_EndRxTransaction+0x3a>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800238a:	d004      	beq.n	8002396 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002394:	d107      	bne.n	80023a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023a4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023ae:	d117      	bne.n	80023e0 <SPI_EndRxTransaction+0x74>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b8:	d112      	bne.n	80023e0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2200      	movs	r2, #0
 80023c2:	2101      	movs	r1, #1
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f7ff ff49 	bl	800225c <SPI_WaitFlagStateUntilTimeout>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d01a      	beq.n	8002406 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d4:	f043 0220 	orr.w	r2, r3, #32
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e013      	b.n	8002408 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2200      	movs	r2, #0
 80023e8:	2180      	movs	r1, #128	; 0x80
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f7ff ff36 	bl	800225c <SPI_WaitFlagStateUntilTimeout>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d007      	beq.n	8002406 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fa:	f043 0220 	orr.w	r2, r3, #32
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e000      	b.n	8002408 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af02      	add	r7, sp, #8
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2200      	movs	r2, #0
 8002424:	2180      	movs	r1, #128	; 0x80
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f7ff ff18 	bl	800225c <SPI_WaitFlagStateUntilTimeout>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d007      	beq.n	8002442 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002436:	f043 0220 	orr.w	r2, r3, #32
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e000      	b.n	8002444 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e03f      	b.n	80024de <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7fe fab6 	bl	80009e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2224      	movs	r2, #36	; 0x24
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800248e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f905 	bl	80026a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695a      	ldr	r2, [r3, #20]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2220      	movs	r2, #32
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2220      	movs	r2, #32
 80024d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b08a      	sub	sp, #40	; 0x28
 80024ea:	af02      	add	r7, sp, #8
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	603b      	str	r3, [r7, #0]
 80024f2:	4613      	mov	r3, r2
 80024f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b20      	cmp	r3, #32
 8002504:	d17c      	bne.n	8002600 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <HAL_UART_Transmit+0x2c>
 800250c:	88fb      	ldrh	r3, [r7, #6]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e075      	b.n	8002602 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <HAL_UART_Transmit+0x3e>
 8002520:	2302      	movs	r3, #2
 8002522:	e06e      	b.n	8002602 <HAL_UART_Transmit+0x11c>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2221      	movs	r2, #33	; 0x21
 8002536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800253a:	f7fe fb1d 	bl	8000b78 <HAL_GetTick>
 800253e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	88fa      	ldrh	r2, [r7, #6]
 8002544:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	88fa      	ldrh	r2, [r7, #6]
 800254a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002554:	d108      	bne.n	8002568 <HAL_UART_Transmit+0x82>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d104      	bne.n	8002568 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	61bb      	str	r3, [r7, #24]
 8002566:	e003      	b.n	8002570 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800256c:	2300      	movs	r3, #0
 800256e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002578:	e02a      	b.n	80025d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2200      	movs	r2, #0
 8002582:	2180      	movs	r1, #128	; 0x80
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 f840 	bl	800260a <UART_WaitOnFlagUntilTimeout>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e036      	b.n	8002602 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10b      	bne.n	80025b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	3302      	adds	r3, #2
 80025ae:	61bb      	str	r3, [r7, #24]
 80025b0:	e007      	b.n	80025c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	781a      	ldrb	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	3301      	adds	r3, #1
 80025c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1cf      	bne.n	800257a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2200      	movs	r2, #0
 80025e2:	2140      	movs	r1, #64	; 0x40
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 f810 	bl	800260a <UART_WaitOnFlagUntilTimeout>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e006      	b.n	8002602 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	e000      	b.n	8002602 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002600:	2302      	movs	r3, #2
  }
}
 8002602:	4618      	mov	r0, r3
 8002604:	3720      	adds	r7, #32
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b084      	sub	sp, #16
 800260e:	af00      	add	r7, sp, #0
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	603b      	str	r3, [r7, #0]
 8002616:	4613      	mov	r3, r2
 8002618:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800261a:	e02c      	b.n	8002676 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002622:	d028      	beq.n	8002676 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d007      	beq.n	800263a <UART_WaitOnFlagUntilTimeout+0x30>
 800262a:	f7fe faa5 	bl	8000b78 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	429a      	cmp	r2, r3
 8002638:	d21d      	bcs.n	8002676 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002648:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695a      	ldr	r2, [r3, #20]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0201 	bic.w	r2, r2, #1
 8002658:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2220      	movs	r2, #32
 800265e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2220      	movs	r2, #32
 8002666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e00f      	b.n	8002696 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	4013      	ands	r3, r2
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	429a      	cmp	r2, r3
 8002684:	bf0c      	ite	eq
 8002686:	2301      	moveq	r3, #1
 8002688:	2300      	movne	r3, #0
 800268a:	b2db      	uxtb	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	429a      	cmp	r2, r3
 8002692:	d0c3      	beq.n	800261c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80026da:	f023 030c 	bic.w	r3, r3, #12
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	68b9      	ldr	r1, [r7, #8]
 80026e4:	430b      	orrs	r3, r1
 80026e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699a      	ldr	r2, [r3, #24]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a2c      	ldr	r2, [pc, #176]	; (80027b4 <UART_SetConfig+0x114>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d103      	bne.n	8002710 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002708:	f7ff fafe 	bl	8001d08 <HAL_RCC_GetPCLK2Freq>
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	e002      	b.n	8002716 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002710:	f7ff fae6 	bl	8001ce0 <HAL_RCC_GetPCLK1Freq>
 8002714:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	009a      	lsls	r2, r3, #2
 8002720:	441a      	add	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	fbb2 f3f3 	udiv	r3, r2, r3
 800272c:	4a22      	ldr	r2, [pc, #136]	; (80027b8 <UART_SetConfig+0x118>)
 800272e:	fba2 2303 	umull	r2, r3, r2, r3
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	0119      	lsls	r1, r3, #4
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4613      	mov	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	009a      	lsls	r2, r3, #2
 8002740:	441a      	add	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	fbb2 f2f3 	udiv	r2, r2, r3
 800274c:	4b1a      	ldr	r3, [pc, #104]	; (80027b8 <UART_SetConfig+0x118>)
 800274e:	fba3 0302 	umull	r0, r3, r3, r2
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	2064      	movs	r0, #100	; 0x64
 8002756:	fb00 f303 	mul.w	r3, r0, r3
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	3332      	adds	r3, #50	; 0x32
 8002760:	4a15      	ldr	r2, [pc, #84]	; (80027b8 <UART_SetConfig+0x118>)
 8002762:	fba2 2303 	umull	r2, r3, r2, r3
 8002766:	095b      	lsrs	r3, r3, #5
 8002768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800276c:	4419      	add	r1, r3
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	009a      	lsls	r2, r3, #2
 8002778:	441a      	add	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	fbb2 f2f3 	udiv	r2, r2, r3
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <UART_SetConfig+0x118>)
 8002786:	fba3 0302 	umull	r0, r3, r3, r2
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	2064      	movs	r0, #100	; 0x64
 800278e:	fb00 f303 	mul.w	r3, r0, r3
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	3332      	adds	r3, #50	; 0x32
 8002798:	4a07      	ldr	r2, [pc, #28]	; (80027b8 <UART_SetConfig+0x118>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	f003 020f 	and.w	r2, r3, #15
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	440a      	add	r2, r1
 80027aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80027ac:	bf00      	nop
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40013800 	.word	0x40013800
 80027b8:	51eb851f 	.word	0x51eb851f

080027bc <__errno>:
 80027bc:	4b01      	ldr	r3, [pc, #4]	; (80027c4 <__errno+0x8>)
 80027be:	6818      	ldr	r0, [r3, #0]
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	2000001c 	.word	0x2000001c

080027c8 <__libc_init_array>:
 80027c8:	b570      	push	{r4, r5, r6, lr}
 80027ca:	2600      	movs	r6, #0
 80027cc:	4d0c      	ldr	r5, [pc, #48]	; (8002800 <__libc_init_array+0x38>)
 80027ce:	4c0d      	ldr	r4, [pc, #52]	; (8002804 <__libc_init_array+0x3c>)
 80027d0:	1b64      	subs	r4, r4, r5
 80027d2:	10a4      	asrs	r4, r4, #2
 80027d4:	42a6      	cmp	r6, r4
 80027d6:	d109      	bne.n	80027ec <__libc_init_array+0x24>
 80027d8:	f000 fcd0 	bl	800317c <_init>
 80027dc:	2600      	movs	r6, #0
 80027de:	4d0a      	ldr	r5, [pc, #40]	; (8002808 <__libc_init_array+0x40>)
 80027e0:	4c0a      	ldr	r4, [pc, #40]	; (800280c <__libc_init_array+0x44>)
 80027e2:	1b64      	subs	r4, r4, r5
 80027e4:	10a4      	asrs	r4, r4, #2
 80027e6:	42a6      	cmp	r6, r4
 80027e8:	d105      	bne.n	80027f6 <__libc_init_array+0x2e>
 80027ea:	bd70      	pop	{r4, r5, r6, pc}
 80027ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80027f0:	4798      	blx	r3
 80027f2:	3601      	adds	r6, #1
 80027f4:	e7ee      	b.n	80027d4 <__libc_init_array+0xc>
 80027f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80027fa:	4798      	blx	r3
 80027fc:	3601      	adds	r6, #1
 80027fe:	e7f2      	b.n	80027e6 <__libc_init_array+0x1e>
 8002800:	0800338c 	.word	0x0800338c
 8002804:	0800338c 	.word	0x0800338c
 8002808:	0800338c 	.word	0x0800338c
 800280c:	08003390 	.word	0x08003390

08002810 <memset>:
 8002810:	4603      	mov	r3, r0
 8002812:	4402      	add	r2, r0
 8002814:	4293      	cmp	r3, r2
 8002816:	d100      	bne.n	800281a <memset+0xa>
 8002818:	4770      	bx	lr
 800281a:	f803 1b01 	strb.w	r1, [r3], #1
 800281e:	e7f9      	b.n	8002814 <memset+0x4>

08002820 <sniprintf>:
 8002820:	b40c      	push	{r2, r3}
 8002822:	b530      	push	{r4, r5, lr}
 8002824:	4b17      	ldr	r3, [pc, #92]	; (8002884 <sniprintf+0x64>)
 8002826:	1e0c      	subs	r4, r1, #0
 8002828:	681d      	ldr	r5, [r3, #0]
 800282a:	b09d      	sub	sp, #116	; 0x74
 800282c:	da08      	bge.n	8002840 <sniprintf+0x20>
 800282e:	238b      	movs	r3, #139	; 0x8b
 8002830:	f04f 30ff 	mov.w	r0, #4294967295
 8002834:	602b      	str	r3, [r5, #0]
 8002836:	b01d      	add	sp, #116	; 0x74
 8002838:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800283c:	b002      	add	sp, #8
 800283e:	4770      	bx	lr
 8002840:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002844:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002848:	bf0c      	ite	eq
 800284a:	4623      	moveq	r3, r4
 800284c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002850:	9304      	str	r3, [sp, #16]
 8002852:	9307      	str	r3, [sp, #28]
 8002854:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002858:	9002      	str	r0, [sp, #8]
 800285a:	9006      	str	r0, [sp, #24]
 800285c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002860:	4628      	mov	r0, r5
 8002862:	ab21      	add	r3, sp, #132	; 0x84
 8002864:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002866:	a902      	add	r1, sp, #8
 8002868:	9301      	str	r3, [sp, #4]
 800286a:	f000 f889 	bl	8002980 <_svfiprintf_r>
 800286e:	1c43      	adds	r3, r0, #1
 8002870:	bfbc      	itt	lt
 8002872:	238b      	movlt	r3, #139	; 0x8b
 8002874:	602b      	strlt	r3, [r5, #0]
 8002876:	2c00      	cmp	r4, #0
 8002878:	d0dd      	beq.n	8002836 <sniprintf+0x16>
 800287a:	2200      	movs	r2, #0
 800287c:	9b02      	ldr	r3, [sp, #8]
 800287e:	701a      	strb	r2, [r3, #0]
 8002880:	e7d9      	b.n	8002836 <sniprintf+0x16>
 8002882:	bf00      	nop
 8002884:	2000001c 	.word	0x2000001c

08002888 <siprintf>:
 8002888:	b40e      	push	{r1, r2, r3}
 800288a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800288e:	b500      	push	{lr}
 8002890:	b09c      	sub	sp, #112	; 0x70
 8002892:	ab1d      	add	r3, sp, #116	; 0x74
 8002894:	9002      	str	r0, [sp, #8]
 8002896:	9006      	str	r0, [sp, #24]
 8002898:	9107      	str	r1, [sp, #28]
 800289a:	9104      	str	r1, [sp, #16]
 800289c:	4808      	ldr	r0, [pc, #32]	; (80028c0 <siprintf+0x38>)
 800289e:	4909      	ldr	r1, [pc, #36]	; (80028c4 <siprintf+0x3c>)
 80028a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80028a4:	9105      	str	r1, [sp, #20]
 80028a6:	6800      	ldr	r0, [r0, #0]
 80028a8:	a902      	add	r1, sp, #8
 80028aa:	9301      	str	r3, [sp, #4]
 80028ac:	f000 f868 	bl	8002980 <_svfiprintf_r>
 80028b0:	2200      	movs	r2, #0
 80028b2:	9b02      	ldr	r3, [sp, #8]
 80028b4:	701a      	strb	r2, [r3, #0]
 80028b6:	b01c      	add	sp, #112	; 0x70
 80028b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80028bc:	b003      	add	sp, #12
 80028be:	4770      	bx	lr
 80028c0:	2000001c 	.word	0x2000001c
 80028c4:	ffff0208 	.word	0xffff0208

080028c8 <__ssputs_r>:
 80028c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028cc:	688e      	ldr	r6, [r1, #8]
 80028ce:	4682      	mov	sl, r0
 80028d0:	429e      	cmp	r6, r3
 80028d2:	460c      	mov	r4, r1
 80028d4:	4690      	mov	r8, r2
 80028d6:	461f      	mov	r7, r3
 80028d8:	d838      	bhi.n	800294c <__ssputs_r+0x84>
 80028da:	898a      	ldrh	r2, [r1, #12]
 80028dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80028e0:	d032      	beq.n	8002948 <__ssputs_r+0x80>
 80028e2:	6825      	ldr	r5, [r4, #0]
 80028e4:	6909      	ldr	r1, [r1, #16]
 80028e6:	3301      	adds	r3, #1
 80028e8:	eba5 0901 	sub.w	r9, r5, r1
 80028ec:	6965      	ldr	r5, [r4, #20]
 80028ee:	444b      	add	r3, r9
 80028f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80028f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80028f8:	106d      	asrs	r5, r5, #1
 80028fa:	429d      	cmp	r5, r3
 80028fc:	bf38      	it	cc
 80028fe:	461d      	movcc	r5, r3
 8002900:	0553      	lsls	r3, r2, #21
 8002902:	d531      	bpl.n	8002968 <__ssputs_r+0xa0>
 8002904:	4629      	mov	r1, r5
 8002906:	f000 fb6f 	bl	8002fe8 <_malloc_r>
 800290a:	4606      	mov	r6, r0
 800290c:	b950      	cbnz	r0, 8002924 <__ssputs_r+0x5c>
 800290e:	230c      	movs	r3, #12
 8002910:	f04f 30ff 	mov.w	r0, #4294967295
 8002914:	f8ca 3000 	str.w	r3, [sl]
 8002918:	89a3      	ldrh	r3, [r4, #12]
 800291a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800291e:	81a3      	strh	r3, [r4, #12]
 8002920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002924:	464a      	mov	r2, r9
 8002926:	6921      	ldr	r1, [r4, #16]
 8002928:	f000 face 	bl	8002ec8 <memcpy>
 800292c:	89a3      	ldrh	r3, [r4, #12]
 800292e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002936:	81a3      	strh	r3, [r4, #12]
 8002938:	6126      	str	r6, [r4, #16]
 800293a:	444e      	add	r6, r9
 800293c:	6026      	str	r6, [r4, #0]
 800293e:	463e      	mov	r6, r7
 8002940:	6165      	str	r5, [r4, #20]
 8002942:	eba5 0509 	sub.w	r5, r5, r9
 8002946:	60a5      	str	r5, [r4, #8]
 8002948:	42be      	cmp	r6, r7
 800294a:	d900      	bls.n	800294e <__ssputs_r+0x86>
 800294c:	463e      	mov	r6, r7
 800294e:	4632      	mov	r2, r6
 8002950:	4641      	mov	r1, r8
 8002952:	6820      	ldr	r0, [r4, #0]
 8002954:	f000 fac6 	bl	8002ee4 <memmove>
 8002958:	68a3      	ldr	r3, [r4, #8]
 800295a:	2000      	movs	r0, #0
 800295c:	1b9b      	subs	r3, r3, r6
 800295e:	60a3      	str	r3, [r4, #8]
 8002960:	6823      	ldr	r3, [r4, #0]
 8002962:	4433      	add	r3, r6
 8002964:	6023      	str	r3, [r4, #0]
 8002966:	e7db      	b.n	8002920 <__ssputs_r+0x58>
 8002968:	462a      	mov	r2, r5
 800296a:	f000 fbb1 	bl	80030d0 <_realloc_r>
 800296e:	4606      	mov	r6, r0
 8002970:	2800      	cmp	r0, #0
 8002972:	d1e1      	bne.n	8002938 <__ssputs_r+0x70>
 8002974:	4650      	mov	r0, sl
 8002976:	6921      	ldr	r1, [r4, #16]
 8002978:	f000 face 	bl	8002f18 <_free_r>
 800297c:	e7c7      	b.n	800290e <__ssputs_r+0x46>
	...

08002980 <_svfiprintf_r>:
 8002980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002984:	4698      	mov	r8, r3
 8002986:	898b      	ldrh	r3, [r1, #12]
 8002988:	4607      	mov	r7, r0
 800298a:	061b      	lsls	r3, r3, #24
 800298c:	460d      	mov	r5, r1
 800298e:	4614      	mov	r4, r2
 8002990:	b09d      	sub	sp, #116	; 0x74
 8002992:	d50e      	bpl.n	80029b2 <_svfiprintf_r+0x32>
 8002994:	690b      	ldr	r3, [r1, #16]
 8002996:	b963      	cbnz	r3, 80029b2 <_svfiprintf_r+0x32>
 8002998:	2140      	movs	r1, #64	; 0x40
 800299a:	f000 fb25 	bl	8002fe8 <_malloc_r>
 800299e:	6028      	str	r0, [r5, #0]
 80029a0:	6128      	str	r0, [r5, #16]
 80029a2:	b920      	cbnz	r0, 80029ae <_svfiprintf_r+0x2e>
 80029a4:	230c      	movs	r3, #12
 80029a6:	603b      	str	r3, [r7, #0]
 80029a8:	f04f 30ff 	mov.w	r0, #4294967295
 80029ac:	e0d1      	b.n	8002b52 <_svfiprintf_r+0x1d2>
 80029ae:	2340      	movs	r3, #64	; 0x40
 80029b0:	616b      	str	r3, [r5, #20]
 80029b2:	2300      	movs	r3, #0
 80029b4:	9309      	str	r3, [sp, #36]	; 0x24
 80029b6:	2320      	movs	r3, #32
 80029b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80029bc:	2330      	movs	r3, #48	; 0x30
 80029be:	f04f 0901 	mov.w	r9, #1
 80029c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80029c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002b6c <_svfiprintf_r+0x1ec>
 80029ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80029ce:	4623      	mov	r3, r4
 80029d0:	469a      	mov	sl, r3
 80029d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029d6:	b10a      	cbz	r2, 80029dc <_svfiprintf_r+0x5c>
 80029d8:	2a25      	cmp	r2, #37	; 0x25
 80029da:	d1f9      	bne.n	80029d0 <_svfiprintf_r+0x50>
 80029dc:	ebba 0b04 	subs.w	fp, sl, r4
 80029e0:	d00b      	beq.n	80029fa <_svfiprintf_r+0x7a>
 80029e2:	465b      	mov	r3, fp
 80029e4:	4622      	mov	r2, r4
 80029e6:	4629      	mov	r1, r5
 80029e8:	4638      	mov	r0, r7
 80029ea:	f7ff ff6d 	bl	80028c8 <__ssputs_r>
 80029ee:	3001      	adds	r0, #1
 80029f0:	f000 80aa 	beq.w	8002b48 <_svfiprintf_r+0x1c8>
 80029f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029f6:	445a      	add	r2, fp
 80029f8:	9209      	str	r2, [sp, #36]	; 0x24
 80029fa:	f89a 3000 	ldrb.w	r3, [sl]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 80a2 	beq.w	8002b48 <_svfiprintf_r+0x1c8>
 8002a04:	2300      	movs	r3, #0
 8002a06:	f04f 32ff 	mov.w	r2, #4294967295
 8002a0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a0e:	f10a 0a01 	add.w	sl, sl, #1
 8002a12:	9304      	str	r3, [sp, #16]
 8002a14:	9307      	str	r3, [sp, #28]
 8002a16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a1a:	931a      	str	r3, [sp, #104]	; 0x68
 8002a1c:	4654      	mov	r4, sl
 8002a1e:	2205      	movs	r2, #5
 8002a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a24:	4851      	ldr	r0, [pc, #324]	; (8002b6c <_svfiprintf_r+0x1ec>)
 8002a26:	f000 fa41 	bl	8002eac <memchr>
 8002a2a:	9a04      	ldr	r2, [sp, #16]
 8002a2c:	b9d8      	cbnz	r0, 8002a66 <_svfiprintf_r+0xe6>
 8002a2e:	06d0      	lsls	r0, r2, #27
 8002a30:	bf44      	itt	mi
 8002a32:	2320      	movmi	r3, #32
 8002a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a38:	0711      	lsls	r1, r2, #28
 8002a3a:	bf44      	itt	mi
 8002a3c:	232b      	movmi	r3, #43	; 0x2b
 8002a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a42:	f89a 3000 	ldrb.w	r3, [sl]
 8002a46:	2b2a      	cmp	r3, #42	; 0x2a
 8002a48:	d015      	beq.n	8002a76 <_svfiprintf_r+0xf6>
 8002a4a:	4654      	mov	r4, sl
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	f04f 0c0a 	mov.w	ip, #10
 8002a52:	9a07      	ldr	r2, [sp, #28]
 8002a54:	4621      	mov	r1, r4
 8002a56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a5a:	3b30      	subs	r3, #48	; 0x30
 8002a5c:	2b09      	cmp	r3, #9
 8002a5e:	d94e      	bls.n	8002afe <_svfiprintf_r+0x17e>
 8002a60:	b1b0      	cbz	r0, 8002a90 <_svfiprintf_r+0x110>
 8002a62:	9207      	str	r2, [sp, #28]
 8002a64:	e014      	b.n	8002a90 <_svfiprintf_r+0x110>
 8002a66:	eba0 0308 	sub.w	r3, r0, r8
 8002a6a:	fa09 f303 	lsl.w	r3, r9, r3
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	46a2      	mov	sl, r4
 8002a72:	9304      	str	r3, [sp, #16]
 8002a74:	e7d2      	b.n	8002a1c <_svfiprintf_r+0x9c>
 8002a76:	9b03      	ldr	r3, [sp, #12]
 8002a78:	1d19      	adds	r1, r3, #4
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	9103      	str	r1, [sp, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	bfbb      	ittet	lt
 8002a82:	425b      	neglt	r3, r3
 8002a84:	f042 0202 	orrlt.w	r2, r2, #2
 8002a88:	9307      	strge	r3, [sp, #28]
 8002a8a:	9307      	strlt	r3, [sp, #28]
 8002a8c:	bfb8      	it	lt
 8002a8e:	9204      	strlt	r2, [sp, #16]
 8002a90:	7823      	ldrb	r3, [r4, #0]
 8002a92:	2b2e      	cmp	r3, #46	; 0x2e
 8002a94:	d10c      	bne.n	8002ab0 <_svfiprintf_r+0x130>
 8002a96:	7863      	ldrb	r3, [r4, #1]
 8002a98:	2b2a      	cmp	r3, #42	; 0x2a
 8002a9a:	d135      	bne.n	8002b08 <_svfiprintf_r+0x188>
 8002a9c:	9b03      	ldr	r3, [sp, #12]
 8002a9e:	3402      	adds	r4, #2
 8002aa0:	1d1a      	adds	r2, r3, #4
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	9203      	str	r2, [sp, #12]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	bfb8      	it	lt
 8002aaa:	f04f 33ff 	movlt.w	r3, #4294967295
 8002aae:	9305      	str	r3, [sp, #20]
 8002ab0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002b70 <_svfiprintf_r+0x1f0>
 8002ab4:	2203      	movs	r2, #3
 8002ab6:	4650      	mov	r0, sl
 8002ab8:	7821      	ldrb	r1, [r4, #0]
 8002aba:	f000 f9f7 	bl	8002eac <memchr>
 8002abe:	b140      	cbz	r0, 8002ad2 <_svfiprintf_r+0x152>
 8002ac0:	2340      	movs	r3, #64	; 0x40
 8002ac2:	eba0 000a 	sub.w	r0, r0, sl
 8002ac6:	fa03 f000 	lsl.w	r0, r3, r0
 8002aca:	9b04      	ldr	r3, [sp, #16]
 8002acc:	3401      	adds	r4, #1
 8002ace:	4303      	orrs	r3, r0
 8002ad0:	9304      	str	r3, [sp, #16]
 8002ad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ad6:	2206      	movs	r2, #6
 8002ad8:	4826      	ldr	r0, [pc, #152]	; (8002b74 <_svfiprintf_r+0x1f4>)
 8002ada:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ade:	f000 f9e5 	bl	8002eac <memchr>
 8002ae2:	2800      	cmp	r0, #0
 8002ae4:	d038      	beq.n	8002b58 <_svfiprintf_r+0x1d8>
 8002ae6:	4b24      	ldr	r3, [pc, #144]	; (8002b78 <_svfiprintf_r+0x1f8>)
 8002ae8:	bb1b      	cbnz	r3, 8002b32 <_svfiprintf_r+0x1b2>
 8002aea:	9b03      	ldr	r3, [sp, #12]
 8002aec:	3307      	adds	r3, #7
 8002aee:	f023 0307 	bic.w	r3, r3, #7
 8002af2:	3308      	adds	r3, #8
 8002af4:	9303      	str	r3, [sp, #12]
 8002af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002af8:	4433      	add	r3, r6
 8002afa:	9309      	str	r3, [sp, #36]	; 0x24
 8002afc:	e767      	b.n	80029ce <_svfiprintf_r+0x4e>
 8002afe:	460c      	mov	r4, r1
 8002b00:	2001      	movs	r0, #1
 8002b02:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b06:	e7a5      	b.n	8002a54 <_svfiprintf_r+0xd4>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f04f 0c0a 	mov.w	ip, #10
 8002b0e:	4619      	mov	r1, r3
 8002b10:	3401      	adds	r4, #1
 8002b12:	9305      	str	r3, [sp, #20]
 8002b14:	4620      	mov	r0, r4
 8002b16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b1a:	3a30      	subs	r2, #48	; 0x30
 8002b1c:	2a09      	cmp	r2, #9
 8002b1e:	d903      	bls.n	8002b28 <_svfiprintf_r+0x1a8>
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0c5      	beq.n	8002ab0 <_svfiprintf_r+0x130>
 8002b24:	9105      	str	r1, [sp, #20]
 8002b26:	e7c3      	b.n	8002ab0 <_svfiprintf_r+0x130>
 8002b28:	4604      	mov	r4, r0
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b30:	e7f0      	b.n	8002b14 <_svfiprintf_r+0x194>
 8002b32:	ab03      	add	r3, sp, #12
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	462a      	mov	r2, r5
 8002b38:	4638      	mov	r0, r7
 8002b3a:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <_svfiprintf_r+0x1fc>)
 8002b3c:	a904      	add	r1, sp, #16
 8002b3e:	f3af 8000 	nop.w
 8002b42:	1c42      	adds	r2, r0, #1
 8002b44:	4606      	mov	r6, r0
 8002b46:	d1d6      	bne.n	8002af6 <_svfiprintf_r+0x176>
 8002b48:	89ab      	ldrh	r3, [r5, #12]
 8002b4a:	065b      	lsls	r3, r3, #25
 8002b4c:	f53f af2c 	bmi.w	80029a8 <_svfiprintf_r+0x28>
 8002b50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b52:	b01d      	add	sp, #116	; 0x74
 8002b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b58:	ab03      	add	r3, sp, #12
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	462a      	mov	r2, r5
 8002b5e:	4638      	mov	r0, r7
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <_svfiprintf_r+0x1fc>)
 8002b62:	a904      	add	r1, sp, #16
 8002b64:	f000 f87c 	bl	8002c60 <_printf_i>
 8002b68:	e7eb      	b.n	8002b42 <_svfiprintf_r+0x1c2>
 8002b6a:	bf00      	nop
 8002b6c:	08003358 	.word	0x08003358
 8002b70:	0800335e 	.word	0x0800335e
 8002b74:	08003362 	.word	0x08003362
 8002b78:	00000000 	.word	0x00000000
 8002b7c:	080028c9 	.word	0x080028c9

08002b80 <_printf_common>:
 8002b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b84:	4616      	mov	r6, r2
 8002b86:	4699      	mov	r9, r3
 8002b88:	688a      	ldr	r2, [r1, #8]
 8002b8a:	690b      	ldr	r3, [r1, #16]
 8002b8c:	4607      	mov	r7, r0
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	bfb8      	it	lt
 8002b92:	4613      	movlt	r3, r2
 8002b94:	6033      	str	r3, [r6, #0]
 8002b96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b9a:	460c      	mov	r4, r1
 8002b9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ba0:	b10a      	cbz	r2, 8002ba6 <_printf_common+0x26>
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	6033      	str	r3, [r6, #0]
 8002ba6:	6823      	ldr	r3, [r4, #0]
 8002ba8:	0699      	lsls	r1, r3, #26
 8002baa:	bf42      	ittt	mi
 8002bac:	6833      	ldrmi	r3, [r6, #0]
 8002bae:	3302      	addmi	r3, #2
 8002bb0:	6033      	strmi	r3, [r6, #0]
 8002bb2:	6825      	ldr	r5, [r4, #0]
 8002bb4:	f015 0506 	ands.w	r5, r5, #6
 8002bb8:	d106      	bne.n	8002bc8 <_printf_common+0x48>
 8002bba:	f104 0a19 	add.w	sl, r4, #25
 8002bbe:	68e3      	ldr	r3, [r4, #12]
 8002bc0:	6832      	ldr	r2, [r6, #0]
 8002bc2:	1a9b      	subs	r3, r3, r2
 8002bc4:	42ab      	cmp	r3, r5
 8002bc6:	dc28      	bgt.n	8002c1a <_printf_common+0x9a>
 8002bc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002bcc:	1e13      	subs	r3, r2, #0
 8002bce:	6822      	ldr	r2, [r4, #0]
 8002bd0:	bf18      	it	ne
 8002bd2:	2301      	movne	r3, #1
 8002bd4:	0692      	lsls	r2, r2, #26
 8002bd6:	d42d      	bmi.n	8002c34 <_printf_common+0xb4>
 8002bd8:	4649      	mov	r1, r9
 8002bda:	4638      	mov	r0, r7
 8002bdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002be0:	47c0      	blx	r8
 8002be2:	3001      	adds	r0, #1
 8002be4:	d020      	beq.n	8002c28 <_printf_common+0xa8>
 8002be6:	6823      	ldr	r3, [r4, #0]
 8002be8:	68e5      	ldr	r5, [r4, #12]
 8002bea:	f003 0306 	and.w	r3, r3, #6
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	bf18      	it	ne
 8002bf2:	2500      	movne	r5, #0
 8002bf4:	6832      	ldr	r2, [r6, #0]
 8002bf6:	f04f 0600 	mov.w	r6, #0
 8002bfa:	68a3      	ldr	r3, [r4, #8]
 8002bfc:	bf08      	it	eq
 8002bfe:	1aad      	subeq	r5, r5, r2
 8002c00:	6922      	ldr	r2, [r4, #16]
 8002c02:	bf08      	it	eq
 8002c04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	bfc4      	itt	gt
 8002c0c:	1a9b      	subgt	r3, r3, r2
 8002c0e:	18ed      	addgt	r5, r5, r3
 8002c10:	341a      	adds	r4, #26
 8002c12:	42b5      	cmp	r5, r6
 8002c14:	d11a      	bne.n	8002c4c <_printf_common+0xcc>
 8002c16:	2000      	movs	r0, #0
 8002c18:	e008      	b.n	8002c2c <_printf_common+0xac>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	4652      	mov	r2, sl
 8002c1e:	4649      	mov	r1, r9
 8002c20:	4638      	mov	r0, r7
 8002c22:	47c0      	blx	r8
 8002c24:	3001      	adds	r0, #1
 8002c26:	d103      	bne.n	8002c30 <_printf_common+0xb0>
 8002c28:	f04f 30ff 	mov.w	r0, #4294967295
 8002c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c30:	3501      	adds	r5, #1
 8002c32:	e7c4      	b.n	8002bbe <_printf_common+0x3e>
 8002c34:	2030      	movs	r0, #48	; 0x30
 8002c36:	18e1      	adds	r1, r4, r3
 8002c38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c42:	4422      	add	r2, r4
 8002c44:	3302      	adds	r3, #2
 8002c46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c4a:	e7c5      	b.n	8002bd8 <_printf_common+0x58>
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	4622      	mov	r2, r4
 8002c50:	4649      	mov	r1, r9
 8002c52:	4638      	mov	r0, r7
 8002c54:	47c0      	blx	r8
 8002c56:	3001      	adds	r0, #1
 8002c58:	d0e6      	beq.n	8002c28 <_printf_common+0xa8>
 8002c5a:	3601      	adds	r6, #1
 8002c5c:	e7d9      	b.n	8002c12 <_printf_common+0x92>
	...

08002c60 <_printf_i>:
 8002c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c64:	7e0f      	ldrb	r7, [r1, #24]
 8002c66:	4691      	mov	r9, r2
 8002c68:	2f78      	cmp	r7, #120	; 0x78
 8002c6a:	4680      	mov	r8, r0
 8002c6c:	460c      	mov	r4, r1
 8002c6e:	469a      	mov	sl, r3
 8002c70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002c72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002c76:	d807      	bhi.n	8002c88 <_printf_i+0x28>
 8002c78:	2f62      	cmp	r7, #98	; 0x62
 8002c7a:	d80a      	bhi.n	8002c92 <_printf_i+0x32>
 8002c7c:	2f00      	cmp	r7, #0
 8002c7e:	f000 80d9 	beq.w	8002e34 <_printf_i+0x1d4>
 8002c82:	2f58      	cmp	r7, #88	; 0x58
 8002c84:	f000 80a4 	beq.w	8002dd0 <_printf_i+0x170>
 8002c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c90:	e03a      	b.n	8002d08 <_printf_i+0xa8>
 8002c92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c96:	2b15      	cmp	r3, #21
 8002c98:	d8f6      	bhi.n	8002c88 <_printf_i+0x28>
 8002c9a:	a101      	add	r1, pc, #4	; (adr r1, 8002ca0 <_printf_i+0x40>)
 8002c9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ca0:	08002cf9 	.word	0x08002cf9
 8002ca4:	08002d0d 	.word	0x08002d0d
 8002ca8:	08002c89 	.word	0x08002c89
 8002cac:	08002c89 	.word	0x08002c89
 8002cb0:	08002c89 	.word	0x08002c89
 8002cb4:	08002c89 	.word	0x08002c89
 8002cb8:	08002d0d 	.word	0x08002d0d
 8002cbc:	08002c89 	.word	0x08002c89
 8002cc0:	08002c89 	.word	0x08002c89
 8002cc4:	08002c89 	.word	0x08002c89
 8002cc8:	08002c89 	.word	0x08002c89
 8002ccc:	08002e1b 	.word	0x08002e1b
 8002cd0:	08002d3d 	.word	0x08002d3d
 8002cd4:	08002dfd 	.word	0x08002dfd
 8002cd8:	08002c89 	.word	0x08002c89
 8002cdc:	08002c89 	.word	0x08002c89
 8002ce0:	08002e3d 	.word	0x08002e3d
 8002ce4:	08002c89 	.word	0x08002c89
 8002ce8:	08002d3d 	.word	0x08002d3d
 8002cec:	08002c89 	.word	0x08002c89
 8002cf0:	08002c89 	.word	0x08002c89
 8002cf4:	08002e05 	.word	0x08002e05
 8002cf8:	682b      	ldr	r3, [r5, #0]
 8002cfa:	1d1a      	adds	r2, r3, #4
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	602a      	str	r2, [r5, #0]
 8002d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e0a4      	b.n	8002e56 <_printf_i+0x1f6>
 8002d0c:	6820      	ldr	r0, [r4, #0]
 8002d0e:	6829      	ldr	r1, [r5, #0]
 8002d10:	0606      	lsls	r6, r0, #24
 8002d12:	f101 0304 	add.w	r3, r1, #4
 8002d16:	d50a      	bpl.n	8002d2e <_printf_i+0xce>
 8002d18:	680e      	ldr	r6, [r1, #0]
 8002d1a:	602b      	str	r3, [r5, #0]
 8002d1c:	2e00      	cmp	r6, #0
 8002d1e:	da03      	bge.n	8002d28 <_printf_i+0xc8>
 8002d20:	232d      	movs	r3, #45	; 0x2d
 8002d22:	4276      	negs	r6, r6
 8002d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d28:	230a      	movs	r3, #10
 8002d2a:	485e      	ldr	r0, [pc, #376]	; (8002ea4 <_printf_i+0x244>)
 8002d2c:	e019      	b.n	8002d62 <_printf_i+0x102>
 8002d2e:	680e      	ldr	r6, [r1, #0]
 8002d30:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d34:	602b      	str	r3, [r5, #0]
 8002d36:	bf18      	it	ne
 8002d38:	b236      	sxthne	r6, r6
 8002d3a:	e7ef      	b.n	8002d1c <_printf_i+0xbc>
 8002d3c:	682b      	ldr	r3, [r5, #0]
 8002d3e:	6820      	ldr	r0, [r4, #0]
 8002d40:	1d19      	adds	r1, r3, #4
 8002d42:	6029      	str	r1, [r5, #0]
 8002d44:	0601      	lsls	r1, r0, #24
 8002d46:	d501      	bpl.n	8002d4c <_printf_i+0xec>
 8002d48:	681e      	ldr	r6, [r3, #0]
 8002d4a:	e002      	b.n	8002d52 <_printf_i+0xf2>
 8002d4c:	0646      	lsls	r6, r0, #25
 8002d4e:	d5fb      	bpl.n	8002d48 <_printf_i+0xe8>
 8002d50:	881e      	ldrh	r6, [r3, #0]
 8002d52:	2f6f      	cmp	r7, #111	; 0x6f
 8002d54:	bf0c      	ite	eq
 8002d56:	2308      	moveq	r3, #8
 8002d58:	230a      	movne	r3, #10
 8002d5a:	4852      	ldr	r0, [pc, #328]	; (8002ea4 <_printf_i+0x244>)
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d62:	6865      	ldr	r5, [r4, #4]
 8002d64:	2d00      	cmp	r5, #0
 8002d66:	bfa8      	it	ge
 8002d68:	6821      	ldrge	r1, [r4, #0]
 8002d6a:	60a5      	str	r5, [r4, #8]
 8002d6c:	bfa4      	itt	ge
 8002d6e:	f021 0104 	bicge.w	r1, r1, #4
 8002d72:	6021      	strge	r1, [r4, #0]
 8002d74:	b90e      	cbnz	r6, 8002d7a <_printf_i+0x11a>
 8002d76:	2d00      	cmp	r5, #0
 8002d78:	d04d      	beq.n	8002e16 <_printf_i+0x1b6>
 8002d7a:	4615      	mov	r5, r2
 8002d7c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002d80:	fb03 6711 	mls	r7, r3, r1, r6
 8002d84:	5dc7      	ldrb	r7, [r0, r7]
 8002d86:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002d8a:	4637      	mov	r7, r6
 8002d8c:	42bb      	cmp	r3, r7
 8002d8e:	460e      	mov	r6, r1
 8002d90:	d9f4      	bls.n	8002d7c <_printf_i+0x11c>
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	d10b      	bne.n	8002dae <_printf_i+0x14e>
 8002d96:	6823      	ldr	r3, [r4, #0]
 8002d98:	07de      	lsls	r6, r3, #31
 8002d9a:	d508      	bpl.n	8002dae <_printf_i+0x14e>
 8002d9c:	6923      	ldr	r3, [r4, #16]
 8002d9e:	6861      	ldr	r1, [r4, #4]
 8002da0:	4299      	cmp	r1, r3
 8002da2:	bfde      	ittt	le
 8002da4:	2330      	movle	r3, #48	; 0x30
 8002da6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002daa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002dae:	1b52      	subs	r2, r2, r5
 8002db0:	6122      	str	r2, [r4, #16]
 8002db2:	464b      	mov	r3, r9
 8002db4:	4621      	mov	r1, r4
 8002db6:	4640      	mov	r0, r8
 8002db8:	f8cd a000 	str.w	sl, [sp]
 8002dbc:	aa03      	add	r2, sp, #12
 8002dbe:	f7ff fedf 	bl	8002b80 <_printf_common>
 8002dc2:	3001      	adds	r0, #1
 8002dc4:	d14c      	bne.n	8002e60 <_printf_i+0x200>
 8002dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8002dca:	b004      	add	sp, #16
 8002dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dd0:	4834      	ldr	r0, [pc, #208]	; (8002ea4 <_printf_i+0x244>)
 8002dd2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002dd6:	6829      	ldr	r1, [r5, #0]
 8002dd8:	6823      	ldr	r3, [r4, #0]
 8002dda:	f851 6b04 	ldr.w	r6, [r1], #4
 8002dde:	6029      	str	r1, [r5, #0]
 8002de0:	061d      	lsls	r5, r3, #24
 8002de2:	d514      	bpl.n	8002e0e <_printf_i+0x1ae>
 8002de4:	07df      	lsls	r7, r3, #31
 8002de6:	bf44      	itt	mi
 8002de8:	f043 0320 	orrmi.w	r3, r3, #32
 8002dec:	6023      	strmi	r3, [r4, #0]
 8002dee:	b91e      	cbnz	r6, 8002df8 <_printf_i+0x198>
 8002df0:	6823      	ldr	r3, [r4, #0]
 8002df2:	f023 0320 	bic.w	r3, r3, #32
 8002df6:	6023      	str	r3, [r4, #0]
 8002df8:	2310      	movs	r3, #16
 8002dfa:	e7af      	b.n	8002d5c <_printf_i+0xfc>
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	f043 0320 	orr.w	r3, r3, #32
 8002e02:	6023      	str	r3, [r4, #0]
 8002e04:	2378      	movs	r3, #120	; 0x78
 8002e06:	4828      	ldr	r0, [pc, #160]	; (8002ea8 <_printf_i+0x248>)
 8002e08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e0c:	e7e3      	b.n	8002dd6 <_printf_i+0x176>
 8002e0e:	0659      	lsls	r1, r3, #25
 8002e10:	bf48      	it	mi
 8002e12:	b2b6      	uxthmi	r6, r6
 8002e14:	e7e6      	b.n	8002de4 <_printf_i+0x184>
 8002e16:	4615      	mov	r5, r2
 8002e18:	e7bb      	b.n	8002d92 <_printf_i+0x132>
 8002e1a:	682b      	ldr	r3, [r5, #0]
 8002e1c:	6826      	ldr	r6, [r4, #0]
 8002e1e:	1d18      	adds	r0, r3, #4
 8002e20:	6961      	ldr	r1, [r4, #20]
 8002e22:	6028      	str	r0, [r5, #0]
 8002e24:	0635      	lsls	r5, r6, #24
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	d501      	bpl.n	8002e2e <_printf_i+0x1ce>
 8002e2a:	6019      	str	r1, [r3, #0]
 8002e2c:	e002      	b.n	8002e34 <_printf_i+0x1d4>
 8002e2e:	0670      	lsls	r0, r6, #25
 8002e30:	d5fb      	bpl.n	8002e2a <_printf_i+0x1ca>
 8002e32:	8019      	strh	r1, [r3, #0]
 8002e34:	2300      	movs	r3, #0
 8002e36:	4615      	mov	r5, r2
 8002e38:	6123      	str	r3, [r4, #16]
 8002e3a:	e7ba      	b.n	8002db2 <_printf_i+0x152>
 8002e3c:	682b      	ldr	r3, [r5, #0]
 8002e3e:	2100      	movs	r1, #0
 8002e40:	1d1a      	adds	r2, r3, #4
 8002e42:	602a      	str	r2, [r5, #0]
 8002e44:	681d      	ldr	r5, [r3, #0]
 8002e46:	6862      	ldr	r2, [r4, #4]
 8002e48:	4628      	mov	r0, r5
 8002e4a:	f000 f82f 	bl	8002eac <memchr>
 8002e4e:	b108      	cbz	r0, 8002e54 <_printf_i+0x1f4>
 8002e50:	1b40      	subs	r0, r0, r5
 8002e52:	6060      	str	r0, [r4, #4]
 8002e54:	6863      	ldr	r3, [r4, #4]
 8002e56:	6123      	str	r3, [r4, #16]
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e5e:	e7a8      	b.n	8002db2 <_printf_i+0x152>
 8002e60:	462a      	mov	r2, r5
 8002e62:	4649      	mov	r1, r9
 8002e64:	4640      	mov	r0, r8
 8002e66:	6923      	ldr	r3, [r4, #16]
 8002e68:	47d0      	blx	sl
 8002e6a:	3001      	adds	r0, #1
 8002e6c:	d0ab      	beq.n	8002dc6 <_printf_i+0x166>
 8002e6e:	6823      	ldr	r3, [r4, #0]
 8002e70:	079b      	lsls	r3, r3, #30
 8002e72:	d413      	bmi.n	8002e9c <_printf_i+0x23c>
 8002e74:	68e0      	ldr	r0, [r4, #12]
 8002e76:	9b03      	ldr	r3, [sp, #12]
 8002e78:	4298      	cmp	r0, r3
 8002e7a:	bfb8      	it	lt
 8002e7c:	4618      	movlt	r0, r3
 8002e7e:	e7a4      	b.n	8002dca <_printf_i+0x16a>
 8002e80:	2301      	movs	r3, #1
 8002e82:	4632      	mov	r2, r6
 8002e84:	4649      	mov	r1, r9
 8002e86:	4640      	mov	r0, r8
 8002e88:	47d0      	blx	sl
 8002e8a:	3001      	adds	r0, #1
 8002e8c:	d09b      	beq.n	8002dc6 <_printf_i+0x166>
 8002e8e:	3501      	adds	r5, #1
 8002e90:	68e3      	ldr	r3, [r4, #12]
 8002e92:	9903      	ldr	r1, [sp, #12]
 8002e94:	1a5b      	subs	r3, r3, r1
 8002e96:	42ab      	cmp	r3, r5
 8002e98:	dcf2      	bgt.n	8002e80 <_printf_i+0x220>
 8002e9a:	e7eb      	b.n	8002e74 <_printf_i+0x214>
 8002e9c:	2500      	movs	r5, #0
 8002e9e:	f104 0619 	add.w	r6, r4, #25
 8002ea2:	e7f5      	b.n	8002e90 <_printf_i+0x230>
 8002ea4:	08003369 	.word	0x08003369
 8002ea8:	0800337a 	.word	0x0800337a

08002eac <memchr>:
 8002eac:	4603      	mov	r3, r0
 8002eae:	b510      	push	{r4, lr}
 8002eb0:	b2c9      	uxtb	r1, r1
 8002eb2:	4402      	add	r2, r0
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	d101      	bne.n	8002ebe <memchr+0x12>
 8002eba:	2000      	movs	r0, #0
 8002ebc:	e003      	b.n	8002ec6 <memchr+0x1a>
 8002ebe:	7804      	ldrb	r4, [r0, #0]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	428c      	cmp	r4, r1
 8002ec4:	d1f6      	bne.n	8002eb4 <memchr+0x8>
 8002ec6:	bd10      	pop	{r4, pc}

08002ec8 <memcpy>:
 8002ec8:	440a      	add	r2, r1
 8002eca:	4291      	cmp	r1, r2
 8002ecc:	f100 33ff 	add.w	r3, r0, #4294967295
 8002ed0:	d100      	bne.n	8002ed4 <memcpy+0xc>
 8002ed2:	4770      	bx	lr
 8002ed4:	b510      	push	{r4, lr}
 8002ed6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002eda:	4291      	cmp	r1, r2
 8002edc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ee0:	d1f9      	bne.n	8002ed6 <memcpy+0xe>
 8002ee2:	bd10      	pop	{r4, pc}

08002ee4 <memmove>:
 8002ee4:	4288      	cmp	r0, r1
 8002ee6:	b510      	push	{r4, lr}
 8002ee8:	eb01 0402 	add.w	r4, r1, r2
 8002eec:	d902      	bls.n	8002ef4 <memmove+0x10>
 8002eee:	4284      	cmp	r4, r0
 8002ef0:	4623      	mov	r3, r4
 8002ef2:	d807      	bhi.n	8002f04 <memmove+0x20>
 8002ef4:	1e43      	subs	r3, r0, #1
 8002ef6:	42a1      	cmp	r1, r4
 8002ef8:	d008      	beq.n	8002f0c <memmove+0x28>
 8002efa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002efe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f02:	e7f8      	b.n	8002ef6 <memmove+0x12>
 8002f04:	4601      	mov	r1, r0
 8002f06:	4402      	add	r2, r0
 8002f08:	428a      	cmp	r2, r1
 8002f0a:	d100      	bne.n	8002f0e <memmove+0x2a>
 8002f0c:	bd10      	pop	{r4, pc}
 8002f0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002f16:	e7f7      	b.n	8002f08 <memmove+0x24>

08002f18 <_free_r>:
 8002f18:	b538      	push	{r3, r4, r5, lr}
 8002f1a:	4605      	mov	r5, r0
 8002f1c:	2900      	cmp	r1, #0
 8002f1e:	d040      	beq.n	8002fa2 <_free_r+0x8a>
 8002f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f24:	1f0c      	subs	r4, r1, #4
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	bfb8      	it	lt
 8002f2a:	18e4      	addlt	r4, r4, r3
 8002f2c:	f000 f910 	bl	8003150 <__malloc_lock>
 8002f30:	4a1c      	ldr	r2, [pc, #112]	; (8002fa4 <_free_r+0x8c>)
 8002f32:	6813      	ldr	r3, [r2, #0]
 8002f34:	b933      	cbnz	r3, 8002f44 <_free_r+0x2c>
 8002f36:	6063      	str	r3, [r4, #4]
 8002f38:	6014      	str	r4, [r2, #0]
 8002f3a:	4628      	mov	r0, r5
 8002f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f40:	f000 b90c 	b.w	800315c <__malloc_unlock>
 8002f44:	42a3      	cmp	r3, r4
 8002f46:	d908      	bls.n	8002f5a <_free_r+0x42>
 8002f48:	6820      	ldr	r0, [r4, #0]
 8002f4a:	1821      	adds	r1, r4, r0
 8002f4c:	428b      	cmp	r3, r1
 8002f4e:	bf01      	itttt	eq
 8002f50:	6819      	ldreq	r1, [r3, #0]
 8002f52:	685b      	ldreq	r3, [r3, #4]
 8002f54:	1809      	addeq	r1, r1, r0
 8002f56:	6021      	streq	r1, [r4, #0]
 8002f58:	e7ed      	b.n	8002f36 <_free_r+0x1e>
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	b10b      	cbz	r3, 8002f64 <_free_r+0x4c>
 8002f60:	42a3      	cmp	r3, r4
 8002f62:	d9fa      	bls.n	8002f5a <_free_r+0x42>
 8002f64:	6811      	ldr	r1, [r2, #0]
 8002f66:	1850      	adds	r0, r2, r1
 8002f68:	42a0      	cmp	r0, r4
 8002f6a:	d10b      	bne.n	8002f84 <_free_r+0x6c>
 8002f6c:	6820      	ldr	r0, [r4, #0]
 8002f6e:	4401      	add	r1, r0
 8002f70:	1850      	adds	r0, r2, r1
 8002f72:	4283      	cmp	r3, r0
 8002f74:	6011      	str	r1, [r2, #0]
 8002f76:	d1e0      	bne.n	8002f3a <_free_r+0x22>
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	4401      	add	r1, r0
 8002f7e:	6011      	str	r1, [r2, #0]
 8002f80:	6053      	str	r3, [r2, #4]
 8002f82:	e7da      	b.n	8002f3a <_free_r+0x22>
 8002f84:	d902      	bls.n	8002f8c <_free_r+0x74>
 8002f86:	230c      	movs	r3, #12
 8002f88:	602b      	str	r3, [r5, #0]
 8002f8a:	e7d6      	b.n	8002f3a <_free_r+0x22>
 8002f8c:	6820      	ldr	r0, [r4, #0]
 8002f8e:	1821      	adds	r1, r4, r0
 8002f90:	428b      	cmp	r3, r1
 8002f92:	bf01      	itttt	eq
 8002f94:	6819      	ldreq	r1, [r3, #0]
 8002f96:	685b      	ldreq	r3, [r3, #4]
 8002f98:	1809      	addeq	r1, r1, r0
 8002f9a:	6021      	streq	r1, [r4, #0]
 8002f9c:	6063      	str	r3, [r4, #4]
 8002f9e:	6054      	str	r4, [r2, #4]
 8002fa0:	e7cb      	b.n	8002f3a <_free_r+0x22>
 8002fa2:	bd38      	pop	{r3, r4, r5, pc}
 8002fa4:	200002d0 	.word	0x200002d0

08002fa8 <sbrk_aligned>:
 8002fa8:	b570      	push	{r4, r5, r6, lr}
 8002faa:	4e0e      	ldr	r6, [pc, #56]	; (8002fe4 <sbrk_aligned+0x3c>)
 8002fac:	460c      	mov	r4, r1
 8002fae:	6831      	ldr	r1, [r6, #0]
 8002fb0:	4605      	mov	r5, r0
 8002fb2:	b911      	cbnz	r1, 8002fba <sbrk_aligned+0x12>
 8002fb4:	f000 f8bc 	bl	8003130 <_sbrk_r>
 8002fb8:	6030      	str	r0, [r6, #0]
 8002fba:	4621      	mov	r1, r4
 8002fbc:	4628      	mov	r0, r5
 8002fbe:	f000 f8b7 	bl	8003130 <_sbrk_r>
 8002fc2:	1c43      	adds	r3, r0, #1
 8002fc4:	d00a      	beq.n	8002fdc <sbrk_aligned+0x34>
 8002fc6:	1cc4      	adds	r4, r0, #3
 8002fc8:	f024 0403 	bic.w	r4, r4, #3
 8002fcc:	42a0      	cmp	r0, r4
 8002fce:	d007      	beq.n	8002fe0 <sbrk_aligned+0x38>
 8002fd0:	1a21      	subs	r1, r4, r0
 8002fd2:	4628      	mov	r0, r5
 8002fd4:	f000 f8ac 	bl	8003130 <_sbrk_r>
 8002fd8:	3001      	adds	r0, #1
 8002fda:	d101      	bne.n	8002fe0 <sbrk_aligned+0x38>
 8002fdc:	f04f 34ff 	mov.w	r4, #4294967295
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	bd70      	pop	{r4, r5, r6, pc}
 8002fe4:	200002d4 	.word	0x200002d4

08002fe8 <_malloc_r>:
 8002fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fec:	1ccd      	adds	r5, r1, #3
 8002fee:	f025 0503 	bic.w	r5, r5, #3
 8002ff2:	3508      	adds	r5, #8
 8002ff4:	2d0c      	cmp	r5, #12
 8002ff6:	bf38      	it	cc
 8002ff8:	250c      	movcc	r5, #12
 8002ffa:	2d00      	cmp	r5, #0
 8002ffc:	4607      	mov	r7, r0
 8002ffe:	db01      	blt.n	8003004 <_malloc_r+0x1c>
 8003000:	42a9      	cmp	r1, r5
 8003002:	d905      	bls.n	8003010 <_malloc_r+0x28>
 8003004:	230c      	movs	r3, #12
 8003006:	2600      	movs	r6, #0
 8003008:	603b      	str	r3, [r7, #0]
 800300a:	4630      	mov	r0, r6
 800300c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003010:	4e2e      	ldr	r6, [pc, #184]	; (80030cc <_malloc_r+0xe4>)
 8003012:	f000 f89d 	bl	8003150 <__malloc_lock>
 8003016:	6833      	ldr	r3, [r6, #0]
 8003018:	461c      	mov	r4, r3
 800301a:	bb34      	cbnz	r4, 800306a <_malloc_r+0x82>
 800301c:	4629      	mov	r1, r5
 800301e:	4638      	mov	r0, r7
 8003020:	f7ff ffc2 	bl	8002fa8 <sbrk_aligned>
 8003024:	1c43      	adds	r3, r0, #1
 8003026:	4604      	mov	r4, r0
 8003028:	d14d      	bne.n	80030c6 <_malloc_r+0xde>
 800302a:	6834      	ldr	r4, [r6, #0]
 800302c:	4626      	mov	r6, r4
 800302e:	2e00      	cmp	r6, #0
 8003030:	d140      	bne.n	80030b4 <_malloc_r+0xcc>
 8003032:	6823      	ldr	r3, [r4, #0]
 8003034:	4631      	mov	r1, r6
 8003036:	4638      	mov	r0, r7
 8003038:	eb04 0803 	add.w	r8, r4, r3
 800303c:	f000 f878 	bl	8003130 <_sbrk_r>
 8003040:	4580      	cmp	r8, r0
 8003042:	d13a      	bne.n	80030ba <_malloc_r+0xd2>
 8003044:	6821      	ldr	r1, [r4, #0]
 8003046:	3503      	adds	r5, #3
 8003048:	1a6d      	subs	r5, r5, r1
 800304a:	f025 0503 	bic.w	r5, r5, #3
 800304e:	3508      	adds	r5, #8
 8003050:	2d0c      	cmp	r5, #12
 8003052:	bf38      	it	cc
 8003054:	250c      	movcc	r5, #12
 8003056:	4638      	mov	r0, r7
 8003058:	4629      	mov	r1, r5
 800305a:	f7ff ffa5 	bl	8002fa8 <sbrk_aligned>
 800305e:	3001      	adds	r0, #1
 8003060:	d02b      	beq.n	80030ba <_malloc_r+0xd2>
 8003062:	6823      	ldr	r3, [r4, #0]
 8003064:	442b      	add	r3, r5
 8003066:	6023      	str	r3, [r4, #0]
 8003068:	e00e      	b.n	8003088 <_malloc_r+0xa0>
 800306a:	6822      	ldr	r2, [r4, #0]
 800306c:	1b52      	subs	r2, r2, r5
 800306e:	d41e      	bmi.n	80030ae <_malloc_r+0xc6>
 8003070:	2a0b      	cmp	r2, #11
 8003072:	d916      	bls.n	80030a2 <_malloc_r+0xba>
 8003074:	1961      	adds	r1, r4, r5
 8003076:	42a3      	cmp	r3, r4
 8003078:	6025      	str	r5, [r4, #0]
 800307a:	bf18      	it	ne
 800307c:	6059      	strne	r1, [r3, #4]
 800307e:	6863      	ldr	r3, [r4, #4]
 8003080:	bf08      	it	eq
 8003082:	6031      	streq	r1, [r6, #0]
 8003084:	5162      	str	r2, [r4, r5]
 8003086:	604b      	str	r3, [r1, #4]
 8003088:	4638      	mov	r0, r7
 800308a:	f104 060b 	add.w	r6, r4, #11
 800308e:	f000 f865 	bl	800315c <__malloc_unlock>
 8003092:	f026 0607 	bic.w	r6, r6, #7
 8003096:	1d23      	adds	r3, r4, #4
 8003098:	1af2      	subs	r2, r6, r3
 800309a:	d0b6      	beq.n	800300a <_malloc_r+0x22>
 800309c:	1b9b      	subs	r3, r3, r6
 800309e:	50a3      	str	r3, [r4, r2]
 80030a0:	e7b3      	b.n	800300a <_malloc_r+0x22>
 80030a2:	6862      	ldr	r2, [r4, #4]
 80030a4:	42a3      	cmp	r3, r4
 80030a6:	bf0c      	ite	eq
 80030a8:	6032      	streq	r2, [r6, #0]
 80030aa:	605a      	strne	r2, [r3, #4]
 80030ac:	e7ec      	b.n	8003088 <_malloc_r+0xa0>
 80030ae:	4623      	mov	r3, r4
 80030b0:	6864      	ldr	r4, [r4, #4]
 80030b2:	e7b2      	b.n	800301a <_malloc_r+0x32>
 80030b4:	4634      	mov	r4, r6
 80030b6:	6876      	ldr	r6, [r6, #4]
 80030b8:	e7b9      	b.n	800302e <_malloc_r+0x46>
 80030ba:	230c      	movs	r3, #12
 80030bc:	4638      	mov	r0, r7
 80030be:	603b      	str	r3, [r7, #0]
 80030c0:	f000 f84c 	bl	800315c <__malloc_unlock>
 80030c4:	e7a1      	b.n	800300a <_malloc_r+0x22>
 80030c6:	6025      	str	r5, [r4, #0]
 80030c8:	e7de      	b.n	8003088 <_malloc_r+0xa0>
 80030ca:	bf00      	nop
 80030cc:	200002d0 	.word	0x200002d0

080030d0 <_realloc_r>:
 80030d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030d4:	4680      	mov	r8, r0
 80030d6:	4614      	mov	r4, r2
 80030d8:	460e      	mov	r6, r1
 80030da:	b921      	cbnz	r1, 80030e6 <_realloc_r+0x16>
 80030dc:	4611      	mov	r1, r2
 80030de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80030e2:	f7ff bf81 	b.w	8002fe8 <_malloc_r>
 80030e6:	b92a      	cbnz	r2, 80030f4 <_realloc_r+0x24>
 80030e8:	f7ff ff16 	bl	8002f18 <_free_r>
 80030ec:	4625      	mov	r5, r4
 80030ee:	4628      	mov	r0, r5
 80030f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030f4:	f000 f838 	bl	8003168 <_malloc_usable_size_r>
 80030f8:	4284      	cmp	r4, r0
 80030fa:	4607      	mov	r7, r0
 80030fc:	d802      	bhi.n	8003104 <_realloc_r+0x34>
 80030fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003102:	d812      	bhi.n	800312a <_realloc_r+0x5a>
 8003104:	4621      	mov	r1, r4
 8003106:	4640      	mov	r0, r8
 8003108:	f7ff ff6e 	bl	8002fe8 <_malloc_r>
 800310c:	4605      	mov	r5, r0
 800310e:	2800      	cmp	r0, #0
 8003110:	d0ed      	beq.n	80030ee <_realloc_r+0x1e>
 8003112:	42bc      	cmp	r4, r7
 8003114:	4622      	mov	r2, r4
 8003116:	4631      	mov	r1, r6
 8003118:	bf28      	it	cs
 800311a:	463a      	movcs	r2, r7
 800311c:	f7ff fed4 	bl	8002ec8 <memcpy>
 8003120:	4631      	mov	r1, r6
 8003122:	4640      	mov	r0, r8
 8003124:	f7ff fef8 	bl	8002f18 <_free_r>
 8003128:	e7e1      	b.n	80030ee <_realloc_r+0x1e>
 800312a:	4635      	mov	r5, r6
 800312c:	e7df      	b.n	80030ee <_realloc_r+0x1e>
	...

08003130 <_sbrk_r>:
 8003130:	b538      	push	{r3, r4, r5, lr}
 8003132:	2300      	movs	r3, #0
 8003134:	4d05      	ldr	r5, [pc, #20]	; (800314c <_sbrk_r+0x1c>)
 8003136:	4604      	mov	r4, r0
 8003138:	4608      	mov	r0, r1
 800313a:	602b      	str	r3, [r5, #0]
 800313c:	f7fd fbec 	bl	8000918 <_sbrk>
 8003140:	1c43      	adds	r3, r0, #1
 8003142:	d102      	bne.n	800314a <_sbrk_r+0x1a>
 8003144:	682b      	ldr	r3, [r5, #0]
 8003146:	b103      	cbz	r3, 800314a <_sbrk_r+0x1a>
 8003148:	6023      	str	r3, [r4, #0]
 800314a:	bd38      	pop	{r3, r4, r5, pc}
 800314c:	200002d8 	.word	0x200002d8

08003150 <__malloc_lock>:
 8003150:	4801      	ldr	r0, [pc, #4]	; (8003158 <__malloc_lock+0x8>)
 8003152:	f000 b811 	b.w	8003178 <__retarget_lock_acquire_recursive>
 8003156:	bf00      	nop
 8003158:	200002dc 	.word	0x200002dc

0800315c <__malloc_unlock>:
 800315c:	4801      	ldr	r0, [pc, #4]	; (8003164 <__malloc_unlock+0x8>)
 800315e:	f000 b80c 	b.w	800317a <__retarget_lock_release_recursive>
 8003162:	bf00      	nop
 8003164:	200002dc 	.word	0x200002dc

08003168 <_malloc_usable_size_r>:
 8003168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800316c:	1f18      	subs	r0, r3, #4
 800316e:	2b00      	cmp	r3, #0
 8003170:	bfbc      	itt	lt
 8003172:	580b      	ldrlt	r3, [r1, r0]
 8003174:	18c0      	addlt	r0, r0, r3
 8003176:	4770      	bx	lr

08003178 <__retarget_lock_acquire_recursive>:
 8003178:	4770      	bx	lr

0800317a <__retarget_lock_release_recursive>:
 800317a:	4770      	bx	lr

0800317c <_init>:
 800317c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317e:	bf00      	nop
 8003180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003182:	bc08      	pop	{r3}
 8003184:	469e      	mov	lr, r3
 8003186:	4770      	bx	lr

08003188 <_fini>:
 8003188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318a:	bf00      	nop
 800318c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800318e:	bc08      	pop	{r3}
 8003190:	469e      	mov	lr, r3
 8003192:	4770      	bx	lr
